
sensor_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f164  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800f270  0800f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7cc  0800f7cc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f7cc  0800f7cc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f7cc  0800f7cc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f7cc  0800f7cc  0001f7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f7d4  0800f7d4  0001f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001360  200001e8  0800f9c4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  0800f9c4  00021548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035178  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b08  00000000  00000000  00055389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002320  00000000  00000000  0005ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002168  00000000  00000000  0005d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d4f  00000000  00000000  0005f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002183e  00000000  00000000  0008006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9910  00000000  00000000  000a18ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b1bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a498  00000000  00000000  0014b210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800f258 	.word	0x0800f258

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800f258 	.word	0x0800f258

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
 8000160:	2300      	movs	r3, #0
 8000162:	4618      	mov	r0, r3
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	6039      	str	r1, [r7, #0]
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	4618      	mov	r0, r3
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr

08000180 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	781a      	ldrb	r2, [r3, #0]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	701a      	strb	r2, [r3, #0]
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <_ZNSt11char_traitsIcE2ltERKcS2_>:
      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { return __c1 == __c2; }

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	6039      	str	r1, [r7, #0]
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	781a      	ldrb	r2, [r3, #0]
		< static_cast<unsigned char>(__c2));
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	bf34      	ite	cc
 80001b2:	2301      	movcc	r3, #1
 80001b4:	2300      	movcs	r3, #0
 80001b6:	b2db      	uxtb	r3, r3
      }
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr

080001c2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b086      	sub	sp, #24
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	60f8      	str	r0, [r7, #12]
 80001ca:	60b9      	str	r1, [r7, #8]
 80001cc:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d101      	bne.n	80001d8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	e032      	b.n	800023e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
#if __cplusplus >= 201703L
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
 80001d8:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d028      	beq.n	8000230 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6e>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	697a      	ldr	r2, [r7, #20]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d220      	bcs.n	800022c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6a>
	      if (lt(__s1[__i], __s2[__i]))
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	18d0      	adds	r0, r2, r3
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	4413      	add	r3, r2
 80001f6:	4619      	mov	r1, r3
 80001f8:	f7ff ffd0 	bl	800019c <_ZNSt11char_traitsIcE2ltERKcS2_>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d002      	beq.n	8000208 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x46>
		return -1;
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	e01a      	b.n	800023e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	      else if (lt(__s2[__i], __s1[__i]))
 8000208:	68ba      	ldr	r2, [r7, #8]
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	18d0      	adds	r0, r2, r3
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	4413      	add	r3, r2
 8000214:	4619      	mov	r1, r3
 8000216:	f7ff ffc1 	bl	800019c <_ZNSt11char_traitsIcE2ltERKcS2_>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x62>
		return 1;
 8000220:	2301      	movs	r3, #1
 8000222:	e00c      	b.n	800023e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	    for (size_t __i = 0; __i < __n; ++__i)
 8000224:	697b      	ldr	r3, [r7, #20]
 8000226:	3301      	adds	r3, #1
 8000228:	617b      	str	r3, [r7, #20]
 800022a:	e7da      	b.n	80001e2 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x20>
	    return 0;
 800022c:	2300      	movs	r3, #0
 800022e:	e006      	b.n	800023e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	68b9      	ldr	r1, [r7, #8]
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f00e f80f 	bl	800e258 <memcmp>
 800023a:	4603      	mov	r3, r0
 800023c:	bf00      	nop
      }
 800023e:	4618      	mov	r0, r3
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}

08000246 <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000246:	b580      	push	{r7, lr}
 8000248:	b084      	sub	sp, #16
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 8000252:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 8000254:	2b00      	cmp	r3, #0
 8000256:	d004      	beq.n	8000262 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 fb3b 	bl	80008d4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800025e:	4603      	mov	r3, r0
 8000260:	e004      	b.n	800026c <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f7ff ff72 	bl	800014c <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	bf00      	nop
      }
 800026c:	4618      	mov	r0, r3
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d101      	bne.n	800028a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x16>
	  return __s1;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	e015      	b.n	80002b6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800028a:	f7ff ff67 	bl	800015c <_ZSt21is_constant_evaluatedv>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d006      	beq.n	80002a2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	68b9      	ldr	r1, [r7, #8]
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 fb53 	bl	8000944 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>
 800029e:	4603      	mov	r3, r0
 80002a0:	e009      	b.n	80002b6 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4610      	mov	r0, r2
 80002a8:	4619      	mov	r1, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	461a      	mov	r2, r3
 80002ae:	f00d ffe3 	bl	800e278 <memcpy>
 80002b2:	4603      	mov	r3, r0
 80002b4:	bf00      	nop
      }
 80002b6:	4618      	mov	r0, r3
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>:
		UNKNOWN_COMMAND
	};

	class Command {
	public:
		Command(const std::string_view& other_name,
 80002be:	b590      	push	{r4, r7, lr}
 80002c0:	b087      	sub	sp, #28
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	4613      	mov	r3, r2
 80002cc:	71fb      	strb	r3, [r7, #7]
				CommandRoles other_role, void(*func)()) :
			name(other_name), role(other_role), callback(func) {};
 80002ce:	68fc      	ldr	r4, [r7, #12]
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4618      	mov	r0, r3
 80002d6:	f00d fe8a 	bl	800dfee <_ZNSaIcEC1Ev>
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	461a      	mov	r2, r3
 80002e0:	68b9      	ldr	r1, [r7, #8]
 80002e2:	4620      	mov	r0, r4
 80002e4:	f000 fc05 	bl	8000af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ISt17basic_string_viewIcS2_EvEERKT_RKS3_>
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	4618      	mov	r0, r3
 80002ee:	f00d fe80 	bl	800dff2 <_ZNSaIcED1Ev>
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	79fa      	ldrb	r2, [r7, #7]
 80002f6:	761a      	strb	r2, [r3, #24]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	61da      	str	r2, [r3, #28]
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4618      	mov	r0, r3
 8000302:	371c      	adds	r7, #28
 8000304:	46bd      	mov	sp, r7
 8000306:	bd90      	pop	{r4, r7, pc}

08000308 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 fc46 	bl	8000ba2 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4618      	mov	r0, r3
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fc29 	bl	8000b82 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4618      	mov	r0, r3
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffeb 	bl	8000320 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4618      	mov	r0, r3
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f000 fc74 	bl	8000c4a <_ZNSaIN3CLI7CommandEED1Ev>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4618      	mov	r0, r3
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fc57 	bl	8000c2a <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE12_Vector_implC1Ev>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4618      	mov	r0, r3
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEC1Ev>:
      vector() = default;
 8000386:	b580      	push	{r7, lr}
 8000388:	b082      	sub	sp, #8
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ffeb 	bl	800036c <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EEC1Ev>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <_ZZN22CommandLineInterpreterC4EtENKUlvE_clEv>:
// Constructor of the class
// @argument	size - max length of a command
CommandLineInterpreter::CommandLineInterpreter(const uint16_t size = 64) : max_size(size) {
	// Make a command list
	// Reserve first and second positions to BUSY and NOT_A_COMMAND states
	command_list.emplace_back("BUSY", CLI::CommandRoles::SERVICE_COMMAND, [](){});
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <_ZZN22CommandLineInterpreterC4EtENUlvE_4_FUNEv>:
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff fff2 	bl	80003a0 <_ZZN22CommandLineInterpreterC4EtENKUlvE_clEv>
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <_ZZN22CommandLineInterpreterC4EtENKUlvE_cvPFvvEEv>:
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	4b02      	ldr	r3, [pc, #8]	; (80003d4 <_ZZN22CommandLineInterpreterC4EtENKUlvE_cvPFvvEEv+0x14>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	080003b3 	.word	0x080003b3

080003d8 <_ZN22CommandLineInterpreterC1Et>:
CommandLineInterpreter::CommandLineInterpreter(const uint16_t size = 64) : max_size(size) {
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]
 80003e4:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <_ZN22CommandLineInterpreterC1Et+0x78>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3304      	adds	r3, #4
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ffa3 	bl	800033a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	887a      	ldrh	r2, [r7, #2]
 80003f8:	821a      	strh	r2, [r3, #16]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f103 0414 	add.w	r4, r3, #20
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	4618      	mov	r0, r3
 8000406:	f00d fdf2 	bl	800dfee <_ZNSaIcEC1Ev>
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	461a      	mov	r2, r3
 8000410:	4910      	ldr	r1, [pc, #64]	; (8000454 <_ZN22CommandLineInterpreterC1Et+0x7c>)
 8000412:	4620      	mov	r0, r4
 8000414:	f000 fb8e 	bl	8000b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4618      	mov	r0, r3
 800041e:	f00d fde8 	bl	800dff2 <_ZNSaIcED1Ev>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	332c      	adds	r3, #44	; 0x2c
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ffad 	bl	8000386 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEC1Ev>
	command_list.emplace_back("BUSY", CLI::CommandRoles::SERVICE_COMMAND, [](){});
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000432:	2300      	movs	r3, #0
 8000434:	72fb      	strb	r3, [r7, #11]
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	f107 020b 	add.w	r2, r7, #11
 800043e:	4906      	ldr	r1, [pc, #24]	; (8000458 <_ZN22CommandLineInterpreterC1Et+0x80>)
 8000440:	f000 fc41 	bl	8000cc6 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEERS1_DpOT_>
}
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4618      	mov	r0, r3
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bd90      	pop	{r4, r7, pc}
 800044e:	bf00      	nop
 8000450:	0800f608 	.word	0x0800f608
 8000454:	0800f270 	.word	0x0800f270
 8000458:	0800f274 	.word	0x0800f274

0800045c <_ZN22CommandLineInterpreterD1Ev>:
	// Add user's commands to the list
	if(commands.size() > 0)
		command_list.insert(command_list.end(), commands.begin(), commands.end());
}

CommandLineInterpreter::~CommandLineInterpreter() {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <_ZN22CommandLineInterpreterD1Ev+0x38>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	332c      	adds	r3, #44	; 0x2c
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fc0e 	bl	8000c90 <_ZNSt6vectorIN3CLI7CommandESaIS1_EED1Ev>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3314      	adds	r3, #20
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fa8d 	bl	8000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3304      	adds	r3, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f000 fbb6 	bl	8000bf4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
}
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	0800f608 	.word	0x0800f608

08000498 <_ZN22CommandLineInterpreterD0Ev>:
CommandLineInterpreter::~CommandLineInterpreter() {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
}
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ffdb 	bl	800045c <_ZN22CommandLineInterpreterD1Ev>
 80004a6:	2138      	movs	r1, #56	; 0x38
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f00d fd8d 	bl	800dfc8 <_ZdlPvj>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4618      	mov	r0, r3
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_ZN22CommandLineInterpreter7processERKc>:

// Add a symbol to the buffer and analyse the string for end and max length
// @sym 	- sym that taken from UART
// @retval	- status
CLI::StatusCode CommandLineInterpreter::process(const char& sym) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	// When we find a terminate symbol that stop the receiving and start the processing of a command
	if (sym == '\n') {
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b0a      	cmp	r3, #10
 80004c8:	d104      	bne.n	80004d4 <_ZN22CommandLineInterpreter7processERKc+0x1c>
		return parse_command();
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f912 	bl	80006f4 <_ZN22CommandLineInterpreter13parse_commandEv>
 80004d0:	4603      	mov	r3, r0
 80004d2:	e023      	b.n	800051c <_ZN22CommandLineInterpreter7processERKc+0x64>
	}

	// Return NOT A COMMAND when current size bigger that max size
	if (command.size() > max_size) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3314      	adds	r3, #20
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 faca 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80004de:	4602      	mov	r2, r0
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	8a1b      	ldrh	r3, [r3, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	bf8c      	ite	hi
 80004e8:	2301      	movhi	r3, #1
 80004ea:	2300      	movls	r3, #0
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <_ZN22CommandLineInterpreter7processERKc+0x48>
		command.clear();
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3314      	adds	r3, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fc50 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		return CLI::StatusCode::MAX_SIZE_REACHED;
 80004fc:	2302      	movs	r3, #2
 80004fe:	e00d      	b.n	800051c <_ZN22CommandLineInterpreter7processERKc+0x64>
	}

	// Usually \r meets with \n  in \r\n combination
	// Check \r before \n and skip it
	if (sym != '\r')
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d008      	beq.n	800051a <_ZN22CommandLineInterpreter7processERKc+0x62>
		command.push_back(sym); // Add sym to buffer
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f103 0214 	add.w	r2, r3, #20
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	4610      	mov	r0, r2
 8000516:	f000 fc4d 	bl	8000db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>

	// Return a busy state cause we're reading now
	return CLI::StatusCode::BUSY;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <_ZN9__gnu_cxxeqIPN3CLI7CommandES3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ffee 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8000548:	4603      	mov	r3, r0
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	6838      	ldr	r0, [r7, #0]
 800054e:	f7ff ffe9 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8000552:	4603      	mov	r3, r0
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	429c      	cmp	r4, r3
 8000558:	bf0c      	ite	eq
 800055a:	2301      	moveq	r3, #1
 800055c:	2300      	movne	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bd90      	pop	{r4, r7, pc}

08000568 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f103 0220 	add.w	r2, r3, #32
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
	return *this;
 800057c:	687b      	ldr	r3, [r7, #4]
      }
 800057e:	4618      	mov	r0, r3
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_ZN3CLI7CommandC1ERKS0_>:
	class Command {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	4611      	mov	r1, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fc5a 	bl	8000e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	7e1a      	ldrb	r2, [r3, #24]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	761a      	strb	r2, [r3, #24]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	69da      	ldr	r2, [r3, #28]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	61da      	str	r2, [r3, #28]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN3CLI7CommandD1Ev>:
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f9e8 	bl	8000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE>:

// Add commands to the command list
void CommandLineInterpreter::add_commands(std::vector<CLI::Command>& commands) {
 80005d2:	b590      	push	{r4, r7, lr}
 80005d4:	b09b      	sub	sp, #108	; 0x6c
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	for (auto user_command : commands) {
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
 80005e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80005e2:	f000 fc1b 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 80005e6:	4603      	mov	r3, r0
 80005e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80005ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80005ec:	f000 fbc5 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 80005f0:	4603      	mov	r3, r0
 80005f2:	657b      	str	r3, [r7, #84]	; 0x54
 80005f4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80005f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ff9a 	bl	8000538 <_ZN9__gnu_cxxeqIPN3CLI7CommandES3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d06d      	beq.n	80006ec <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0x11a>
 8000610:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fc11 	bl	8000e3c <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEdeEv>
 800061a:	4602      	mov	r2, r0
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffb0 	bl	8000588 <_ZN3CLI7CommandC1ERKS0_>
		// Check for duplications
		bool isExist = false;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		for (auto existing_command : command_list) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	332c      	adds	r3, #44	; 0x2c
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000634:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000636:	f000 fbf1 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 800063a:	4603      	mov	r3, r0
 800063c:	653b      	str	r3, [r7, #80]	; 0x50
 800063e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000640:	f000 fb9b 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 8000644:	4603      	mov	r3, r0
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000648:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800064c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff70 	bl	8000538 <_ZN9__gnu_cxxeqIPN3CLI7CommandES3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8000658:	4603      	mov	r3, r0
 800065a:	f083 0301 	eor.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d029      	beq.n	80006b8 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0xe6>
 8000664:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fbe7 	bl	8000e3c <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEdeEv>
 800066e:	4602      	mov	r2, r0
 8000670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff86 	bl	8000588 <_ZN3CLI7CommandC1ERKS0_>
			if (user_command.name == existing_command.name) {
 800067c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fc1a 	bl	8000ec0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d004      	beq.n	800069c <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0xca>
				isExist = true;
 8000692:	2301      	movs	r3, #1
 8000694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000698:	2400      	movs	r4, #0
 800069a:	e000      	b.n	800069e <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0xcc>
 800069c:	2401      	movs	r4, #1
 800069e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff88 	bl	80005b8 <_ZN3CLI7CommandD1Ev>
 80006a8:	2c01      	cmp	r4, #1
 80006aa:	d105      	bne.n	80006b8 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0xe6>
		for (auto existing_command : command_list) {
 80006ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff59 	bl	8000568 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEppEv>
 80006b6:	e7c7      	b.n	8000648 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0x76>
			}
		}

		if (!isExist)
 80006b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80006bc:	f083 0301 	eor.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d007      	beq.n	80006d6 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0x104>
			command_list.push_back(user_command);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	332c      	adds	r3, #44	; 0x2c
 80006ca:	f107 020c 	add.w	r2, r7, #12
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc1f 	bl	8000f14 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE9push_backERKS1_>
	for (auto user_command : commands) {
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff6c 	bl	80005b8 <_ZN3CLI7CommandD1Ev>
 80006e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff3f 	bl	8000568 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEppEv>
 80006ea:	e783      	b.n	80005f4 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE+0x22>
	}
}
 80006ec:	bf00      	nop
 80006ee:	376c      	adds	r7, #108	; 0x6c
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd90      	pop	{r4, r7, pc}

080006f4 <_ZN22CommandLineInterpreter13parse_commandEv>:

// Tries to recognise a command in the buffer
// @retval	- status
CLI::StatusCode CommandLineInterpreter::parse_command() {
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b093      	sub	sp, #76	; 0x4c
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// Clear arguments buffer
	args.clear();
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3304      	adds	r3, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fc2d 	bl	8000f60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>

	// Parse string to the first space to split off a command and keys
	// (Most of commands looks like "command key1 key2 ..."
	size_t pos = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
	while (pos < command.size()) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3314      	adds	r3, #20
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f9af 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000714:	4602      	mov	r2, r0
 8000716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000718:	4293      	cmp	r3, r2
 800071a:	bf34      	ite	cc
 800071c:	2301      	movcc	r3, #1
 800071e:	2300      	movcs	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d013      	beq.n	800074e <_ZN22CommandLineInterpreter13parse_commandEv+0x5a>
		if (command[pos] == ' ')
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3314      	adds	r3, #20
 800072a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f943 	bl	80009b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000732:	4603      	mov	r3, r0
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b20      	cmp	r3, #32
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d103      	bne.n	800074c <_ZN22CommandLineInterpreter13parse_commandEv+0x58>
			break;
		++pos;
 8000744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000746:	3301      	adds	r3, #1
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
	while (pos < command.size()) {
 800074a:	e7de      	b.n	800070a <_ZN22CommandLineInterpreter13parse_commandEv+0x16>
			break;
 800074c:	bf00      	nop
	}
	std::string str;
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fc12 	bl	8000f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	str.append(command, 0, pos++);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f103 0114 	add.w	r1, r3, #20
 800075e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	647a      	str	r2, [r7, #68]	; 0x44
 8000764:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000768:	2200      	movs	r2, #0
 800076a:	f000 fc2b 	bl	8000fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_jj>

	// Save the argument of the command
	std::string tmp;
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fc02 	bl	8000f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	for (size_t i = pos; i < command.size(); ++i) {
 8000778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3314      	adds	r3, #20
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f976 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000786:	4602      	mov	r2, r0
 8000788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800078a:	4293      	cmp	r3, r2
 800078c:	bf34      	ite	cc
 800078e:	2301      	movcc	r3, #1
 8000790:	2300      	movcs	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d02e      	beq.n	80007f6 <_ZN22CommandLineInterpreter13parse_commandEv+0x102>
		if (command[i] == ' ') {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3314      	adds	r3, #20
 800079c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f90a 	bl	80009b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80007a4:	4603      	mov	r3, r0
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d00d      	beq.n	80007d2 <_ZN22CommandLineInterpreter13parse_commandEv+0xde>
			args.push_back(tmp);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3304      	adds	r3, #4
 80007ba:	f107 020c 	add.w	r2, r7, #12
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fc23 	bl	800100c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
			tmp.clear();
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fae6 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
 80007d0:	e00d      	b.n	80007ee <_ZN22CommandLineInterpreter13parse_commandEv+0xfa>
		}
		else
			tmp += command[i];
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3314      	adds	r3, #20
 80007d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f8ed 	bl	80009b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80007de:	4603      	mov	r3, r0
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fc35 	bl	8001058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	for (size_t i = pos; i < command.size(); ++i) {
 80007ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007f0:	3301      	adds	r3, #1
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
 80007f4:	e7c2      	b.n	800077c <_ZN22CommandLineInterpreter13parse_commandEv+0x88>
	}
	args.push_back(tmp);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3304      	adds	r3, #4
 80007fa:	f107 020c 	add.w	r2, r7, #12
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fc03 	bl	800100c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
	tmp.clear();
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fac6 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>

	// Try to find the command in the command list
	// Skip first two commands in a list because they are reserved to BUSY and NOT A COMMAND states
	for (size_t i = 2; i < command_list.size(); ++i) {
 8000810:	2302      	movs	r3, #2
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	332c      	adds	r3, #44	; 0x2c
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa9f 	bl	8000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>
 800081e:	4602      	mov	r2, r0
 8000820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000822:	4293      	cmp	r3, r2
 8000824:	bf34      	ite	cc
 8000826:	2301      	movcc	r3, #1
 8000828:	2300      	movcs	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d029      	beq.n	8000884 <_ZN22CommandLineInterpreter13parse_commandEv+0x190>
		if (str == command_list[i].name) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	332c      	adds	r3, #44	; 0x2c
 8000834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fc1e 	bl	8001078 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEixEj>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fb3a 	bl	8000ec0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d014      	beq.n	800087c <_ZN22CommandLineInterpreter13parse_commandEv+0x188>
			command_list[i].callback();
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	332c      	adds	r3, #44	; 0x2c
 8000856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fc0d 	bl	8001078 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEixEj>
 800085e:	4603      	mov	r3, r0
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4798      	blx	r3
			str.clear();
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	4618      	mov	r0, r3
 800086a:	f000 fa97 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
			command.clear();
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3314      	adds	r3, #20
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fa92 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
			return CLI::StatusCode::PARSED;
 8000878:	2400      	movs	r4, #0
 800087a:	e009      	b.n	8000890 <_ZN22CommandLineInterpreter13parse_commandEv+0x19c>
	for (size_t i = 2; i < command_list.size(); ++i) {
 800087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800087e:	3301      	adds	r3, #1
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000882:	e7c7      	b.n	8000814 <_ZN22CommandLineInterpreter13parse_commandEv+0x120>
		}
	}

	command.clear();
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3314      	adds	r3, #20
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa87 	bl	8000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return CLI::StatusCode::UNKNOWN_COMMAND;
 800088e:	2403      	movs	r4, #3
	std::string tmp;
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f87f 	bl	8000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string str;
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f87a 	bl	8000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80008a4:	4623      	mov	r3, r4
 80008a6:	4618      	mov	r0, r3
 80008a8:	374c      	adds	r7, #76	; 0x4c
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd90      	pop	{r4, r7, pc}

080008ae <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
 80008b6:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	bf0c      	ite	eq
 80008c4:	2301      	moveq	r3, #1
 80008c6:	2300      	movne	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	2200      	movs	r2, #0
 80008e8:	72fa      	strb	r2, [r7, #11]
 80008ea:	f107 020b 	add.w	r2, r7, #11
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ffdc 	bl	80008ae <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f083 0301 	eor.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8000908:	e7ea      	b.n	80008e0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 800090a:	68fb      	ldr	r3, [r7, #12]
    }
 800090c:	4618      	mov	r0, r3
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f000 fbb8 	bl	8001096 <_ZSt12__miter_baseIPKcET_S2_>
 8000926:	4604      	mov	r4, r0
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f000 fbb4 	bl	8001096 <_ZSt12__miter_baseIPKcET_S2_>
 800092e:	4603      	mov	r3, r0
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4619      	mov	r1, r3
 8000934:	4620      	mov	r0, r4
 8000936:	f000 fbb8 	bl	80010aa <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800093a:	4603      	mov	r3, r0
    }
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}

08000944 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>:
    char_traits<_CharT>::
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
      std::copy(__s2, __s2 + __n, __s1);
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	68b8      	ldr	r0, [r7, #8]
 800095c:	f7ff ffda 	bl	8000914 <_ZSt4copyIPKcPcET0_T_S4_S3_>
      return __s1;
 8000960:	68fb      	ldr	r3, [r7, #12]
    }
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>:
	__glibcxx_assert(this->_M_len > 0);
	return *(this->_M_str + this->_M_len - 1);
      }

      constexpr const_pointer
      data() const noexcept
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
      { return this->_M_str; }
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f00d fb32 	bl	800dff2 <_ZNSaIcED1Ev>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
      { _M_dispose(); }
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 fbd9 	bl	8001158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffe9 	bl	8000980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __pos)
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
        // Allow pos == size() both in C++98 mode, as v3 extension,
	// and in C++11 mode.
	__glibcxx_assert(__pos <= size());
        // In pedantic mode be strict in C++98 mode.
	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
	return _M_data()[__pos];
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 fb9d 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80009c8:	4602      	mov	r2, r0
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	4413      	add	r3, r2
      }
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
      basic_string(basic_string&& __str) noexcept
 80009d6:	b5b0      	push	{r4, r5, r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 80009e0:	687c      	ldr	r4, [r7, #4]
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 fb98 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80009e8:	4605      	mov	r5, r0
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f000 fbcb 	bl	8001186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fbd1 	bl	800119a <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4629      	mov	r1, r5
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 fbd5 	bl	80011ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
	if (__str._M_is_local())
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f000 fbe8 	bl	80011da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d009      	beq.n	8000a24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x4e>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f103 0008 	add.w	r0, r3, #8
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f7ff fc29 	bl	8000274 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8000a22:	e00d      	b.n	8000a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x6a>
	    _M_data(__str._M_data());
 8000a24:	6838      	ldr	r0, [r7, #0]
 8000a26:	f000 fb6c 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 fbe8 	bl	8001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__str._M_allocated_capacity);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 fbef 	bl	800121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	_M_length(__str.length());
 8000a40:	6838      	ldr	r0, [r7, #0]
 8000a42:	f000 f82d 	bl	8000aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 fbf4 	bl	8001238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	__str._M_data(__str._M_local_data());
 8000a50:	6838      	ldr	r0, [r7, #0]
 8000a52:	f000 fb61 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	f000 fbd2 	bl	8001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	__str._M_set_length(0);
 8000a60:	2100      	movs	r1, #0
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f000 fbf5 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}

08000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
      { return _M_data(); }
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fb36 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
      basic_string(const _CharT* __s, size_type __n,
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	603b      	str	r3, [r7, #0]
      : _M_dataplus(_M_local_data(), __a)
 8000ac4:	68fc      	ldr	r4, [r7, #12]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 fb26 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000acc:	4603      	mov	r3, r0
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f000 fb2e 	bl	8001134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__s, __s + __n); }
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 fbd0 	bl	8001288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4618      	mov	r0, r3
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}

08000af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ISt17basic_string_viewIcS2_EvEERKT_RKS3_>:
	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b088      	sub	sp, #32
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 8000afe:	f107 0018 	add.w	r0, r7, #24
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b08:	f000 fbcd 	bl	80012a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E>
 8000b0c:	f107 0010 	add.w	r0, r7, #16
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b18:	f000 fbd8 	bl	80012cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f107 0210 	add.w	r2, r7, #16
 8000b22:	ca06      	ldmia	r2, {r1, r2}
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 fbe5 	bl	80012f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_>
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8000b34:	b5b0      	push	{r4, r5, r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8000b40:	68fc      	ldr	r4, [r7, #12]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 fae8 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f000 faf0 	bl	8001134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	const _CharT* __end = __s ? __s + traits_type::length(__s)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8000b5a:	68b8      	ldr	r0, [r7, #8]
 8000b5c:	f7ff fb73 	bl	8000246 <_ZNSt11char_traitsIcE6lengthEPKc>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	e000      	b.n	8000b6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x36>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, random_access_iterator_tag());
 8000b6c:	462b      	mov	r3, r5
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 fbee 	bl	8001354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bdb0      	pop	{r4, r5, r7, pc}

08000b82 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fc2a 	bl	80013e4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fc32 	bl	80013fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689a      	ldr	r2, [r3, #8]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	10db      	asrs	r3, r3, #3
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x38>)
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fc22 	bl	8001422 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      }
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fb91 	bl	8000308 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_Vector_implD1Ev>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	aaaaaaab 	.word	0xaaaaaaab

08000bf4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fc1e 	bl	8001448 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8000c0c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4629      	mov	r1, r5
 8000c12:	4620      	mov	r0, r4
 8000c14:	f000 fc22 	bl	800145c <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffcc 	bl	8000bb8 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}

08000c2a <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 fc20 	bl	8001478 <_ZNSaIN3CLI7CommandEEC1Ev>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fc28 	bl	8001490 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZNSaIN3CLI7CommandEED1Ev>:
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	115b      	asrs	r3, r3, #5
	_M_deallocate(_M_impl._M_start,
 8000c76:	461a      	mov	r2, r3
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 fc1c 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      }
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb67 	bl	8000354 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE12_Vector_implD1Ev>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_ZNSt6vectorIN3CLI7CommandESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681c      	ldr	r4, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fc1a 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8000ca8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000caa:	461a      	mov	r2, r3
 8000cac:	4629      	mov	r1, r5
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f000 fc1e 	bl	80014f0 <_ZSt8_DestroyIPN3CLI7CommandES1_EvT_S3_RSaIT0_E>
      }
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ffd1 	bl	8000c5e <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EED1Ev>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}

08000cc6 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d01c      	beq.n	8000d1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEERS1_DpOT_+0x56>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000ce2:	68fc      	ldr	r4, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	685d      	ldr	r5, [r3, #4]
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f000 fc0f 	bl	800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000cee:	4606      	mov	r6, r0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fc15 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000cf6:	4680      	mov	r8, r0
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f000 fc1b 	bl	8001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4643      	mov	r3, r8
 8000d04:	4632      	mov	r2, r6
 8000d06:	4629      	mov	r1, r5
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f000 fc50 	bl	80015ae <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f103 0220 	add.w	r2, r3, #32
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	e016      	b.n	8000d4a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEERS1_DpOT_+0x84>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f82c 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 8000d22:	4604      	mov	r4, r0
 8000d24:	68b8      	ldr	r0, [r7, #8]
 8000d26:	f000 fbf1 	bl	800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d2a:	4605      	mov	r5, r0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 fbf7 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d32:	4606      	mov	r6, r0
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f000 fbfd 	bl	8001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4633      	mov	r3, r6
 8000d40:	462a      	mov	r2, r5
 8000d42:	4621      	mov	r1, r4
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f000 fc4f 	bl	80015e8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 fcd6 	bl	80016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>
 8000d50:	4603      	mov	r3, r0
#endif
      }
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	115b      	asrs	r3, r3, #5
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1d1a      	adds	r2, r3, #4
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fcd0 	bl	8001732 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
      { _M_set_length(0); }
 8000da4:	2100      	movs	r1, #0
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fa53 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
      push_back(_CharT __c)
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
	const size_type __size = this->size();
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fe56 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000dc6:	60f8      	str	r0, [r7, #12]
	if (__size + 1 > this->capacity())
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1c5c      	adds	r4, r3, #1
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 fcbf 	bl	8001750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	bf8c      	ite	hi
 8000dd8:	2301      	movhi	r3, #1
 8000dda:	2300      	movls	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x3e>
	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
 8000de2:	2301      	movs	r3, #1
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 fcc1 	bl	8001774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
	traits_type::assign(this->_M_data()[__size], __c);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f985 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	1cfa      	adds	r2, r7, #3
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9bc 	bl	8000180 <_ZNSt11char_traitsIcE6assignERcRKc>
	this->_M_set_length(__size + 1);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fa1f 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}

08000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fc80 	bl	8001732 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
      basic_string(const basic_string& __str)
 8000e52:	b5b0      	push	{r4, r5, r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 8000e5c:	687c      	ldr	r4, [r7, #4]
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f95a 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000e64:	4605      	mov	r5, r0
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f000 fcf5 	bl	8001856 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fce0 	bl	800183a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4629      	mov	r1, r5
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 f993 	bl	80011ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00d f8b0 	bl	800dff2 <_ZNSaIcED1Ev>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f000 f935 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000e98:	4605      	mov	r5, r0
 8000e9a:	6838      	ldr	r0, [r7, #0]
 8000e9c:	f000 f931 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000ea0:	4604      	mov	r4, r0
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f7ff fdfc 	bl	8000aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4423      	add	r3, r4
 8000eac:	461a      	mov	r2, r3
 8000eae:	4629      	mov	r1, r5
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fcda 	bl	800186a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}

08000ec0 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fdd1 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f7ff fdcd 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000ed8:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8000eda:	429c      	cmp	r4, r3
 8000edc:	d115      	bne.n	8000f0a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fdd2 	bl	8000a88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	f7ff fdce 	bl	8000a88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8000eec:	4605      	mov	r5, r0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdbf 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4629      	mov	r1, r5
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff f961 	bl	80001c2 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 8000f0a:	2300      	movs	r3, #0
						    __lhs.size())); }
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bdb0      	pop	{r4, r5, r7, pc}

08000f14 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d00d      	beq.n	8000f46 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE9push_backERKS1_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f000 fcc0 	bl	80018b8 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f103 0220 	add.w	r2, r3, #32
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8000f44:	e008      	b.n	8000f58 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff17 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fcc2 	bl	80018dc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fd30 	bl	80019d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
      : _M_dataplus(_M_local_data())
 8000f84:	687c      	ldr	r4, [r7, #4]
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f8c6 	bl	8001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000f8c:	4605      	mov	r5, r0
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00d f82b 	bl	800dfee <_ZNSaIcEC1Ev>
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f000 f904 	bl	80011ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00d f821 	bl	800dff2 <_ZNSaIcED1Ev>
      { _M_set_length(0); }
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f94d 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_jj>:
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
      { return _M_append(__str._M_data()
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f000 f895 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000fd8:	4604      	mov	r4, r0
			 + __str._M_check(__pos, "basic_string::append"),
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_jj+0x44>)
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	68b8      	ldr	r0, [r7, #8]
 8000fe0:	f000 fd5e 	bl	8001aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	441c      	add	r4, r3
      { return _M_append(__str._M_data()
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f000 fd79 	bl	8001ae4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 fd11 	bl	8001a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8000ffe:	4603      	mov	r3, r0
			 __str._M_limit(__pos, __n)); }
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}
 8001008:	0800f27c 	.word	0x0800f27c

0800100c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	429a      	cmp	r2, r3
 8001020:	d00d      	beq.n	800103e <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	f000 fd93 	bl	8001b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f103 0218 	add.w	r2, r3, #24
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	605a      	str	r2, [r3, #4]
      }
 800103c:	e008      	b.n	8001050 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x44>
	  _M_realloc_insert(end(), __x);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fd9b 	bl	8001b7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 8001044:	4603      	mov	r3, r0
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fda6 	bl	8001b9c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>
      }
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
      operator+=(_CharT __c)
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	this->push_back(__c);
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fea3 	bl	8000db4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	return *this;
 800106e:	687b      	ldr	r3, [r7, #4]
      }
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	4413      	add	r3, r2
      }
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80010aa:	b5b0      	push	{r4, r5, r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 fdfa 	bl	8001cb0 <_ZSt12__niter_baseIPKcET_S2_>
 80010bc:	4604      	mov	r4, r0
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f000 fdf6 	bl	8001cb0 <_ZSt12__niter_baseIPKcET_S2_>
 80010c4:	4605      	mov	r5, r0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fdfb 	bl	8001cc4 <_ZSt12__niter_baseIPcET_S1_>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4629      	mov	r1, r5
 80010d4:	4620      	mov	r0, r4
 80010d6:	f000 fe0a 	bl	8001cee <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80010da:	4602      	mov	r2, r0
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fdf9 	bl	8001cd8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80010e6:	4603      	mov	r3, r0
    }
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}

080010f0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
      { return _M_dataplus._M_p; }
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3308      	adds	r3, #8
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fdf2 	bl	8001d0e <_ZNSt14pointer_traitsIPcE10pointer_toERc>
 800112a:	4603      	mov	r3, r0
      }
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
	: allocator_type(__a), _M_p(__dat) { }
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f00c ff54 	bl	800dff0 <_ZNSaIcEC1ERKS_>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	if (!_M_is_local())
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f83a 	bl	80011da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8001166:	4603      	mov	r3, r0
 8001168:	f083 0301 	eor.w	r3, r3, #1
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x26>
	  _M_destroy(_M_allocated_capacity);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fe1f 	bl	8001dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
      }
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffed 	bl	800119a <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f00c ff13 	bl	800dff0 <_ZNSaIcEC1ERKS_>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
      { return _M_data() == _M_local_data(); }
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff8d 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80011e8:	4604      	mov	r4, r0
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fdfd 	bl	8001dea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	429c      	cmp	r4, r3
 80011f4:	bf0c      	ite	eq
 80011f6:	2301      	moveq	r3, #1
 80011f8:	2300      	movne	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}

08001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
      { _M_dataplus._M_p = __p; }
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
      _M_capacity(size_type __capacity)
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>:
      _M_length(size_type __length)
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
      { _M_string_length = __length; }
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
      _M_set_length(size_type __n)
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	_M_length(__n);
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffea 	bl	8001238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	traits_type::assign(_M_data()[__n], _CharT());
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff4c 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800126a:	4602      	mov	r2, r0
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	73fa      	strb	r2, [r7, #15]
 8001274:	f107 020f 	add.w	r2, r7, #15
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ff80 	bl	8000180 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fdb4 	bl	8001e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E>:
      _S_to_string_view(__sv_type __svt) noexcept
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	e883 0006 	stmia.w	r3, {r1, r2}
      { return __svt; }
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	461a      	mov	r2, r3
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012be:	e882 0003 	stmia.w	r2, {r0, r1}
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E>:
	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	e883 0006 	stmia.w	r3, {r1, r2}
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	461a      	mov	r2, r3
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	1d38      	adds	r0, r7, #4
 80012fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001302:	603b      	str	r3, [r7, #0]
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb2f 	bl	800096a <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv>
 800130c:	4604      	mov	r4, r0
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fd89 	bl	8001e28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>
 8001316:	4602      	mov	r2, r0
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4621      	mov	r1, r4
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f7ff fbca 	bl	8000ab6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001336:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fd8e 	bl	8001e5c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001340:	462a      	mov	r2, r5
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	4620      	mov	r0, r4
 8001346:	f000 fd92 	bl	8001e6e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800134a:	4603      	mov	r3, r0
    }
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bdb0      	pop	{r4, r5, r7, pc}

08001354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd6b 	bl	8001e3e <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 800137a:	2300      	movs	r3, #0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8001380:	4817      	ldr	r0, [pc, #92]	; (80013e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8001382:	f00c fe3a 	bl	800dffa <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	68b8      	ldr	r0, [r7, #8]
 800138a:	f7ff ffcf 	bl	800132c <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800138e:	4603      	mov	r3, r0
 8001390:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d910      	bls.n	80013ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 fcc1 	bl	8001d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff ff2a 	bl	8001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4619      	mov	r1, r3
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff ff32 	bl	800121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff fea1 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fd5f 	bl	8001e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	4619      	mov	r1, r3
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff ff3e 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800f294 	.word	0x0800f294

080013e4 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fd5e 	bl	8001eae <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
	{ }
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	if (__p)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd41 	bl	8001ec2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 fd48 	bl	8001f00 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZNSaIN3CLI7CommandEEC1Ev>:
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fd53 	bl	8001f2c <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEEC1Ev>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
	{ }
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
	if (__p)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fd36 	bl	8001f40 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE10deallocateERS2_PS1_j>
      }
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <_ZSt8_DestroyIPN3CLI7CommandES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fd3d 	bl	8001f7e <_ZSt8_DestroyIPN3CLI7CommandEEvT_S3_>
    }
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <_ZSt12construct_atIN3CLI7CommandEJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8001558:	68b8      	ldr	r0, [r7, #8]
 800155a:	f7ff ffd7 	bl	800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800155e:	4602      	mov	r2, r0
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fd1f 	bl	8001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 800156c:	f107 0410 	add.w	r4, r7, #16
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffd5 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001576:	4603      	mov	r3, r0
 8001578:	781d      	ldrb	r5, [r3, #0]
 800157a:	6838      	ldr	r0, [r7, #0]
 800157c:	f7ff ffda 	bl	8001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8001580:	4603      	mov	r3, r0
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff1c 	bl	80003c0 <_ZZN22CommandLineInterpreterC4EtENKUlvE_cvPFvvEEv>
 8001588:	4680      	mov	r8, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	2020      	movs	r0, #32
 8001590:	f7fe fdeb 	bl	800016a <_ZnwjPv>
 8001594:	4606      	mov	r6, r0
 8001596:	4643      	mov	r3, r8
 8001598:	462a      	mov	r2, r5
 800159a:	4621      	mov	r1, r4
 800159c:	4630      	mov	r0, r6
 800159e:	f7fe fe8e 	bl	80002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>
 80015a2:	4633      	mov	r3, r6
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015ae <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80015ae:	b5b0      	push	{r4, r5, r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ffa5 	bl	800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80015c2:	4604      	mov	r4, r0
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ffab 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 80015ca:	4605      	mov	r5, r0
 80015cc:	6a38      	ldr	r0, [r7, #32]
 80015ce:	f7ff ffb1 	bl	8001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	462a      	mov	r2, r5
 80015d6:	4621      	mov	r1, r4
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f7ff ffb5 	bl	8001548 <_ZSt12construct_atIN3CLI7CommandEJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015e8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80015e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ec:	b08e      	sub	sp, #56	; 0x38
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	603b      	str	r3, [r7, #0]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80015f8:	4a3f      	ldr	r2, [pc, #252]	; (80016f8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fce7 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 8001602:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff fc03 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 8001616:	4603      	mov	r3, r0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	f107 0214 	add.w	r2, r7, #20
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd1a 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800162a:	4603      	mov	r3, r0
 800162c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd28 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 8001638:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800163e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	18d5      	adds	r5, r2, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff5f 	bl	800150c <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800164e:	4606      	mov	r6, r0
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7ff ff65 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001656:	4680      	mov	r8, r0
 8001658:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800165a:	f7ff ff6b 	bl	8001534 <_ZSt7forwardIZN22CommandLineInterpreterC4EtEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800165e:	4603      	mov	r3, r0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	4643      	mov	r3, r8
 8001664:	4632      	mov	r2, r6
 8001666:	4629      	mov	r1, r5
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff ffa0 	bl	80015ae <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA5_KcNS0_12CommandRolesEZN22CommandLineInterpreterC4EtEUlvE_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff54 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 800167c:	4603      	mov	r3, r0
 800167e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff2a 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8001688:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4621      	mov	r1, r4
 800168e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001690:	f000 fd0e 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001694:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	3320      	adds	r3, #32
 800169a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff3f 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 80016a6:	4603      	mov	r3, r0
 80016a8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff15 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 80016b2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	4620      	mov	r0, r4
 80016ba:	f000 fcf9 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80016be:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80016c0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 80016cc:	461a      	mov	r2, r3
 80016ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d0:	f7ff fef1 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	015b      	lsls	r3, r3, #5
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	441a      	add	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	609a      	str	r2, [r3, #8]
    }
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f6:	bf00      	nop
 80016f8:	0800f2c0 	.word	0x0800f2c0

080016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fb38 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 800170a:	4603      	mov	r3, r0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2101      	movs	r1, #1
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fceb 	bl	80020f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEmiEi>
 800171a:	4603      	mov	r3, r0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb8a 	bl	8000e3c <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEdeEv>
 8001728:	4603      	mov	r3, r0
      }
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	return _M_is_local() ? size_type(_S_local_capacity)
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fd3e 	bl	80011da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x18>
 8001764:	230f      	movs	r3, #15
	                     : _M_allocated_capacity;
 8001766:	e001      	b.n	800176c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x1c>
	return _M_is_local() ? size_type(_S_local_capacity)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
      }
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
	}
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
	      size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff f98c 	bl	8000aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad2      	subs	r2, r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	61fb      	str	r3, [r7, #28]

      size_type __new_capacity = length() + __len2 - __len1;
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff f983 	bl	8000aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800179a:	4602      	mov	r2, r0
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	441a      	add	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	617b      	str	r3, [r7, #20]
      pointer __r = _M_create(__new_capacity, capacity());
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f7ff ffd2 	bl	8001750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fab7 	bl	8001d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80017ba:	61b8      	str	r0, [r7, #24]

      if (__pos)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d008      	beq.n	80017d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x60>
	this->_S_copy(__r, _M_data(), __pos);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f7ff fc9d 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80017c8:	4603      	mov	r3, r0
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4619      	mov	r1, r3
 80017ce:	69b8      	ldr	r0, [r7, #24]
 80017d0:	f000 fca7 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__s && __len2)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00a      	beq.n	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
	this->_S_copy(__r + __pos, __s, __len2);
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 fc99 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__how_much)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d011      	beq.n	800181a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0xa6>
	this->_S_copy(__r + __pos + __len2,
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fa:	4413      	add	r3, r2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	18d4      	adds	r4, r2, r3
		      _M_data() + __pos + __len1, __how_much);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fc7e 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001806:	4601      	mov	r1, r0
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	440b      	add	r3, r1
	this->_S_copy(__r + __pos + __len2,
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	4619      	mov	r1, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f000 fc84 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>

      _M_dispose();
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fc9c 	bl	8001158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fcee 	bl	8001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4619      	mov	r1, r3
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fcf6 	bl	800121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
    }
 8001832:	bf00      	nop
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}

0800183a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fc81 	bl	8002150 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 fc75 	bl	800216a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZSt12construct_atIN3CLI7CommandEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f000 fc7a 	bl	800218c <_ZSt7forwardIRKN3CLI7CommandEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001898:	4605      	mov	r5, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	2020      	movs	r0, #32
 80018a0:	f7fe fc63 	bl	800016a <_ZnwjPv>
 80018a4:	4604      	mov	r4, r0
 80018a6:	4629      	mov	r1, r5
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7fe fe6d 	bl	8000588 <_ZN3CLI7CommandC1ERKS0_>
 80018ae:	4623      	mov	r3, r4
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdb0      	pop	{r4, r5, r7, pc}

080018b8 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 fc61 	bl	800218c <_ZSt7forwardIRKN3CLI7CommandEEOT_RNSt16remove_referenceIS4_E4typeE>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	f7ff ffda 	bl	8001888 <_ZSt12construct_atIN3CLI7CommandEJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80018e8:	4a39      	ldr	r2, [pc, #228]	; (80019d0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fb6f 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 80018f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fa8b 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 8001906:	4603      	mov	r3, r0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	f107 0214 	add.w	r2, r7, #20
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fba2 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800191a:	4603      	mov	r3, r0
 800191c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fbb0 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 8001928:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800192e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	18d5      	adds	r5, r2, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fc27 	bl	800218c <_ZSt7forwardIRKN3CLI7CommandEEOT_RNSt16remove_referenceIS4_E4typeE>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4629      	mov	r1, r5
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ffb7 	bl	80018b8 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fde6 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8001958:	4603      	mov	r3, r0
 800195a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fdbc 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8001964:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	4621      	mov	r1, r4
 800196a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800196c:	f000 fba0 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001970:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3320      	adds	r3, #32
 8001976:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdd1 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8001982:	4603      	mov	r3, r0
 8001984:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fda7 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 800198e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001994:	4620      	mov	r0, r4
 8001996:	f000 fb8b 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800199a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800199c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 80019a8:	461a      	mov	r2, r3
 80019aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ac:	f7ff fd83 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80019bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	441a      	add	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	609a      	str	r2, [r3, #8]
    }
 80019c8:	bf00      	nop
 80019ca:	3730      	adds	r7, #48	; 0x30
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	0800f2c0 	.word	0x0800f2c0

080019d4 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	10db      	asrs	r3, r3, #3
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_+0x48>)
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00e      	beq.n	8001a14 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endEPS5_+0x40>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fd23 	bl	8001448 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001a02:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f7ff fd27 	bl	800145c <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	aaaaaaab 	.word	0xaaaaaaab

08001a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
	this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff f820 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

      if (__len <= this->capacity())
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff fe88 	bl	8001750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf94      	ite	ls
 8001a48:	2301      	movls	r3, #1
 8001a4a:	2300      	movhi	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d011      	beq.n	8001a76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x56>
	{
	  if (__n)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d019      	beq.n	8001a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x6c>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fb52 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff f806 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4423      	add	r3, r4
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fb57 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8001a74:	e00a      	b.n	8001a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x6c>
	}
      else
	this->_M_mutate(this->size(), size_type(0), __s, __n);
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7fe fffb 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fe74 	bl	8001774 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>

      this->_M_set_length(__len);
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff fbdf 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      return *this;
 8001a94:	68fb      	ldr	r3, [r7, #12]
    }
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
	...

08001aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
      _M_check(size_type __pos, const char* __s) const
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	if (__pos > this->size())
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7fe ffe0 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	bf8c      	ite	hi
 8001aba:	2301      	movhi	r3, #1
 8001abc:	2300      	movls	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x36>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f7fe ffd4 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x40>)
 8001ad2:	f00c fa98 	bl	800e006 <_ZSt24__throw_out_of_range_fmtPKcz>
	return __pos;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
      }
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800f2dc 	.word	0x0800f2dc

08001ae4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj>:
      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	const bool __testoff =  __off < this->size() - __pos;
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7fe ffbe 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	bf34      	ite	cc
 8001b02:	2301      	movcc	r3, #1
 8001b04:	2300      	movcs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]
	return __testoff ? __off : this->size() - __pos;
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj+0x2e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	e005      	b.n	8001b1e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj+0x3a>
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7fe ffad 	bl	8000a72 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
      }
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZSt12construct_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8001b26:	b5b0      	push	{r4, r5, r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f000 fb35 	bl	80021a0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001b36:	4605      	mov	r5, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2018      	movs	r0, #24
 8001b3e:	f7fe fb14 	bl	800016a <_ZnwjPv>
 8001b42:	4604      	mov	r4, r0
 8001b44:	4629      	mov	r1, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff f983 	bl	8000e52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdb0      	pop	{r4, r5, r7, pc}

08001b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fb1c 	bl	80021a0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f7ff ffda 	bl	8001b26 <_ZSt12construct_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	1d1a      	adds	r2, r3, #4
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fb11 	bl	80021b4 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001ba8:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x10c>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fb10 	bl	80021d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>
 8001bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 fb4d 	bl	8002260 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	f107 0214 	add.w	r2, r7, #20
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fb53 	bl	8002280 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fb66 	bl	80022b4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>
 8001be8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8001bee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001bf0:	6a3a      	ldr	r2, [r7, #32]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	189d      	adds	r5, r3, r2
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 facd 	bl	80021a0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff ffa2 	bl	8001b56 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	  __new_finish = pointer();
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 fb72 	bl	8002304 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fc0e 	bl	8001448 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001c2c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	4621      	mov	r1, r4
 8001c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c34:	f000 fb52 	bl	80022dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8001c38:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	3318      	adds	r3, #24
 8001c3e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fb5d 	bl	8002304 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fbf9 	bl	8001448 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8001c56:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f000 fb3d 	bl	80022dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>
 8001c62:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8001c64:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	10db      	asrs	r3, r3, #3
 8001c70:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_+0x110>)
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001c76:	461a      	mov	r2, r3
 8001c78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c7a:	f7ff fbd2 	bl	8001422 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_j>
      this->_M_impl._M_start = __new_start;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	461a      	mov	r2, r3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	441a      	add	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	609a      	str	r2, [r3, #8]
    }
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	0800f2c0 	.word	0x0800f2c0
 8001cac:	aaaaaaab 	.word	0xaaaaaaab

08001cb0 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fb16 	bl	8002330 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZNSt14pointer_traitsIPcE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fb27 	bl	800236a <_ZSt9addressofIcEPT_RS0_>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
      if (__capacity > max_size())
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	681c      	ldr	r4, [r3, #0]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fb22 	bl	8002382 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	429c      	cmp	r4, r3
 8001d42:	bf8c      	ite	hi
 8001d44:	2301      	movhi	r3, #1
 8001d46:	2300      	movls	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
	std::__throw_length_error(__N("basic_string::_M_create"));
 8001d4e:	481a      	ldr	r0, [pc, #104]	; (8001db8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x90>)
 8001d50:	f00c f956 	bl	800e000 <_ZSt20__throw_length_errorPKc>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d21c      	bcs.n	8001d98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d216      	bcs.n	8001d98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	  __capacity = 2 * __old_capacity;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	005a      	lsls	r2, r3, #1
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	601a      	str	r2, [r3, #0]
	  if (__capacity > max_size())
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fb03 	bl	8002382 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	bf8c      	ite	hi
 8001d82:	2301      	movhi	r3, #1
 8001d84:	2300      	movls	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	    __capacity = max_size();
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 faf8 	bl	8002382 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 8001d92:	4602      	mov	r2, r0
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	601a      	str	r2, [r3, #0]
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff f9f4 	bl	8001186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4619      	mov	r1, r3
 8001da8:	4610      	mov	r0, r2
 8001daa:	f000 fafc 	bl	80023a6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8001dae:	4603      	mov	r3, r0
    }
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	0800f314 	.word	0x0800f314

08001dbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
      _M_destroy(size_type __size) throw()
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff f9dd 	bl	8001186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff f997 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f000 fb00 	bl	80023e2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3308      	adds	r3, #8
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fb12 	bl	8002420 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>
 8001dfc:	4603      	mov	r3, r0
      }
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8001e14:	4623      	mov	r3, r4
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff fa9a 	bl	8001354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv>:
      size() const noexcept
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
      { return this->_M_len; }
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
    }
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68b9      	ldr	r1, [r7, #8]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f93e 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b088      	sub	sp, #32
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8001eda:	f7fe f93f 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j+0x2a>
	  {
	    ::operator delete(__p);
 8001ee4:	69b8      	ldr	r0, [r7, #24]
 8001ee6:	f00c f86d 	bl	800dfc4 <_ZdlPv>
	    return;
 8001eea:	e005      	b.n	8001ef8 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	69f8      	ldr	r0, [r7, #28]
 8001ef2:	f000 fc51 	bl	8002798 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8001f0a:	f7fe f927 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa8e 	bl	8002438 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
 8001f1c:	e003      	b.n	8001f26 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa89 	bl	8002438 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEEC1Ev>:
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8001f58:	f7fe f900 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8001f62:	69b8      	ldr	r0, [r7, #24]
 8001f64:	f00c f82e 	bl	800dfc4 <_ZdlPv>
	    return;
 8001f68:	e005      	b.n	8001f76 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	69b9      	ldr	r1, [r7, #24]
 8001f6e:	69f8      	ldr	r0, [r7, #28]
 8001f70:	f000 fc39 	bl	80027e6 <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_ZSt8_DestroyIPN3CLI7CommandEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001f88:	f7fe f8e8 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <_ZSt8_DestroyIPN3CLI7CommandEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fa67 	bl	8002468 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3CLI7CommandEEEvT_S5_>
 8001f9a:	e003      	b.n	8001fa4 <_ZSt8_DestroyIPN3CLI7CommandEEvT_S3_+0x26>
	__destroy(__first, __last);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa62 	bl	8002468 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3CLI7CommandEEEvT_S5_>
    }
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>:
      basic_string_view(const _CharT* __str) noexcept
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
      : _M_len{traits_type::length(__str)},
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f7fe f946 	bl	8000246 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001fba:	4602      	mov	r2, r0
	_M_str{__str}
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
      { }
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa5b 	bl	8002498 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE8max_sizeEv>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7fe feb9 	bl	8000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>
 8001fea:	4603      	mov	r3, r0
 8001fec:	1ae2      	subs	r2, r4, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	bf34      	ite	cc
 8001ff4:	2301      	movcc	r3, #1
 8001ff6:	2300      	movcs	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f00b fffe 	bl	800e000 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7fe fea9 	bl	8000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>
 800200a:	4604      	mov	r4, r0
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7fe fea5 	bl	8000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>
 8002012:	4603      	mov	r3, r0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	f107 0208 	add.w	r2, r7, #8
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fa4a 	bl	80024ba <_ZSt3maxIjERKT_S2_S2_>
 8002026:	4603      	mov	r3, r0
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4423      	add	r3, r4
 800202c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7fe fe94 	bl	8000d5c <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE4sizeEv>
 8002034:	4602      	mov	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	4293      	cmp	r3, r2
 800203a:	d306      	bcc.n	800204a <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fa2b 	bl	8002498 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE8max_sizeEv>
 8002042:	4602      	mov	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4293      	cmp	r3, r2
 8002048:	d904      	bls.n	8002054 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc+0x84>
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa24 	bl	8002498 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE8max_sizeEv>
 8002050:	4603      	mov	r3, r0
 8002052:	e000      	b.n	8002056 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc+0x86>
 8002054:	697b      	ldr	r3, [r7, #20]
      }
 8002056:	4618      	mov	r0, r3
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800205e:	b590      	push	{r4, r7, lr}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7fe fa5b 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 800206e:	4603      	mov	r3, r0
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f7fe fa56 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8002078:	4603      	mov	r3, r0
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	1ae3      	subs	r3, r4, r3
 800207e:	115b      	asrs	r3, r3, #5
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}

08002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj+0x1e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fa1f 	bl	80024e0 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8allocateERS2_j>
 80020a2:	4603      	mov	r3, r0
 80020a4:	e000      	b.n	80020a8 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj+0x20>
 80020a6:	2300      	movs	r3, #0
      }
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80020be:	f88d 4000 	strb.w	r4, [sp]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fa29 	bl	8002520 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80020ce:	4603      	mov	r3, r0
      }
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f000 fa2e 	bl	8002544 <_ZSt10destroy_atIN3CLI7CommandEEvPT_>
	}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	015b      	lsls	r3, r3, #5
 8002102:	425b      	negs	r3, r3
 8002104:	4413      	add	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	f107 020c 	add.w	r2, r7, #12
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fb0d 	bl	8001732 <_ZN9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d104      	bne.n	800213e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7fe f822 	bl	8000180 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 800213c:	e004      	b.n	8002148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x26>
	  traits_type::copy(__d, __s, __n);
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7fe f896 	bl	8000274 <_ZNSt11char_traitsIcE4copyEPcPKcj>
      }
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f00b ff47 	bl	800dff0 <_ZNSaIcEC1ERKS_>
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800216a:	b590      	push	{r4, r7, lr}
 800216c:	b087      	sub	sp, #28
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 8002178:	4623      	mov	r3, r4
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa00 	bl	8002584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <_ZSt7forwardIRKN3CLI7CommandEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80021d2:	b590      	push	{r4, r7, lr}
 80021d4:	b087      	sub	sp, #28
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fa18 	bl	8002614 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 80021e4:	4604      	mov	r4, r0
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa26 	bl	8002638 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 80021ec:	4603      	mov	r3, r0
 80021ee:	1ae2      	subs	r2, r4, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	bf34      	ite	cc
 80021f6:	2301      	movcc	r3, #1
 80021f8:	2300      	movcs	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f00b fefd 	bl	800e000 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa16 	bl	8002638 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800220c:	4604      	mov	r4, r0
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fa12 	bl	8002638 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8002214:	4603      	mov	r3, r0
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	f107 0208 	add.w	r2, r7, #8
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f949 	bl	80024ba <_ZSt3maxIjERKT_S2_S2_>
 8002228:	4603      	mov	r3, r0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4423      	add	r3, r4
 800222e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa01 	bl	8002638 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 8002236:	4602      	mov	r2, r0
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4293      	cmp	r3, r2
 800223c:	d306      	bcc.n	800224c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x7a>
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f9e8 	bl	8002614 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4293      	cmp	r3, r2
 800224a:	d904      	bls.n	8002256 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x84>
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f9e1 	bl	8002614 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 8002252:	4603      	mov	r3, r0
 8002254:	e000      	b.n	8002258 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEjPKc+0x86>
 8002256:	697b      	ldr	r3, [r7, #20]
      }
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}

08002260 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff9f 	bl	80021b4 <_ZN9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEC1ERKS7_>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f83a 	bl	8002304 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 8002290:	4603      	mov	r3, r0
 8002292:	681c      	ldr	r4, [r3, #0]
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f000 f835 	bl	8002304 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>
 800229a:	4603      	mov	r3, r0
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1ae3      	subs	r3, r4, r3
 80022a0:	10db      	asrs	r3, r3, #3
 80022a2:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <_ZN9__gnu_cxxmiIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSE_SH_+0x30>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	aaaaaaab 	.word	0xaaaaaaab

080022b4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x1e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f9c9 	bl	8002660 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 80022ce:	4603      	mov	r3, r0
 80022d0:	e000      	b.n	80022d4 <_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEj+0x20>
 80022d2:	2300      	movs	r3, #0
      }
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b087      	sub	sp, #28
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80022ea:	f88d 4000 	strb.w	r4, [sp]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f9d6 	bl	80026a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>
 80022fa:	4603      	mov	r3, r0
      }
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}

08002304 <_ZNK9__gnu_cxx17__normal_iteratorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIS6_SaIS6_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8002322:	6838      	ldr	r0, [r7, #0]
 8002324:	f000 f9d1 	bl	80026ca <_ZSt10destroy_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800233c:	f7fd ff0e 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f9c8 	bl	80026e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 8002350:	4603      	mov	r3, r0
 8002352:	e006      	b.n	8002362 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9e2 	bl	8002722 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800235e:	4603      	mov	r3, r0
 8002360:	bf00      	nop
    }
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_ZSt9addressofIcEPT_RS0_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9ef 	bl	8002756 <_ZSt11__addressofIcEPT_RS0_>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fa63 	bl	8001856 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8002390:	4603      	mov	r3, r0
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f9e9 	bl	800276a <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8002398:	4603      	mov	r3, r0
 800239a:	3b01      	subs	r3, #1
 800239c:	085b      	lsrs	r3, r3, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80023b8:	f7fd fed0 	bl	800015c <_ZSt21is_constant_evaluatedv>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80023c2:	68b8      	ldr	r0, [r7, #8]
 80023c4:	f00b fe02 	bl	800dfcc <_Znwj>
 80023c8:	4603      	mov	r3, r0
 80023ca:	e006      	b.n	80023da <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb00 	bl	80029d6 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	bf00      	nop
      { return __a.allocate(__n); }
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b088      	sub	sp, #32
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80023fa:	f7fd feaf 	bl	800015c <_ZSt21is_constant_evaluatedv>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 8002404:	69b8      	ldr	r0, [r7, #24]
 8002406:	f00b fddd 	bl	800dfc4 <_ZdlPv>
	    return;
 800240a:	e005      	b.n	8002418 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	69f8      	ldr	r0, [r7, #28]
 8002412:	f000 fafd 	bl	8002a10 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9a9 	bl	8002780 <_ZSt9addressofIKcEPT_RS1_>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d00a      	beq.n	8002460 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9b6 	bl	80027bc <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8002450:	4603      	mov	r3, r0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f9bc 	bl	80027d0 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3318      	adds	r3, #24
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	e7f0      	b.n	8002442 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3CLI7CommandEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d00a      	beq.n	8002490 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3CLI7CommandEEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f9c2 	bl	8002804 <_ZSt11__addressofIN3CLI7CommandEEPT_RS2_>
 8002480:	4603      	mov	r3, r0
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f9c8 	bl	8002818 <_ZSt8_DestroyIN3CLI7CommandEEvPT_>
	  for (; __first != __last; ++__first)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3320      	adds	r3, #32
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	e7f0      	b.n	8002472 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3CLI7CommandEEEvT_S5_+0xa>
	}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f9e8 	bl	8002878 <_ZNKSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f9ca 	bl	8002844 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_max_sizeERKS2_>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d201      	bcs.n	80024d4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	e000      	b.n	80024d6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80024d4:	687b      	ldr	r3, [r7, #4]
    }
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80024f2:	f7fd fe33 	bl	800015c <_ZSt21is_constant_evaluatedv>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	4618      	mov	r0, r3
 8002502:	f00b fd63 	bl	800dfcc <_Znwj>
 8002506:	4603      	mov	r3, r0
 8002508:	e006      	b.n	8002518 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 faa8 	bl	8002a64 <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEE8allocateEjPKv>
 8002514:	4603      	mov	r3, r0
 8002516:	bf00      	nop
      { return __a.allocate(__n); }
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9a9 	bl	800288c <_ZSt12__relocate_aIPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_>
 800253a:	4603      	mov	r3, r0
      }
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZSt10destroy_atIN3CLI7CommandEEvPT_>:
    destroy_at(_Tp* __location)
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fe f833 	bl	80005b8 <_ZN3CLI7CommandD1Ev>
    }
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800255a:	b5b0      	push	{r4, r5, r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002564:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fdc1 	bl	80010f0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800256e:	462a      	mov	r2, r5
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	4620      	mov	r0, r4
 8002574:	f000 f9c0 	bl	80028f8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002578:	4603      	mov	r3, r0
    }
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002584 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8002592:	68b8      	ldr	r0, [r7, #8]
 8002594:	f000 f9a1 	bl	80028da <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 80025b0:	4817      	ldr	r0, [pc, #92]	; (8002610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 80025b2:	f00b fd22 	bl	800dffa <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68b8      	ldr	r0, [r7, #8]
 80025ba:	f7ff ffce 	bl	800255a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80025be:	4603      	mov	r3, r0
 80025c0:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d910      	bls.n	80025ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fba9 	bl	8001d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7fe fe12 	bl	8001204 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4619      	mov	r1, r3
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7fe fe1a 	bl	800121e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7fe fd89 	bl	8001102 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f98c 	bl	8002914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4619      	mov	r1, r3
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fe fe26 	bl	8001252 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	0800f294 	.word	0x0800f294

08002614 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f9b2 	bl	8002988 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f992 	bl	8002950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 800262c:	4603      	mov	r3, r0
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	10db      	asrs	r3, r3, #3
 800264c:	4a03      	ldr	r2, [pc, #12]	; (800265c <_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv+0x24>)
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	aaaaaaab 	.word	0xaaaaaaab

08002660 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002672:	f7fd fd73 	bl	800015c <_ZSt21is_constant_evaluatedv>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f00b fca0 	bl	800dfcc <_Znwj>
 800268c:	4603      	mov	r3, r0
 800268e:	e006      	b.n	800269e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa2a 	bl	8002aee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800269a:	4603      	mov	r3, r0
 800269c:	bf00      	nop
      { return __a.allocate(__n); }
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_do_relocateEPS5_S8_S8_RS6_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f96e 	bl	800299c <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80026c0:	4603      	mov	r3, r0
      }
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZSt10destroy_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    destroy_at(_Tp* __location)
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe f960 	bl	8000998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dd0d      	ble.n	8002716 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x36>
	      *__result = *__first;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3b01      	subs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e7ee      	b.n	80026f4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 8002716:	687b      	ldr	r3, [r7, #4]
	}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	461a      	mov	r2, r3
 8002740:	68f9      	ldr	r1, [r7, #12]
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f00b fda6 	bl	800e294 <memmove>
	  return __result + _Num;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
	}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
      }
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f94e 	bl	8002a2a <_ZSt11__addressofIKcEPT_RS1_>
 800278e:	4603      	mov	r3, r0
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4619      	mov	r1, r3
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	f00b fc09 	bl	800dfc8 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff76 	bl	80026ca <_ZSt10destroy_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
    }
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4619      	mov	r1, r3
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	f00b fbe5 	bl	800dfc8 <_ZdlPvj>
      }
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_ZSt11__addressofIN3CLI7CommandEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <_ZSt8_DestroyIN3CLI7CommandEEvPT_>:
    _Destroy(_Tp* __pointer)
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe8f 	bl	8002544 <_ZSt10destroy_atIN3CLI7CommandEEvPT_>
    }
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002836:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800284c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8002850:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffeb 	bl	800282e <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE8max_sizeERKS2_>
 8002858:	4603      	mov	r3, r0
 800285a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800285c:	f107 0208 	add.w	r2, r7, #8
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f8e9 	bl	8002a3e <_ZSt3minIjERKT_S2_S2_>
 800286c:	4603      	mov	r3, r0
 800286e:	681b      	ldr	r3, [r3, #0]
      }
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZNKSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <_ZSt12__relocate_aIPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800288c:	b5b0      	push	{r4, r5, r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f813 	bl	80028c6 <_ZSt12__niter_baseIPN3CLI7CommandEET_S3_>
 80028a0:	4604      	mov	r4, r0
 80028a2:	68b8      	ldr	r0, [r7, #8]
 80028a4:	f000 f80f 	bl	80028c6 <_ZSt12__niter_baseIPN3CLI7CommandEET_S3_>
 80028a8:	4605      	mov	r5, r0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f80b 	bl	80028c6 <_ZSt12__niter_baseIPN3CLI7CommandEET_S3_>
 80028b0:	4602      	mov	r2, r0
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4629      	mov	r1, r5
 80028b6:	4620      	mov	r0, r4
 80028b8:	f000 f8f3 	bl	8002aa2 <_ZSt14__relocate_a_1IPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_>
 80028bc:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bdb0      	pop	{r4, r5, r7, pc}

080028c6 <_ZSt12__niter_baseIPN3CLI7CommandEET_S3_>:
    __niter_base(_Iterator __it)
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
    }
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff fbf9 	bl	8002122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_+0x14>)
      }
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	0aaaaaaa 	.word	0x0aaaaaaa

08002950 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_+0x34>)
 800295a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffeb 	bl	8002938 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 8002962:	4603      	mov	r3, r0
 8002964:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002966:	f107 0208 	add.w	r2, r7, #8
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f864 	bl	8002a3e <_ZSt3minIjERKT_S2_S2_>
 8002976:	4603      	mov	r3, r0
 8002978:	681b      	ldr	r3, [r3, #0]
      }
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	05555555 	.word	0x05555555

08002988 <_ZNKSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <_ZSt12__relocate_aIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800299c:	b5b0      	push	{r4, r5, r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f8c1 	bl	8002b32 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80029b0:	4604      	mov	r4, r0
 80029b2:	68b8      	ldr	r0, [r7, #8]
 80029b4:	f000 f8bd 	bl	8002b32 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80029b8:	4605      	mov	r5, r0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8b9 	bl	8002b32 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>
 80029c0:	4602      	mov	r2, r0
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	4629      	mov	r1, r5
 80029c6:	4620      	mov	r0, r4
 80029c8:	f000 f8bd 	bl	8002b46 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>
 80029cc:	4603      	mov	r3, r0
    }
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdb0      	pop	{r4, r5, r7, pc}

080029d6 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8d5 	bl	8002b92 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4293      	cmp	r3, r2
 80029ee:	bf8c      	ite	hi
 80029f0:	2301      	movhi	r3, #1
 80029f2:	2300      	movls	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80029fa:	f00b fafb 	bl	800dff4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f00b fae4 	bl	800dfcc <_Znwj>
 8002a04:	4603      	mov	r3, r0
 8002a06:	bf00      	nop
      }
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f00b fad2 	bl	800dfc8 <_ZdlPvj>
      }
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d201      	bcs.n	8002a58 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	e000      	b.n	8002a5a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002a58:	687b      	ldr	r3, [r7, #4]
    }
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f899 	bl	8002ba8 <_ZNK9__gnu_cxx13new_allocatorIN3CLI7CommandEE11_M_max_sizeEv>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	bf8c      	ite	hi
 8002a7e:	2301      	movhi	r3, #1
 8002a80:	2300      	movls	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <_ZN9__gnu_cxx13new_allocatorIN3CLI7CommandEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002a88:	f00b fab4 	bl	800dff4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	015b      	lsls	r3, r3, #5
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00b fa9b 	bl	800dfcc <_Znwj>
 8002a96:	4603      	mov	r3, r0
 8002a98:	bf00      	nop
      }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_ZSt14__relocate_a_1IPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002aa2:	b590      	push	{r4, r7, lr}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d013      	beq.n	8002ae4 <_ZSt14__relocate_a_1IPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002abc:	6978      	ldr	r0, [r7, #20]
 8002abe:	f7ff fea1 	bl	8002804 <_ZSt11__addressofIN3CLI7CommandEEPT_RS2_>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f7ff fe9d 	bl	8002804 <_ZSt11__addressofIN3CLI7CommandEEPT_RS2_>
 8002aca:	4603      	mov	r3, r0
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f000 f874 	bl	8002bbe <_ZSt19__relocate_object_aIN3CLI7CommandES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3320      	adds	r3, #32
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3320      	adds	r3, #32
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e7e7      	b.n	8002ab4 <_ZSt14__relocate_a_1IPN3CLI7CommandES2_SaIS1_EET0_T_S5_S4_RT1_+0x12>
      return __cur;
 8002ae4:	697b      	ldr	r3, [r7, #20]
    }
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}

08002aee <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f87a 	bl	8002bf4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4293      	cmp	r3, r2
 8002b06:	bf8c      	ite	hi
 8002b08:	2301      	movhi	r3, #1
 8002b0a:	2300      	movls	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002b12:	f00b fa6f 	bl	800dff4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00b fa53 	bl	800dfcc <_Znwj>
 8002b26:	4603      	mov	r3, r0
 8002b28:	bf00      	nop
      }
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_ZSt12__niter_baseIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S7_>:
    __niter_base(_Iterator __it)
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002b46:	b590      	push	{r4, r7, lr}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d013      	beq.n	8002b88 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff fe2b 	bl	80027bc <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8002b66:	4604      	mov	r4, r0
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fe27 	bl	80027bc <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	4620      	mov	r0, r4
 8002b76:	f000 f849 	bl	8002c0c <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3318      	adds	r3, #24
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e7e7      	b.n	8002b58 <_ZSt14__relocate_a_1IPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS5_EET0_T_S9_S8_RT1_+0x12>
      return __cur;
 8002b88:	697b      	ldr	r3, [r7, #20]
    }
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd90      	pop	{r4, r7, pc}

08002b92 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <_ZNK9__gnu_cxx13new_allocatorIN3CLI7CommandEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002bb0:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <_ZSt19__relocate_object_aIN3CLI7CommandES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	f000 f839 	bl	8002c42 <_ZSt4moveIRN3CLI7CommandEEONSt16remove_referenceIT_E4typeEOS4_>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68f9      	ldr	r1, [r7, #12]
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f86d 	bl	8002cb6 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002bdc:	68b8      	ldr	r0, [r7, #8]
 8002bde:	f7ff fe11 	bl	8002804 <_ZSt11__addressofIN3CLI7CommandEEPT_RS2_>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fa76 	bl	80020d8 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE7destroyIS1_EEvRS2_PT_>
    }
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002bfc:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE11_M_max_sizeEv+0x14>)
      }
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	05555555 	.word	0x05555555

08002c0c <_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002c18:	68b8      	ldr	r0, [r7, #8]
 8002c1a:	f000 f85e 	bl	8002cda <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f87a 	bl	8002d1e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	f7ff fdc6 	bl	80027bc <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4619      	mov	r1, r3
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fb6f 	bl	8002318 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
    }
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_ZSt4moveIRN3CLI7CommandEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <_ZN3CLI7CommandC1EOS0_>:
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd feb5 	bl	80009d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	7e1a      	ldrb	r2, [r3, #24]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	761a      	strb	r2, [r3, #24]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	61da      	str	r2, [r3, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZSt12construct_atIN3CLI7CommandEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002c86:	b5b0      	push	{r4, r5, r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002c90:	6838      	ldr	r0, [r7, #0]
 8002c92:	f000 f856 	bl	8002d42 <_ZSt7forwardIN3CLI7CommandEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c96:	4605      	mov	r5, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	2020      	movs	r0, #32
 8002c9e:	f7fd fa64 	bl	800016a <_ZnwjPv>
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff ffd5 	bl	8002c56 <_ZN3CLI7CommandC1EOS0_>
 8002cac:	4623      	mov	r3, r4
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdb0      	pop	{r4, r5, r7, pc}

08002cb6 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f83d 	bl	8002d42 <_ZSt7forwardIN3CLI7CommandEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f7ff ffda 	bl	8002c86 <_ZSt12construct_atIN3CLI7CommandEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <_ZSt12construct_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002cee:	b5b0      	push	{r4, r5, r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f000 f82c 	bl	8002d56 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002cfe:	4605      	mov	r5, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4619      	mov	r1, r3
 8002d04:	2018      	movs	r0, #24
 8002d06:	f7fd fa30 	bl	800016a <_ZnwjPv>
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f7fd fe61 	bl	80009d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8002d14:	4623      	mov	r3, r4
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}

08002d1e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f813 	bl	8002d56 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff ffda 	bl	8002cee <_ZSt12construct_atINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_ZSt7forwardIN3CLI7CommandEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <ringbuf_end>:
/*
 * Return a pointer to one-past-the-end of the ring buffer's
 * contiguous buffer. You shouldn't normally need to use this function
 * unless you're writing a new ringbuf_* function.
 */
static const uint8_t* ringbuf_end(const struct ringbuf_t *rb) {
 8002d6a:	b590      	push	{r4, r7, lr}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return rb->buf + ringbuf_buffer_size(rb);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681c      	ldr	r4, [r3, #0]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f84e 	bl	8002e18 <ringbuf_buffer_size>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4423      	add	r3, r4
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}

08002d88 <ringbuf_nextp>:
/*
 * Given a ring buffer rb and a pointer to a location within its
 * contiguous buffer, return the a pointer to the next logical
 * location in the ring buffer.
 */
static uint8_t* ringbuf_nextp(struct ringbuf_t * rb, const uint8_t *p) {
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	/*
	 * The assert guarantees the expression (++p - rb->buf) is
	 * non-negative; therefore, the modulus operation is safe and
	 * portable.
	 */
	return rb->buf + ((++p - rb->buf) % ringbuf_buffer_size(rb));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681d      	ldr	r5, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	461c      	mov	r4, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f836 	bl	8002e18 <ringbuf_buffer_size>
 8002dac:	4603      	mov	r3, r0
 8002dae:	fbb4 f2f3 	udiv	r2, r4, r3
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	1ae3      	subs	r3, r4, r3
 8002db8:	442b      	add	r3, r5
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bdb0      	pop	{r4, r5, r7, pc}

08002dc2 <ringbuf_new>:
 * more bytes larger than the usable capacity, for bookkeeping.
 *
 * Returns the new ring buffer object, or 0 if there's not enough
 * memory to fulfill the request for the given capacity.
 */
struct ringbuf_t* ringbuf_new(size_t capacity) {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	struct ringbuf_t * rb = malloc(sizeof(struct ringbuf_t));
 8002dca:	2010      	movs	r0, #16
 8002dcc:	f00b fa34 	bl	800e238 <malloc>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60fb      	str	r3, [r7, #12]
	if (rb) {
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <ringbuf_new+0x4c>

		/* One byte is used for detecting the full condition. */
		rb->size = capacity + 1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	60da      	str	r2, [r3, #12]
		rb->buf = malloc(rb->size);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00b fa26 	bl	800e238 <malloc>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	601a      	str	r2, [r3, #0]
		if (rb->buf)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <ringbuf_new+0x42>
			ringbuf_reset(rb);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f816 	bl	8002e2e <ringbuf_reset>
 8002e02:	e004      	b.n	8002e0e <ringbuf_new+0x4c>
		else {
			free(rb);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f00b fa1f 	bl	800e248 <free>
			return 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <ringbuf_new+0x4e>
		}
	}
	return rb;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <ringbuf_buffer_size>:
 * "buffer empty" state.
 *
 * For the usable capacity of the ring buffer, use the
 * ringbuf_capacity function.
 */
size_t ringbuf_buffer_size(const struct ringbuf_t *rb) {
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	return rb->size;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <ringbuf_reset>:
}

/*
 * Reset a ring buffer to its initial state (empty).
 */
void ringbuf_reset(struct ringbuf_t * rb) {
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	605a      	str	r2, [r3, #4]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <ringbuf_capacity>:
/*
 * The usable capacity of the ring buffer, in bytes. Note that this
 * value may be less than the ring buffer's internal buffer size, as
 * returned by ringbuf_buffer_size.
 */
size_t ringbuf_capacity(const struct ringbuf_t *rb)  {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	return ringbuf_buffer_size(rb) - 1;
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffdd 	bl	8002e18 <ringbuf_buffer_size>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	3b01      	subs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <ringbuf_bytes_free>:

/*
 * The number of free/available bytes in the ring buffer. This value
 * is never larger than the ring buffer's usable capacity.
 */
size_t ringbuf_bytes_free(const struct ringbuf_t *rb)  {
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	if (rb->head >= rb->tail)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d30a      	bcc.n	8002e94 <ringbuf_bytes_free+0x2a>
		return ringbuf_capacity(rb) - (rb->head - rb->tail);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffe6 	bl	8002e50 <ringbuf_capacity>
 8002e84:	4601      	mov	r1, r0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	1acb      	subs	r3, r1, r3
 8002e92:	e005      	b.n	8002ea0 <ringbuf_bytes_free+0x36>
	else
		return rb->tail - rb->head - 1;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	3b01      	subs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <ringbuf_bytes_used>:

/*
 * The number of bytes currently being used in the ring buffer. This
 * value is never larger than the ring buffer's usable capacity.
 */
size_t ringbuf_bytes_used(const struct ringbuf_t *rb) {
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	return ringbuf_capacity(rb) - ringbuf_bytes_free(rb);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffcd 	bl	8002e50 <ringbuf_capacity>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffd6 	bl	8002e6a <ringbuf_bytes_free>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	1ae3      	subs	r3, r4, r3
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd90      	pop	{r4, r7, pc}

08002eca <ringbuf_is_full>:

int ringbuf_is_full(const struct ringbuf_t *rb) {
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
	return ringbuf_bytes_free(rb) == 0;
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ffc9 	bl	8002e6a <ringbuf_bytes_free>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <ringbuf_is_empty>:

int ringbuf_is_empty(const struct ringbuf_t *rb) {
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	return ringbuf_bytes_free(rb) == ringbuf_capacity(rb);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ffb8 	bl	8002e6a <ringbuf_bytes_free>
 8002efa:	4604      	mov	r4, r0
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ffa7 	bl	8002e50 <ringbuf_capacity>
 8002f02:	4603      	mov	r3, r0
 8002f04:	429c      	cmp	r4, r3
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
	...

08002f18 <ringbuf_memcpy_into>:
 * old data will simply be overwritten in FIFO fashion, as
 * needed. However, note that, if calling the function results in an
 * overflow, the value of the ring buffer's tail pointer may be
 * different than it was before the function was called.
 */
void* ringbuf_memcpy_into(struct ringbuf_t *dst, const void *src, size_t count)  {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
	const uint8_t *u8src = src;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	623b      	str	r3, [r7, #32]
	const uint8_t *bufend = ringbuf_end(dst);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff ff1e 	bl	8002d6a <ringbuf_end>
 8002f2e:	61f8      	str	r0, [r7, #28]
	int overflow = count > ringbuf_bytes_free(dst);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff ff9a 	bl	8002e6a <ringbuf_bytes_free>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	bf8c      	ite	hi
 8002f3e:	2301      	movhi	r3, #1
 8002f40:	2300      	movls	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	61bb      	str	r3, [r7, #24]
	size_t nread = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24

	while (nread != count) {
 8002f4a:	e031      	b.n	8002fb0 <ringbuf_memcpy_into+0x98>
		/* don't copy beyond the end of the buffer */
		assert(bufend > dst->head);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d805      	bhi.n	8002f62 <ringbuf_memcpy_into+0x4a>
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <ringbuf_memcpy_into+0xdc>)
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <ringbuf_memcpy_into+0xe0>)
 8002f5a:	21c4      	movs	r1, #196	; 0xc4
 8002f5c:	4827      	ldr	r0, [pc, #156]	; (8002ffc <ringbuf_memcpy_into+0xe4>)
 8002f5e:	f00b f911 	bl	800e184 <__assert_func>
		size_t n = MIN(bufend - dst->head, count - nread);
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6852      	ldr	r2, [r2, #4]
 8002f6c:	69f9      	ldr	r1, [r7, #28]
 8002f6e:	1a8a      	subs	r2, r1, r2
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf28      	it	cs
 8002f74:	4613      	movcs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
		memcpy(dst->head, u8src + nread, n);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6858      	ldr	r0, [r3, #4]
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	4413      	add	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f00b f977 	bl	800e278 <memcpy>
		dst->head += n;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	441a      	add	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
		nread += n;
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24

		/* wrap? */
		if (dst->head == bufend)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d103      	bne.n	8002fb0 <ringbuf_memcpy_into+0x98>
			dst->head = dst->buf;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	605a      	str	r2, [r3, #4]
	while (nread != count) {
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1c9      	bne.n	8002f4c <ringbuf_memcpy_into+0x34>
	}

	if (overflow) {
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d014      	beq.n	8002fe8 <ringbuf_memcpy_into+0xd0>
		dst->tail = ringbuf_nextp(dst, dst->head);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fedf 	bl	8002d88 <ringbuf_nextp>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
		assert(ringbuf_is_full(dst));
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff7a 	bl	8002eca <ringbuf_is_full>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <ringbuf_memcpy_into+0xd0>
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <ringbuf_memcpy_into+0xe8>)
 8002fde:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <ringbuf_memcpy_into+0xe0>)
 8002fe0:	21d1      	movs	r1, #209	; 0xd1
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <ringbuf_memcpy_into+0xe4>)
 8002fe4:	f00b f8ce 	bl	800e184 <__assert_func>
	}

	return dst->head;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
};
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	0800f344 	.word	0x0800f344
 8002ff8:	0800f610 	.word	0x0800f610
 8002ffc:	0800f358 	.word	0x0800f358
 8003000:	0800f374 	.word	0x0800f374

08003004 <ringbuf_memcpy_from>:
 *
 * This function will *not* allow the ring buffer to underflow. If
 * count is greater than the number of bytes used in the ring buffer,
 * no bytes are copied, and the function will return 0.
 */
void* ringbuf_memcpy_from(void *dst, struct ringbuf_t *src, size_t count) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	size_t bytes_used = ringbuf_bytes_used(src);
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f7ff ff49 	bl	8002ea8 <ringbuf_bytes_used>
 8003016:	6238      	str	r0, [r7, #32]
	if (count > bytes_used)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	429a      	cmp	r2, r3
 800301e:	d901      	bls.n	8003024 <ringbuf_memcpy_from+0x20>
		return 0;
 8003020:	2300      	movs	r3, #0
 8003022:	e041      	b.n	80030a8 <ringbuf_memcpy_from+0xa4>

	uint8_t *u8dst = dst;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	61fb      	str	r3, [r7, #28]
	const uint8_t *bufend = ringbuf_end(src);
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f7ff fe9e 	bl	8002d6a <ringbuf_end>
 800302e:	61b8      	str	r0, [r7, #24]
	size_t nwritten = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
	while (nwritten != count) {
 8003034:	e032      	b.n	800309c <ringbuf_memcpy_from+0x98>
		assert(bufend > src->tail);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	429a      	cmp	r2, r3
 800303e:	d806      	bhi.n	800304e <ringbuf_memcpy_from+0x4a>
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <ringbuf_memcpy_from+0xac>)
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <ringbuf_memcpy_from+0xb0>)
 8003044:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003048:	481b      	ldr	r0, [pc, #108]	; (80030b8 <ringbuf_memcpy_from+0xb4>)
 800304a:	f00b f89b 	bl	800e184 <__assert_func>
		size_t n = MIN(bufend - src->tail, count - nwritten);
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	6892      	ldr	r2, [r2, #8]
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	1a8a      	subs	r2, r1, r2
 800305c:	4293      	cmp	r3, r2
 800305e:	bf28      	it	cs
 8003060:	4613      	movcs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
		memcpy(u8dst + nwritten, src->tail, n);
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	18d0      	adds	r0, r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4619      	mov	r1, r3
 8003072:	f00b f901 	bl	800e278 <memcpy>
		src->tail += n;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	441a      	add	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	609a      	str	r2, [r3, #8]
		nwritten += n;
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4413      	add	r3, r2
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

		/* wrap ? */
		if (src->tail == bufend)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	d103      	bne.n	800309c <ringbuf_memcpy_from+0x98>
			src->tail = src->buf;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	609a      	str	r2, [r3, #8]
	while (nwritten != count) {
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1c8      	bne.n	8003036 <ringbuf_memcpy_from+0x32>
	}

	return src->tail;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	689b      	ldr	r3, [r3, #8]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	0800f3cc 	.word	0x0800f3cc
 80030b4:	0800f624 	.word	0x0800f624
 80030b8:	0800f358 	.word	0x0800f358

080030bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a23      	ldr	r2, [pc, #140]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030d6:	f043 0310 	orr.w	r3, r3, #16
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <MX_GPIO_Init+0xa8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <MX_GPIO_Init+0xa8>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <MX_GPIO_Init+0xa8>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6193      	str	r3, [r2, #24]
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <MX_GPIO_Init+0xa8>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <MX_GPIO_Init+0xa8>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4a11      	ldr	r2, [pc, #68]	; (8003164 <MX_GPIO_Init+0xa8>)
 800311e:	f043 0308 	orr.w	r3, r3, #8
 8003122:	6193      	str	r3, [r2, #24]
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <MX_GPIO_Init+0xa8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003130:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8003134:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003136:	2303      	movs	r3, #3
 8003138:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4619      	mov	r1, r3
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <MX_GPIO_Init+0xac>)
 8003142:	f001 fc33 	bl	80049ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003146:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800314a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800314c:	2303      	movs	r3, #3
 800314e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4619      	mov	r1, r3
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <MX_GPIO_Init+0xb0>)
 8003158:	f001 fc28 	bl	80049ac <HAL_GPIO_Init>

}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800
 800316c:	40010c00 	.word	0x40010c00

08003170 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <MX_I2C1_Init+0x50>)
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <MX_I2C1_Init+0x54>)
 8003178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <MX_I2C1_Init+0x50>)
 800317c:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <MX_I2C1_Init+0x58>)
 800317e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <MX_I2C1_Init+0x50>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <MX_I2C1_Init+0x50>)
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <MX_I2C1_Init+0x50>)
 800318e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <MX_I2C1_Init+0x50>)
 8003196:	2200      	movs	r2, #0
 8003198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <MX_I2C1_Init+0x50>)
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <MX_I2C1_Init+0x50>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <MX_I2C1_Init+0x50>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031ac:	4804      	ldr	r0, [pc, #16]	; (80031c0 <MX_I2C1_Init+0x50>)
 80031ae:	f001 fd81 	bl	8004cb4 <HAL_I2C_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031b8:	f000 f9e2 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000204 	.word	0x20000204
 80031c4:	40005400 	.word	0x40005400
 80031c8:	000186a0 	.word	0x000186a0

080031cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <HAL_I2C_MspInit+0x70>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d123      	bne.n	8003234 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_I2C_MspInit+0x74>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_I2C_MspInit+0x74>)
 80031f2:	f043 0308 	orr.w	r3, r3, #8
 80031f6:	6193      	str	r3, [r2, #24]
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <HAL_I2C_MspInit+0x74>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003204:	23c0      	movs	r3, #192	; 0xc0
 8003206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003208:	2312      	movs	r3, #18
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4619      	mov	r1, r3
 8003216:	480b      	ldr	r0, [pc, #44]	; (8003244 <HAL_I2C_MspInit+0x78>)
 8003218:	f001 fbc8 	bl	80049ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_I2C_MspInit+0x74>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_I2C_MspInit+0x74>)
 8003222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003226:	61d3      	str	r3, [r2, #28]
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_I2C_MspInit+0x74>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40005400 	.word	0x40005400
 8003240:	40021000 	.word	0x40021000
 8003244:	40010c00 	.word	0x40010c00

08003248 <_Z5printPKc>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void read_data_from_sensor();
void print(const char* error_message) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart1, error_message, strlen(error_message), 100);
	CDC_Transmit_FS(error_message, strlen(error_message));
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fc ff7b 	bl	800014c <strlen>
 8003256:	4603      	mov	r3, r0
 8003258:	b29b      	uxth	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f00a fad3 	bl	800d808 <CDC_Transmit_FS>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003270:	f001 f97a 	bl	8004568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003274:	f000 f830 	bl	80032d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003278:	f7ff ff20 	bl	80030bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800327c:	f001 f8d0 	bl	8004420 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003280:	f7ff ff76 	bl	8003170 <MX_I2C1_Init>
  MX_RTC_Init();
 8003284:	f000 fe76 	bl	8003f74 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8003288:	f00a f9a6 	bl	800d5d8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Initialise sensor (tests connection by reading the status register).
  if (!sht3x_init(&handle)) {
 800328c:	480d      	ldr	r0, [pc, #52]	; (80032c4 <main+0x58>)
 800328e:	f000 ff3f 	bl	8004110 <sht3x_init>
 8003292:	4603      	mov	r3, r0
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <main+0x38>
	  print("SHT30 access failed\n");
 800329e:	480a      	ldr	r0, [pc, #40]	; (80032c8 <main+0x5c>)
 80032a0:	f7ff ffd2 	bl	8003248 <_Z5printPKc>
  }

  input_data_buffer = ringbuf_new(64);
 80032a4:	2040      	movs	r0, #64	; 0x40
 80032a6:	f7ff fd8c 	bl	8002dc2 <ringbuf_new>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <main+0x60>)
 80032ae:	6013      	str	r3, [r2, #0]
  cli_parser_init();
 80032b0:	f000 f8c6 	bl	8003440 <_Z15cli_parser_initv>

  HAL_UART_Receive_IT(&huart1, &uart_sym, 1);
 80032b4:	2201      	movs	r2, #1
 80032b6:	4906      	ldr	r1, [pc, #24]	; (80032d0 <main+0x64>)
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <main+0x68>)
 80032ba:	f005 fd4a 	bl	8008d52 <HAL_UART_Receive_IT>
//		  }
//
//		  on_BLE_data_ready = false;
	  }

	  cli_process_command();
 80032be:	f000 f909 	bl	80034d4 <_Z19cli_process_commandv>
	  if (on_BLE_data_ready) {
 80032c2:	e7fc      	b.n	80032be <main+0x52>
 80032c4:	20000000 	.word	0x20000000
 80032c8:	0800f488 	.word	0x0800f488
 80032cc:	2000031c 	.word	0x2000031c
 80032d0:	200002de 	.word	0x200002de
 80032d4:	20000338 	.word	0x20000338

080032d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b094      	sub	sp, #80	; 0x50
 80032dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e2:	2228      	movs	r2, #40	; 0x28
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f00a ffee 	bl	800e2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003308:	2305      	movs	r3, #5
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800330c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003312:	2300      	movs	r3, #0
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003316:	2301      	movs	r3, #1
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800331a:	2301      	movs	r3, #1
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331e:	2302      	movs	r3, #2
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003328:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800332c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003332:	4618      	mov	r0, r3
 8003334:	f004 f8ba 	bl	80074ac <HAL_RCC_OscConfig>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003348:	f000 f91a 	bl	8003580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334c:	230f      	movs	r3, #15
 800334e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fb21 	bl	80079b0 <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800337e:	f000 f8ff 	bl	8003580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003382:	2311      	movs	r3, #17
 8003384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f004 fc9a 	bl	8007ccc <HAL_RCCEx_PeriphCLKConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80033a8:	f000 f8ea 	bl	8003580 <Error_Handler>
  }
}
 80033ac:	bf00      	nop
 80033ae:	3750      	adds	r7, #80	; 0x50
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	// TODO Add check to string overflow

	BLE_buff[BLE_received_data_size++] = uart_sym;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_UART_RxCpltCallback+0x38>)
 80033be:	7819      	ldrb	r1, [r3, #0]
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_UART_RxCpltCallback+0x3c>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	b290      	uxth	r0, r2
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_UART_RxCpltCallback+0x3c>)
 80033ca:	8010      	strh	r0, [r2, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_UART_RxCpltCallback+0x40>)
 80033d0:	5499      	strb	r1, [r3, r2]
	on_BLE_data_ready = true;
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_UART_RxCpltCallback+0x44>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &uart_sym, 1);
 80033d8:	2201      	movs	r2, #1
 80033da:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_UART_RxCpltCallback+0x38>)
 80033dc:	4807      	ldr	r0, [pc, #28]	; (80033fc <HAL_UART_RxCpltCallback+0x48>)
 80033de:	f005 fcb8 	bl	8008d52 <HAL_UART_Receive_IT>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200002de 	.word	0x200002de
 80033f0:	200002dc 	.word	0x200002dc
 80033f4:	2000025c 	.word	0x2000025c
 80033f8:	20000258 	.word	0x20000258
 80033fc:	20000338 	.word	0x20000338

08003400 <_ZZ15cli_parser_initvENKUlvE_clEv>:
{
	std::vector<CLI::Command> commands;
	commands.emplace_back(
			"NOT_A_COMMAND",
			CLI::CommandRoles::SERVICE_COMMAND,
			[]()
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
			{
				print("Unknown command!\n");
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <_ZZ15cli_parser_initvENKUlvE_clEv+0x18>)
 800340a:	f7ff ff1d 	bl	8003248 <_Z5printPKc>
			});
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	0800f4b0 	.word	0x0800f4b0

0800341c <_ZZ15cli_parser_initvENUlvE_4_FUNEv>:
			[]()
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
			});
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff ffed 	bl	8003400 <_ZZ15cli_parser_initvENKUlvE_clEv>
 8003426:	bd80      	pop	{r7, pc}

08003428 <_ZZ15cli_parser_initvENKUlvE_cvPFvvEEv>:
			[]()
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
			});
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <_ZZ15cli_parser_initvENKUlvE_cvPFvvEEv+0x14>)
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	0800341d 	.word	0x0800341d

08003440 <_Z15cli_parser_initv>:
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
	std::vector<CLI::Command> commands;
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7fc ff9c 	bl	8000386 <_ZNSt6vectorIN3CLI7CommandESaIS1_EEC1Ev>
			CLI::CommandRoles::SERVICE_COMMAND,
 800344e:	2300      	movs	r3, #0
 8003450:	74fb      	strb	r3, [r7, #19]
			});
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	f107 0213 	add.w	r2, r7, #19
 800345a:	1d38      	adds	r0, r7, #4
 800345c:	4915      	ldr	r1, [pc, #84]	; (80034b4 <_Z15cli_parser_initv+0x74>)
 800345e:	f000 f894 	bl	800358a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEERS1_DpOT_>

	commands.emplace_back(
			"ble_on",
			CLI::CommandRoles::USER_COMMAND,
 8003462:	2301      	movs	r3, #1
 8003464:	757b      	strb	r3, [r7, #21]
			ble_on);
 8003466:	f107 0215 	add.w	r2, r7, #21
 800346a:	1d38      	adds	r0, r7, #4
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <_Z15cli_parser_initv+0x78>)
 800346e:	4913      	ldr	r1, [pc, #76]	; (80034bc <_Z15cli_parser_initv+0x7c>)
 8003470:	f000 f8d6 	bl	8003620 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA7_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>

	commands.emplace_back(
			"ble_off",
			CLI::CommandRoles::USER_COMMAND,
 8003474:	2301      	movs	r3, #1
 8003476:	75bb      	strb	r3, [r7, #22]
			ble_off);
 8003478:	f107 0216 	add.w	r2, r7, #22
 800347c:	1d38      	adds	r0, r7, #4
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <_Z15cli_parser_initv+0x80>)
 8003480:	4910      	ldr	r1, [pc, #64]	; (80034c4 <_Z15cli_parser_initv+0x84>)
 8003482:	f000 f918 	bl	80036b6 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA8_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>

	commands.emplace_back(
			"ble_send",
			CLI::CommandRoles::USER_COMMAND,
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
			ble_send);
 800348a:	f107 0217 	add.w	r2, r7, #23
 800348e:	1d38      	adds	r0, r7, #4
 8003490:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <_Z15cli_parser_initv+0x88>)
 8003492:	490e      	ldr	r1, [pc, #56]	; (80034cc <_Z15cli_parser_initv+0x8c>)
 8003494:	f000 f95a 	bl	800374c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA9_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>

	cli.add_commands(commands);
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	4619      	mov	r1, r3
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <_Z15cli_parser_initv+0x90>)
 800349e:	f7fd f898 	bl	80005d2 <_ZN22CommandLineInterpreter12add_commandsERSt6vectorIN3CLI7CommandESaIS2_EE>
	std::vector<CLI::Command> commands;
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fbf3 	bl	8000c90 <_ZNSt6vectorIN3CLI7CommandESaIS1_EED1Ev>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	0800f4c4 	.word	0x0800f4c4
 80034b8:	0800355d 	.word	0x0800355d
 80034bc:	0800f4d4 	.word	0x0800f4d4
 80034c0:	08003569 	.word	0x08003569
 80034c4:	0800f4dc 	.word	0x0800f4dc
 80034c8:	08003575 	.word	0x08003575
 80034cc:	0800f4e4 	.word	0x0800f4e4
 80034d0:	200002e0 	.word	0x200002e0

080034d4 <_Z19cli_process_commandv>:

void cli_process_command()
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
	// Check queue for new syms
	if (ringbuf_is_empty (input_data_buffer))
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <_Z19cli_process_commandv+0x70>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fd04 	bl	8002eec <ringbuf_is_empty>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d120      	bne.n	8003536 <_Z19cli_process_commandv+0x62>
		return;

	// Add the sym and try to process a command
	ringbuf_memcpy_from(&cli_sym, input_data_buffer, 1);
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <_Z19cli_process_commandv+0x70>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	4812      	ldr	r0, [pc, #72]	; (8003548 <_Z19cli_process_commandv+0x74>)
 80034fe:	f7ff fd81 	bl	8003004 <ringbuf_memcpy_from>

	CLI::StatusCode status = cli.process(cli_sym);
 8003502:	4911      	ldr	r1, [pc, #68]	; (8003548 <_Z19cli_process_commandv+0x74>)
 8003504:	4811      	ldr	r0, [pc, #68]	; (800354c <_Z19cli_process_commandv+0x78>)
 8003506:	f7fc ffd7 	bl	80004b8 <_ZN22CommandLineInterpreter7processERKc>
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]

	if (status == CLI::StatusCode::BUSY) {
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d012      	beq.n	800353a <_Z19cli_process_commandv+0x66>
		return;
	}
	else if (status == CLI::StatusCode::MAX_SIZE_REACHED) {
 8003514:	79fb      	ldrb	r3, [r7, #7]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d103      	bne.n	8003522 <_Z19cli_process_commandv+0x4e>
		print("Max size reached!\n");
 800351a:	480d      	ldr	r0, [pc, #52]	; (8003550 <_Z19cli_process_commandv+0x7c>)
 800351c:	f7ff fe94 	bl	8003248 <_Z5printPKc>
 8003520:	e005      	b.n	800352e <_Z19cli_process_commandv+0x5a>
	}
	else if (status == CLI::StatusCode::UNKNOWN_COMMAND) {
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d102      	bne.n	800352e <_Z19cli_process_commandv+0x5a>
		print("Unknown command!\n");
 8003528:	480a      	ldr	r0, [pc, #40]	; (8003554 <_Z19cli_process_commandv+0x80>)
 800352a:	f7ff fe8d 	bl	8003248 <_Z5printPKc>
	}

	cli.args.clear();
 800352e:	480a      	ldr	r0, [pc, #40]	; (8003558 <_Z19cli_process_commandv+0x84>)
 8003530:	f7fd fd16 	bl	8000f60 <_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5clearEv>
 8003534:	e002      	b.n	800353c <_Z19cli_process_commandv+0x68>
		return;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <_Z19cli_process_commandv+0x68>
		return;
 800353a:	bf00      	nop
}
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	2000031c 	.word	0x2000031c
 8003548:	20000318 	.word	0x20000318
 800354c:	200002e0 	.word	0x200002e0
 8003550:	0800f4f0 	.word	0x0800f4f0
 8003554:	0800f4b0 	.word	0x0800f4b0
 8003558:	200002e4 	.word	0x200002e4

0800355c <_Z6ble_onv>:

void ble_on() {
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <_Z7ble_offv>:

void ble_off() {
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0

}
 800356c:	bf00      	nop
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <_Z8ble_sendv>:

void ble_send() {
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0

}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003584:	b672      	cpsid	i
}
 8003586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003588:	e7fe      	b.n	8003588 <Error_Handler+0x8>

0800358a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800358a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d01c      	beq.n	80035e0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEERS1_DpOT_+0x56>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80035a6:	68fc      	ldr	r4, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685d      	ldr	r5, [r3, #4]
 80035ac:	68b8      	ldr	r0, [r7, #8]
 80035ae:	f000 f918 	bl	80037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80035b2:	4606      	mov	r6, r0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd ffb3 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 80035ba:	4680      	mov	r8, r0
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f000 f91a 	bl	80037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>
 80035c2:	4603      	mov	r3, r0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4643      	mov	r3, r8
 80035c8:	4632      	mov	r2, r6
 80035ca:	4629      	mov	r1, r5
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 f94f 	bl	8003870 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f103 0220 	add.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	e016      	b.n	800360e <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEERS1_DpOT_+0x84>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7fd fbca 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 80035e6:	4604      	mov	r4, r0
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f000 f8fa 	bl	80037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80035ee:	4605      	mov	r5, r0
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd ff95 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 80035f6:	4606      	mov	r6, r0
 80035f8:	6838      	ldr	r0, [r7, #0]
 80035fa:	f000 f8fc 	bl	80037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>
 80035fe:	4603      	mov	r3, r0
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4633      	mov	r3, r6
 8003604:	462a      	mov	r2, r5
 8003606:	4621      	mov	r1, r4
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f94d 	bl	80038a8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7fe f874 	bl	80016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>
 8003614:	4603      	mov	r3, r0
      }
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003620 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA7_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8003620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af02      	add	r7, sp, #8
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d01c      	beq.n	8003676 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA7_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x56>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800363c:	68fc      	ldr	r4, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685d      	ldr	r5, [r3, #4]
 8003642:	68b8      	ldr	r0, [r7, #8]
 8003644:	f000 f9ba 	bl	80039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003648:	4606      	mov	r6, r0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd ff68 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003650:	4680      	mov	r8, r0
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f000 f9bc 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003658:	4603      	mov	r3, r0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4643      	mov	r3, r8
 800365e:	4632      	mov	r2, r6
 8003660:	4629      	mov	r1, r5
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f9ed 	bl	8003a42 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA7_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f103 0220 	add.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	e016      	b.n	80036a4 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA7_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x84>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7fd fb7f 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 800367c:	4604      	mov	r4, r0
 800367e:	68b8      	ldr	r0, [r7, #8]
 8003680:	f000 f99c 	bl	80039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003684:	4605      	mov	r5, r0
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd ff4a 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 800368c:	4606      	mov	r6, r0
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	f000 f99e 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003694:	4603      	mov	r3, r0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4633      	mov	r3, r6
 800369a:	462a      	mov	r2, r5
 800369c:	4621      	mov	r1, r4
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9ec 	bl	8003a7c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA7_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7fe f829 	bl	80016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>
 80036aa:	4603      	mov	r3, r0
      }
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036b6 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA8_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d01c      	beq.n	800370c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA8_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x56>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d2:	68fc      	ldr	r4, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685d      	ldr	r5, [r3, #4]
 80036d8:	68b8      	ldr	r0, [r7, #8]
 80036da:	f000 fa59 	bl	8003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80036de:	4606      	mov	r6, r0
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fd ff1d 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e6:	4680      	mov	r8, r0
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f000 f971 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80036ee:	4603      	mov	r3, r0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4643      	mov	r3, r8
 80036f4:	4632      	mov	r2, r6
 80036f6:	4629      	mov	r1, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 fa82 	bl	8003c02 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA8_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f103 0220 	add.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	e016      	b.n	800373a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA8_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x84>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7fd fb34 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 8003712:	4604      	mov	r4, r0
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f000 fa3b 	bl	8003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800371a:	4605      	mov	r5, r0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fd feff 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003722:	4606      	mov	r6, r0
 8003724:	6838      	ldr	r0, [r7, #0]
 8003726:	f000 f953 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 800372a:	4603      	mov	r3, r0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4633      	mov	r3, r6
 8003730:	462a      	mov	r2, r5
 8003732:	4621      	mov	r1, r4
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fa81 	bl	8003c3c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA8_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7fd ffde 	bl	80016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>
 8003740:	4603      	mov	r3, r0
      }
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800374c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA9_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d01c      	beq.n	80037a2 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA9_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x56>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003768:	68fc      	ldr	r4, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685d      	ldr	r5, [r3, #4]
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 faee 	bl	8003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003774:	4606      	mov	r6, r0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fed2 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 800377c:	4680      	mov	r8, r0
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f000 f926 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003784:	4603      	mov	r3, r0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4643      	mov	r3, r8
 800378a:	4632      	mov	r2, r6
 800378c:	4629      	mov	r1, r5
 800378e:	4620      	mov	r0, r4
 8003790:	f000 fb17 	bl	8003dc2 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA9_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f103 0220 	add.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	e016      	b.n	80037d0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE12emplace_backIJRA9_KcNS0_12CommandRolesERFvvEEEERS1_DpOT_+0x84>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7fd fae9 	bl	8000d7a <_ZNSt6vectorIN3CLI7CommandESaIS1_EE3endEv>
 80037a8:	4604      	mov	r4, r0
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f000 fad0 	bl	8003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80037b0:	4605      	mov	r5, r0
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd feb4 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037b8:	4606      	mov	r6, r0
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f000 f908 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037c0:	4603      	mov	r3, r0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4633      	mov	r3, r6
 80037c6:	462a      	mov	r2, r5
 80037c8:	4621      	mov	r1, r4
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fb16 	bl	8003dfc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA9_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fd ff93 	bl	80016fc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE4backEv>
 80037d6:	4603      	mov	r3, r0
      }
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <_ZSt12construct_atIN3CLI7CommandEJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f7ff ffe1 	bl	80037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003820:	4602      	mov	r2, r0
 8003822:	f107 0310 	add.w	r3, r7, #16
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fbbe 	bl	8001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 800382e:	f107 0410 	add.w	r4, r7, #16
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fe74 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003838:	4603      	mov	r3, r0
 800383a:	781d      	ldrb	r5, [r3, #0]
 800383c:	6838      	ldr	r0, [r7, #0]
 800383e:	f7ff ffda 	bl	80037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>
 8003842:	4603      	mov	r3, r0
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fdef 	bl	8003428 <_ZZ15cli_parser_initvENKUlvE_cvPFvvEEv>
 800384a:	4680      	mov	r8, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4619      	mov	r1, r3
 8003850:	2020      	movs	r0, #32
 8003852:	f7fc fc8a 	bl	800016a <_ZnwjPv>
 8003856:	4606      	mov	r6, r0
 8003858:	4643      	mov	r3, r8
 800385a:	462a      	mov	r2, r5
 800385c:	4621      	mov	r1, r4
 800385e:	4630      	mov	r0, r6
 8003860:	f7fc fd2d 	bl	80002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>
 8003864:	4633      	mov	r3, r6
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003870 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ffaf 	bl	80037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003884:	4604      	mov	r4, r0
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f7fd fe4a 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 800388c:	4605      	mov	r5, r0
 800388e:	6a38      	ldr	r0, [r7, #32]
 8003890:	f7ff ffb1 	bl	80037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>
 8003894:	4603      	mov	r3, r0
 8003896:	462a      	mov	r2, r5
 8003898:	4621      	mov	r1, r4
 800389a:	68b8      	ldr	r0, [r7, #8]
 800389c:	f7ff ffb5 	bl	800380a <_ZSt12construct_atIN3CLI7CommandEJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bdb0      	pop	{r4, r5, r7, pc}

080038a8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80038a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ac:	b08e      	sub	sp, #56	; 0x38
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80038b8:	4a3f      	ldr	r2, [pc, #252]	; (80039b8 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7fe fb87 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 80038c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7fd faa3 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 80038d6:	4603      	mov	r3, r0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	f107 0214 	add.w	r2, r7, #20
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fbba 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80038ea:	4603      	mov	r3, r0
 80038ec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fbc8 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 80038f8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80038fe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	18d5      	adds	r5, r2, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff6a 	bl	80037e2 <_ZSt7forwardIRA14_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800390e:	4606      	mov	r6, r0
 8003910:	6838      	ldr	r0, [r7, #0]
 8003912:	f7fd fe05 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003916:	4680      	mov	r8, r0
 8003918:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800391a:	f7ff ff6c 	bl	80037f6 <_ZSt7forwardIZ15cli_parser_initvEUlvE_EOT_RNSt16remove_referenceIS1_E4typeE>
 800391e:	4603      	mov	r3, r0
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	4643      	mov	r3, r8
 8003924:	4632      	mov	r2, r6
 8003926:	4629      	mov	r1, r5
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff ffa1 	bl	8003870 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA14_KcNS0_12CommandRolesEZ15cli_parser_initvEUlvE_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fdf4 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 800393c:	4603      	mov	r3, r0
 800393e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fdca 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003948:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	4621      	mov	r1, r4
 800394e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003950:	f7fe fbae 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003954:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	3320      	adds	r3, #32
 800395a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800395c:	f107 0308 	add.w	r3, r7, #8
 8003960:	4618      	mov	r0, r3
 8003962:	f7fc fddf 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003966:	4603      	mov	r3, r0
 8003968:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fdb5 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003972:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003978:	4620      	mov	r0, r4
 800397a:	f7fe fb99 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800397e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003980:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 800398c:	461a      	mov	r2, r3
 800398e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003990:	f7fd fd91 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	441a      	add	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
    }
 80039ac:	bf00      	nop
 80039ae:	3730      	adds	r7, #48	; 0x30
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039b6:	bf00      	nop
 80039b8:	0800f530 	.word	0x0800f530

080039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <_ZSt12construct_atIN3CLI7CommandEJRA7_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80039e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f7ff ffe1 	bl	80039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 80039fa:	4602      	mov	r2, r0
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fad1 	bl	8001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 8003a08:	f107 0410 	add.w	r4, r7, #16
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fd fd87 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a12:	4603      	mov	r3, r0
 8003a14:	781d      	ldrb	r5, [r3, #0]
 8003a16:	6838      	ldr	r0, [r7, #0]
 8003a18:	f7ff ffda 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a1c:	4680      	mov	r8, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4619      	mov	r1, r3
 8003a22:	2020      	movs	r0, #32
 8003a24:	f7fc fba1 	bl	800016a <_ZnwjPv>
 8003a28:	4606      	mov	r6, r0
 8003a2a:	4643      	mov	r3, r8
 8003a2c:	462a      	mov	r2, r5
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4630      	mov	r0, r6
 8003a32:	f7fc fc44 	bl	80002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>
 8003a36:	4633      	mov	r3, r6
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a42 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA7_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003a42:	b5b0      	push	{r4, r5, r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ffb3 	bl	80039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003a56:	4604      	mov	r4, r0
 8003a58:	6838      	ldr	r0, [r7, #0]
 8003a5a:	f7fd fd61 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a5e:	4605      	mov	r5, r0
 8003a60:	6a38      	ldr	r0, [r7, #32]
 8003a62:	f7ff ffb5 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a66:	4603      	mov	r3, r0
 8003a68:	462a      	mov	r2, r5
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	68b8      	ldr	r0, [r7, #8]
 8003a6e:	f7ff ffb9 	bl	80039e4 <_ZSt12construct_atIN3CLI7CommandEJRA7_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a7c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA7_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a80:	b08e      	sub	sp, #56	; 0x38
 8003a82:	af02      	add	r7, sp, #8
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003a8c:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA7_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7fe fa9d 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 8003a96:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7fd f9b9 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe fad0 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fade 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 8003acc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8003ad2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	18d5      	adds	r5, r2, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff6d 	bl	80039bc <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	f7fd fd1b 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003aea:	4680      	mov	r8, r0
 8003aec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003aee:	f7ff ff6f 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003af2:	4603      	mov	r3, r0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4643      	mov	r3, r8
 8003af8:	4632      	mov	r2, r6
 8003afa:	4629      	mov	r1, r5
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ffa0 	bl	8003a42 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA7_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fd0a 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003b10:	4603      	mov	r3, r0
 8003b12:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fce0 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003b1c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	4621      	mov	r1, r4
 8003b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b24:	f7fe fac4 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003b28:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3320      	adds	r3, #32
 8003b2e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003b30:	f107 0308 	add.w	r3, r7, #8
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fcf5 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd fccb 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003b46:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f7fe faaf 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003b52:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003b54:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 8003b60:	461a      	mov	r2, r3
 8003b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b64:	f7fd fca7 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	015b      	lsls	r3, r3, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]
    }
 8003b80:	bf00      	nop
 8003b82:	3730      	adds	r7, #48	; 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0800f530 	.word	0x0800f530

08003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <_ZSt12construct_atIN3CLI7CommandEJRA8_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003bb4:	68b8      	ldr	r0, [r7, #8]
 8003bb6:	f7ff ffeb 	bl	8003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f9f1 	bl	8001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 8003bc8:	f107 0410 	add.w	r4, r7, #16
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fd fca7 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	781d      	ldrb	r5, [r3, #0]
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f7ff fefa 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003bdc:	4680      	mov	r8, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4619      	mov	r1, r3
 8003be2:	2020      	movs	r0, #32
 8003be4:	f7fc fac1 	bl	800016a <_ZnwjPv>
 8003be8:	4606      	mov	r6, r0
 8003bea:	4643      	mov	r3, r8
 8003bec:	462a      	mov	r2, r5
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f7fc fb64 	bl	80002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>
 8003bf6:	4633      	mov	r3, r6
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c02 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA8_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003c02:	b5b0      	push	{r4, r5, r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffbd 	bl	8003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003c16:	4604      	mov	r4, r0
 8003c18:	6838      	ldr	r0, [r7, #0]
 8003c1a:	f7fd fc81 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c1e:	4605      	mov	r5, r0
 8003c20:	6a38      	ldr	r0, [r7, #32]
 8003c22:	f7ff fed5 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003c26:	4603      	mov	r3, r0
 8003c28:	462a      	mov	r2, r5
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	68b8      	ldr	r0, [r7, #8]
 8003c2e:	f7ff ffb9 	bl	8003ba4 <_ZSt12construct_atIN3CLI7CommandEJRA8_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c3c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA8_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c40:	b08e      	sub	sp, #56	; 0x38
 8003c42:	af02      	add	r7, sp, #8
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003c4c:	4a3f      	ldr	r2, [pc, #252]	; (8003d4c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA8_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 8003c4e:	2101      	movs	r1, #1
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7fe f9bd 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 8003c56:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7fd f8d9 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	f107 0214 	add.w	r2, r7, #20
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe f9f0 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f9fe 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 8003c8c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8003c92:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	18d5      	adds	r5, r2, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff77 	bl	8003b90 <_ZSt7forwardIRA8_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003ca2:	4606      	mov	r6, r0
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f7fd fc3b 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003caa:	4680      	mov	r8, r0
 8003cac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003cae:	f7ff fe8f 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	4643      	mov	r3, r8
 8003cb8:	4632      	mov	r2, r6
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff ffa0 	bl	8003c02 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA8_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc2a 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd fc00 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003cdc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce4:	f7fe f9e4 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003ce8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	3320      	adds	r3, #32
 8003cee:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fc15 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd fbeb 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003d06:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7fe f9cf 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003d12:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003d14:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 8003d20:	461a      	mov	r2, r3
 8003d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d24:	f7fd fbc7 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	015b      	lsls	r3, r3, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	609a      	str	r2, [r3, #8]
    }
 8003d40:	bf00      	nop
 8003d42:	3730      	adds	r7, #48	; 0x30
 8003d44:	46bd      	mov	sp, r7
 8003d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0800f530 	.word	0x0800f530

08003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <_ZSt12construct_atIN3CLI7CommandEJRA9_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003d74:	68b8      	ldr	r0, [r7, #8]
 8003d76:	f7ff ffeb 	bl	8003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f107 0310 	add.w	r3, r7, #16
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f911 	bl	8001faa <_ZNSt17basic_string_viewIcSt11char_traitsIcEEC1EPKc>
 8003d88:	f107 0410 	add.w	r4, r7, #16
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd fbc7 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003d92:	4603      	mov	r3, r0
 8003d94:	781d      	ldrb	r5, [r3, #0]
 8003d96:	6838      	ldr	r0, [r7, #0]
 8003d98:	f7ff fe1a 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003d9c:	4680      	mov	r8, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4619      	mov	r1, r3
 8003da2:	2020      	movs	r0, #32
 8003da4:	f7fc f9e1 	bl	800016a <_ZnwjPv>
 8003da8:	4606      	mov	r6, r0
 8003daa:	4643      	mov	r3, r8
 8003dac:	462a      	mov	r2, r5
 8003dae:	4621      	mov	r1, r4
 8003db0:	4630      	mov	r0, r6
 8003db2:	f7fc fa84 	bl	80002be <_ZN3CLI7CommandC1ERKSt17basic_string_viewIcSt11char_traitsIcEENS_12CommandRolesEPFvvE>
 8003db6:	4633      	mov	r3, r6
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003dc2 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA9_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003dc2:	b5b0      	push	{r4, r5, r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ffbd 	bl	8003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	6838      	ldr	r0, [r7, #0]
 8003dda:	f7fd fba1 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003dde:	4605      	mov	r5, r0
 8003de0:	6a38      	ldr	r0, [r7, #32]
 8003de2:	f7ff fdf5 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003de6:	4603      	mov	r3, r0
 8003de8:	462a      	mov	r2, r5
 8003dea:	4621      	mov	r1, r4
 8003dec:	68b8      	ldr	r0, [r7, #8]
 8003dee:	f7ff ffb9 	bl	8003d64 <_ZSt12construct_atIN3CLI7CommandEJRA9_KcNS0_12CommandRolesERFvvEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003dfc <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA9_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e00:	b08e      	sub	sp, #56	; 0x38
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8003e0c:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE17_M_realloc_insertIJRA9_KcNS0_12CommandRolesERFvvEEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7fe f8dd 	bl	8001fd0 <_ZNKSt6vectorIN3CLI7CommandESaIS1_EE12_M_check_lenEjPKc>
 8003e16:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7fc fff9 	bl	8000e1c <_ZNSt6vectorIN3CLI7CommandESaIS1_EE5beginEv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	f107 0214 	add.w	r2, r7, #20
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe f910 	bl	800205e <_ZN9__gnu_cxxmiIPN3CLI7CommandESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe f91e 	bl	8002088 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE11_M_allocateEj>
 8003e4c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8003e52:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	015b      	lsls	r3, r3, #5
	  _Alloc_traits::construct(this->_M_impl,
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	18d5      	adds	r5, r2, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff77 	bl	8003d50 <_ZSt7forwardIRA9_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8003e62:	4606      	mov	r6, r0
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f7fd fb5b 	bl	8001520 <_ZSt7forwardIN3CLI12CommandRolesEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e6e:	f7ff fdaf 	bl	80039d0 <_ZSt7forwardIRFvvEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e72:	4603      	mov	r3, r0
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4643      	mov	r3, r8
 8003e78:	4632      	mov	r2, r6
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff ffa0 	bl	8003dc2 <_ZNSt16allocator_traitsISaIN3CLI7CommandEEE9constructIS1_JRA9_KcNS0_12CommandRolesERFvvEEEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb4a 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003e90:	4603      	mov	r3, r0
 8003e92:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fb20 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003e9c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea4:	f7fe f904 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003ea8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	3320      	adds	r3, #32
 8003eae:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003eb0:	f107 0308 	add.w	r3, r7, #8
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fb35 	bl	8000524 <_ZNK9__gnu_cxx17__normal_iteratorIPN3CLI7CommandESt6vectorIS2_SaIS2_EEE4baseEv>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fd fb0b 	bl	80014dc <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE19_M_get_Tp_allocatorEv>
 8003ec6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7fe f8ef 	bl	80020b0 <_ZNSt6vectorIN3CLI7CommandESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003ed2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003ed4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	115b      	asrs	r3, r3, #5
      _M_deallocate(__old_start,
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee4:	f7fd fae7 	bl	80014b6 <_ZNSt12_Vector_baseIN3CLI7CommandESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
    }
 8003f00:	bf00      	nop
 8003f02:	3730      	adds	r7, #48	; 0x30
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f0a:	bf00      	nop
 8003f0c:	0800f530 	.word	0x0800f530

08003f10 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d103      	bne.n	8003f32 <_Z41__static_initialization_and_destruction_0ii+0x22>
CommandLineInterpreter cli = 128;
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	4808      	ldr	r0, [pc, #32]	; (8003f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003f2e:	f7fc fa53 	bl	80003d8 <_ZN22CommandLineInterpreterC1Et>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d102      	bne.n	8003f48 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8003f42:	4803      	ldr	r0, [pc, #12]	; (8003f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003f44:	f7fc fa8a 	bl	800045c <_ZN22CommandLineInterpreterD1Ev>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200002e0 	.word	0x200002e0

08003f54 <_GLOBAL__sub_I_on_BLE_data_ready>:
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7ff ffd7 	bl	8003f10 <_Z41__static_initialization_and_destruction_0ii>
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_GLOBAL__sub_D_on_BLE_data_ready>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7ff ffcf 	bl	8003f10 <_Z41__static_initialization_and_destruction_0ii>
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	2100      	movs	r1, #0
 8003f80:	460a      	mov	r2, r1
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	460a      	mov	r2, r1
 8003f86:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8003f8c:	463b      	mov	r3, r7
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <MX_RTC_Init+0xc0>)
 8003f96:	4a28      	ldr	r2, [pc, #160]	; (8004038 <MX_RTC_Init+0xc4>)
 8003f98:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <MX_RTC_Init+0xc0>)
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <MX_RTC_Init+0xc0>)
 8003fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003faa:	4822      	ldr	r0, [pc, #136]	; (8004034 <MX_RTC_Init+0xc0>)
 8003fac:	f003 fffa 	bl	8007fa4 <HAL_RTC_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003fb6:	f7ff fae3 	bl	8003580 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003fc6:	f107 030c 	add.w	r3, r7, #12
 8003fca:	2201      	movs	r2, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4819      	ldr	r0, [pc, #100]	; (8004034 <MX_RTC_Init+0xc0>)
 8003fd0:	f004 f874 	bl	80080bc <HAL_RTC_SetTime>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8003fda:	f7ff fad1 	bl	8003580 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	480f      	ldr	r0, [pc, #60]	; (8004034 <MX_RTC_Init+0xc0>)
 8003ff8:	f004 f9d0 	bl	800839c <HAL_RTC_SetDate>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004002:	f7ff fabd 	bl	8003580 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004006:	2300      	movs	r3, #0
 8004008:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800400a:	2300      	movs	r3, #0
 800400c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800400e:	2300      	movs	r3, #0
 8004010:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004016:	463b      	mov	r3, r7
 8004018:	2201      	movs	r2, #1
 800401a:	4619      	mov	r1, r3
 800401c:	4805      	ldr	r0, [pc, #20]	; (8004034 <MX_RTC_Init+0xc0>)
 800401e:	f004 fa73 	bl	8008508 <HAL_RTC_SetAlarm_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8004028:	f7ff faaa 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000320 	.word	0x20000320
 8004038:	40002800 	.word	0x40002800

0800403c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <HAL_RTC_MspInit+0x5c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d120      	bne.n	8004090 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800404e:	f003 fa21 	bl	8007494 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <HAL_RTC_MspInit+0x60>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4a11      	ldr	r2, [pc, #68]	; (800409c <HAL_RTC_MspInit+0x60>)
 8004058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800405c:	61d3      	str	r3, [r2, #28]
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <HAL_RTC_MspInit+0x60>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RTC_MspInit+0x64>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	2003      	movs	r0, #3
 8004076:	f000 fbb0 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800407a:	2003      	movs	r0, #3
 800407c:	f000 fbc9 	bl	8004812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	2029      	movs	r0, #41	; 0x29
 8004086:	f000 fba8 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800408a:	2029      	movs	r0, #41	; 0x29
 800408c:	f000 fbc1 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40002800 	.word	0x40002800
 800409c:	40021000 	.word	0x40021000
 80040a0:	4242043c 	.word	0x4242043c

080040a4 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e020      	b.n	80040fa <calculate_crc+0x56>
		crc ^= data[i];
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	4053      	eors	r3, r2
 80040c4:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e010      	b.n	80040ee <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 80040cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da06      	bge.n	80040e2 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80040de:	75fb      	strb	r3, [r7, #23]
 80040e0:	e002      	b.n	80040e8 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b07      	cmp	r3, #7
 80040f2:	d9eb      	bls.n	80040cc <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3301      	adds	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d3da      	bcc.n	80040b8 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
	...

08004110 <sht3x_init>:
{
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
}

bool sht3x_init(sht3x_handle_t *handle)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <sht3x_init+0x1e>
 8004122:	4b18      	ldr	r3, [pc, #96]	; (8004184 <sht3x_init+0x74>)
 8004124:	4a18      	ldr	r2, [pc, #96]	; (8004188 <sht3x_init+0x78>)
 8004126:	2138      	movs	r1, #56	; 0x38
 8004128:	4818      	ldr	r0, [pc, #96]	; (800418c <sht3x_init+0x7c>)
 800412a:	f00a f82b 	bl	800e184 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	889b      	ldrh	r3, [r3, #4]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	b299      	uxth	r1, r3
 800413a:	231e      	movs	r3, #30
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	2303      	movs	r3, #3
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2302      	movs	r3, #2
 800414a:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800414e:	f000 fef5 	bl	8004f3c <HAL_I2C_Mem_Read>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8004158:	2300      	movs	r3, #0
 800415a:	e00e      	b.n	800417a <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff ff9e 	bl	80040a4 <calculate_crc>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <sht3x_init+0x68>
		return false;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <sht3x_init+0x6a>
	}

	return true;
 8004178:	2301      	movs	r3, #1
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	0800f564 	.word	0x0800f564
 8004188:	0800f638 	.word	0x0800f638
 800418c:	0800f5a4 	.word	0x0800f5a4

08004190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_MspInit+0x5c>)
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <HAL_MspInit+0x5c>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6193      	str	r3, [r2, #24]
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_MspInit+0x5c>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <HAL_MspInit+0x5c>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <HAL_MspInit+0x5c>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	61d3      	str	r3, [r2, #28]
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <HAL_MspInit+0x5c>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_MspInit+0x60>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_MspInit+0x60>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010000 	.word	0x40010000

080041f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <NMI_Handler+0x4>

080041fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041fe:	e7fe      	b.n	80041fe <HardFault_Handler+0x4>

08004200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004204:	e7fe      	b.n	8004204 <MemManage_Handler+0x4>

08004206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800420a:	e7fe      	b.n	800420a <BusFault_Handler+0x4>

0800420c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004210:	e7fe      	b.n	8004210 <UsageFault_Handler+0x4>

08004212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800423a:	f000 f9db 	bl	80045f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8004248:	4802      	ldr	r0, [pc, #8]	; (8004254 <RTC_IRQHandler+0x10>)
 800424a:	f004 fce9 	bl	8008c20 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000320 	.word	0x20000320

08004258 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800425c:	4802      	ldr	r0, [pc, #8]	; (8004268 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800425e:	f001 fccf 	bl	8005c00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20001024 	.word	0x20001024

0800426c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <USART1_IRQHandler+0x10>)
 8004272:	f004 fd93 	bl	8008d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000338 	.word	0x20000338

08004280 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <RTC_Alarm_IRQHandler+0x10>)
 8004286:	f004 f9f7 	bl	8008678 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000320 	.word	0x20000320

08004294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
	return 1;
 8004298:	2301      	movs	r3, #1
}
 800429a:	4618      	mov	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <_kill>:

int _kill(int pid, int sig)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042ac:	f009 ff88 	bl	800e1c0 <__errno>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2216      	movs	r2, #22
 80042b4:	601a      	str	r2, [r3, #0]
	return -1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_exit>:

void _exit (int status)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042ca:	f04f 31ff 	mov.w	r1, #4294967295
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffe7 	bl	80042a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042d4:	e7fe      	b.n	80042d4 <_exit+0x12>

080042d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e00a      	b.n	80042fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042e8:	f3af 8000 	nop.w
 80042ec:	4601      	mov	r1, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	60ba      	str	r2, [r7, #8]
 80042f4:	b2ca      	uxtb	r2, r1
 80042f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3301      	adds	r3, #1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	dbf0      	blt.n	80042e8 <_read+0x12>
	}

return len;
 8004306:	687b      	ldr	r3, [r7, #4]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e009      	b.n	8004336 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	60ba      	str	r2, [r7, #8]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3301      	adds	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	dbf1      	blt.n	8004322 <_write+0x12>
	}
	return len;
 800433e:	687b      	ldr	r3, [r7, #4]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_close>:

int _close(int file)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	return -1;
 8004350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800436e:	605a      	str	r2, [r3, #4]
	return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <_isatty>:

int _isatty(int file)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	return 1;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <_sbrk+0x5c>)
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <_sbrk+0x60>)
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <_sbrk+0x64>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <_sbrk+0x64>)
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <_sbrk+0x68>)
 80043c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <_sbrk+0x64>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4413      	add	r3, r2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d207      	bcs.n	80043e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043d8:	f009 fef2 	bl	800e1c0 <__errno>
 80043dc:	4603      	mov	r3, r0
 80043de:	220c      	movs	r2, #12
 80043e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	e009      	b.n	80043fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <_sbrk+0x64>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <_sbrk+0x64>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	4a05      	ldr	r2, [pc, #20]	; (800440c <_sbrk+0x64>)
 80043f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043fa:	68fb      	ldr	r3, [r7, #12]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20005000 	.word	0x20005000
 8004408:	00000400 	.word	0x00000400
 800440c:	20000334 	.word	0x20000334
 8004410:	20001548 	.word	0x20001548

08004414 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004426:	4a12      	ldr	r2, [pc, #72]	; (8004470 <MX_USART1_UART_Init+0x50>)
 8004428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9200;
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <MX_USART1_UART_Init+0x4c>)
 800442c:	f242 32f0 	movw	r2, #9200	; 0x23f0
 8004430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <MX_USART1_UART_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004444:	4b09      	ldr	r3, [pc, #36]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004446:	220c      	movs	r2, #12
 8004448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <MX_USART1_UART_Init+0x4c>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004456:	4805      	ldr	r0, [pc, #20]	; (800446c <MX_USART1_UART_Init+0x4c>)
 8004458:	f004 fc2b 	bl	8008cb2 <HAL_UART_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004462:	f7ff f88d 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000338 	.word	0x20000338
 8004470:	40013800 	.word	0x40013800

08004474 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_UART_MspInit+0x9c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d139      	bne.n	8004508 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004494:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <HAL_UART_MspInit+0xa0>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_UART_MspInit+0xa0>)
 800449a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_UART_MspInit+0xa0>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_UART_MspInit+0xa0>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <HAL_UART_MspInit+0xa0>)
 80044b2:	f043 0304 	orr.w	r3, r3, #4
 80044b6:	6193      	str	r3, [r2, #24]
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_UART_MspInit+0xa0>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ce:	2303      	movs	r3, #3
 80044d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d2:	f107 0310 	add.w	r3, r7, #16
 80044d6:	4619      	mov	r1, r3
 80044d8:	480f      	ldr	r0, [pc, #60]	; (8004518 <HAL_UART_MspInit+0xa4>)
 80044da:	f000 fa67 	bl	80049ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	4619      	mov	r1, r3
 80044f2:	4809      	ldr	r0, [pc, #36]	; (8004518 <HAL_UART_MspInit+0xa4>)
 80044f4:	f000 fa5a 	bl	80049ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	2025      	movs	r0, #37	; 0x25
 80044fe:	f000 f96c 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004502:	2025      	movs	r0, #37	; 0x25
 8004504:	f000 f985 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004508:	bf00      	nop
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40013800 	.word	0x40013800
 8004514:	40021000 	.word	0x40021000
 8004518:	40010800 	.word	0x40010800

0800451c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800451c:	f7ff ff7a 	bl	8004414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004520:	480b      	ldr	r0, [pc, #44]	; (8004550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004522:	490c      	ldr	r1, [pc, #48]	; (8004554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004528:	e002      	b.n	8004530 <LoopCopyDataInit>

0800452a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800452a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800452c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800452e:	3304      	adds	r3, #4

08004530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004534:	d3f9      	bcc.n	800452a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004538:	4c09      	ldr	r4, [pc, #36]	; (8004560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800453a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800453c:	e001      	b.n	8004542 <LoopFillZerobss>

0800453e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800453e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004540:	3204      	adds	r2, #4

08004542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004544:	d3fb      	bcc.n	800453e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004546:	f009 fe53 	bl	800e1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800454a:	f7fe fe8f 	bl	800326c <main>
  bx lr
 800454e:	4770      	bx	lr
  ldr r0, =_sdata
 8004550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004554:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004558:	0800f7dc 	.word	0x0800f7dc
  ldr r2, =_sbss
 800455c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004560:	20001548 	.word	0x20001548

08004564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004564:	e7fe      	b.n	8004564 <ADC1_2_IRQHandler>
	...

08004568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <HAL_Init+0x28>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <HAL_Init+0x28>)
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004578:	2003      	movs	r0, #3
 800457a:	f000 f923 	bl	80047c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800457e:	200f      	movs	r0, #15
 8004580:	f000 f808 	bl	8004594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004584:	f7ff fe04 	bl	8004190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000

08004594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_InitTick+0x54>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_InitTick+0x58>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f93b 	bl	800482e <HAL_SYSTICK_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e00e      	b.n	80045e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0f      	cmp	r3, #15
 80045c6:	d80a      	bhi.n	80045de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045c8:	2200      	movs	r2, #0
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f000 f903 	bl	80047da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045d4:	4a06      	ldr	r2, [pc, #24]	; (80045f0 <HAL_InitTick+0x5c>)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20000008 	.word	0x20000008
 80045ec:	20000010 	.word	0x20000010
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_IncTick+0x1c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_IncTick+0x20>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4413      	add	r3, r2
 8004604:	4a03      	ldr	r2, [pc, #12]	; (8004614 <HAL_IncTick+0x20>)
 8004606:	6013      	str	r3, [r2, #0]
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	20000010 	.word	0x20000010
 8004614:	20000380 	.word	0x20000380

08004618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return uwTick;
 800461c:	4b02      	ldr	r3, [pc, #8]	; (8004628 <HAL_GetTick+0x10>)
 800461e:	681b      	ldr	r3, [r3, #0]
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	20000380 	.word	0x20000380

0800462c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	60d3      	str	r3, [r2, #12]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__NVIC_GetPriorityGrouping+0x18>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0307 	and.w	r3, r3, #7
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db0b      	blt.n	80046ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	4906      	ldr	r1, [pc, #24]	; (80046c4 <__NVIC_EnableIRQ+0x34>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2001      	movs	r0, #1
 80046b2:	fa00 f202 	lsl.w	r2, r0, r2
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr
 80046c4:	e000e100 	.word	0xe000e100

080046c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	db0a      	blt.n	80046f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	490c      	ldr	r1, [pc, #48]	; (8004714 <__NVIC_SetPriority+0x4c>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	0112      	lsls	r2, r2, #4
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	440b      	add	r3, r1
 80046ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f0:	e00a      	b.n	8004708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4908      	ldr	r1, [pc, #32]	; (8004718 <__NVIC_SetPriority+0x50>)
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	3b04      	subs	r3, #4
 8004700:	0112      	lsls	r2, r2, #4
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	440b      	add	r3, r1
 8004706:	761a      	strb	r2, [r3, #24]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f1c3 0307 	rsb	r3, r3, #7
 8004736:	2b04      	cmp	r3, #4
 8004738:	bf28      	it	cs
 800473a:	2304      	movcs	r3, #4
 800473c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3304      	adds	r3, #4
 8004742:	2b06      	cmp	r3, #6
 8004744:	d902      	bls.n	800474c <NVIC_EncodePriority+0x30>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3b03      	subs	r3, #3
 800474a:	e000      	b.n	800474e <NVIC_EncodePriority+0x32>
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	f04f 32ff 	mov.w	r2, #4294967295
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	401a      	ands	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004764:	f04f 31ff 	mov.w	r1, #4294967295
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	43d9      	mvns	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	4313      	orrs	r3, r2
         );
}
 8004776:	4618      	mov	r0, r3
 8004778:	3724      	adds	r7, #36	; 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004790:	d301      	bcc.n	8004796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004792:	2301      	movs	r3, #1
 8004794:	e00f      	b.n	80047b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <SysTick_Config+0x40>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479e:	210f      	movs	r1, #15
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	f7ff ff90 	bl	80046c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a8:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <SysTick_Config+0x40>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <SysTick_Config+0x40>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010

080047c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff2d 	bl	800462c <__NVIC_SetPriorityGrouping>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	4603      	mov	r3, r0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047ec:	f7ff ff42 	bl	8004674 <__NVIC_GetPriorityGrouping>
 80047f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	6978      	ldr	r0, [r7, #20]
 80047f8:	f7ff ff90 	bl	800471c <NVIC_EncodePriority>
 80047fc:	4602      	mov	r2, r0
 80047fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff5f 	bl	80046c8 <__NVIC_SetPriority>
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800481c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff35 	bl	8004690 <__NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ffa2 	bl	8004780 <SysTick_Config>
 800483c:	4603      	mov	r3, r0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d008      	beq.n	8004870 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2204      	movs	r2, #4
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e020      	b.n	80048b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 020e 	bic.w	r2, r2, #14
 800487e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	2101      	movs	r1, #1
 800489a:	fa01 f202 	lsl.w	r2, r1, r2
 800489e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d005      	beq.n	80048e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
 80048de:	e051      	b.n	8004984 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020e 	bic.w	r2, r2, #14
 80048ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <HAL_DMA_Abort_IT+0xd4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d029      	beq.n	800495e <HAL_DMA_Abort_IT+0xa2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <HAL_DMA_Abort_IT+0xd8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <HAL_DMA_Abort_IT+0x9e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_DMA_Abort_IT+0xdc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01a      	beq.n	8004954 <HAL_DMA_Abort_IT+0x98>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <HAL_DMA_Abort_IT+0xe0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d012      	beq.n	800494e <HAL_DMA_Abort_IT+0x92>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_DMA_Abort_IT+0xe4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d00a      	beq.n	8004948 <HAL_DMA_Abort_IT+0x8c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <HAL_DMA_Abort_IT+0xe8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d102      	bne.n	8004942 <HAL_DMA_Abort_IT+0x86>
 800493c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004940:	e00e      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 8004942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004946:	e00b      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 8004948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800494c:	e008      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 800494e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004952:	e005      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 8004954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004958:	e002      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 800495a:	2310      	movs	r3, #16
 800495c:	e000      	b.n	8004960 <HAL_DMA_Abort_IT+0xa4>
 800495e:	2301      	movs	r3, #1
 8004960:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HAL_DMA_Abort_IT+0xec>)
 8004962:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
    } 
  }
  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40020008 	.word	0x40020008
 8004994:	4002001c 	.word	0x4002001c
 8004998:	40020030 	.word	0x40020030
 800499c:	40020044 	.word	0x40020044
 80049a0:	40020058 	.word	0x40020058
 80049a4:	4002006c 	.word	0x4002006c
 80049a8:	40020000 	.word	0x40020000

080049ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b08b      	sub	sp, #44	; 0x2c
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049be:	e169      	b.n	8004c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049c0:	2201      	movs	r2, #1
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	429a      	cmp	r2, r3
 80049da:	f040 8158 	bne.w	8004c8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a9a      	ldr	r2, [pc, #616]	; (8004c4c <HAL_GPIO_Init+0x2a0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d05e      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 80049e8:	4a98      	ldr	r2, [pc, #608]	; (8004c4c <HAL_GPIO_Init+0x2a0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d875      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 80049ee:	4a98      	ldr	r2, [pc, #608]	; (8004c50 <HAL_GPIO_Init+0x2a4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d058      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 80049f4:	4a96      	ldr	r2, [pc, #600]	; (8004c50 <HAL_GPIO_Init+0x2a4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d86f      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 80049fa:	4a96      	ldr	r2, [pc, #600]	; (8004c54 <HAL_GPIO_Init+0x2a8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d052      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a00:	4a94      	ldr	r2, [pc, #592]	; (8004c54 <HAL_GPIO_Init+0x2a8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d869      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a06:	4a94      	ldr	r2, [pc, #592]	; (8004c58 <HAL_GPIO_Init+0x2ac>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04c      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a0c:	4a92      	ldr	r2, [pc, #584]	; (8004c58 <HAL_GPIO_Init+0x2ac>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d863      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a12:	4a92      	ldr	r2, [pc, #584]	; (8004c5c <HAL_GPIO_Init+0x2b0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d046      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
 8004a18:	4a90      	ldr	r2, [pc, #576]	; (8004c5c <HAL_GPIO_Init+0x2b0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d85d      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a1e:	2b12      	cmp	r3, #18
 8004a20:	d82a      	bhi.n	8004a78 <HAL_GPIO_Init+0xcc>
 8004a22:	2b12      	cmp	r3, #18
 8004a24:	d859      	bhi.n	8004ada <HAL_GPIO_Init+0x12e>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_GPIO_Init+0x80>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004aa7 	.word	0x08004aa7
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a93 	.word	0x08004a93
 8004a38:	08004ad5 	.word	0x08004ad5
 8004a3c:	08004adb 	.word	0x08004adb
 8004a40:	08004adb 	.word	0x08004adb
 8004a44:	08004adb 	.word	0x08004adb
 8004a48:	08004adb 	.word	0x08004adb
 8004a4c:	08004adb 	.word	0x08004adb
 8004a50:	08004adb 	.word	0x08004adb
 8004a54:	08004adb 	.word	0x08004adb
 8004a58:	08004adb 	.word	0x08004adb
 8004a5c:	08004adb 	.word	0x08004adb
 8004a60:	08004adb 	.word	0x08004adb
 8004a64:	08004adb 	.word	0x08004adb
 8004a68:	08004adb 	.word	0x08004adb
 8004a6c:	08004adb 	.word	0x08004adb
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	4a79      	ldr	r2, [pc, #484]	; (8004c60 <HAL_GPIO_Init+0x2b4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a7e:	e02c      	b.n	8004ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	623b      	str	r3, [r7, #32]
          break;
 8004a86:	e029      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	623b      	str	r3, [r7, #32]
          break;
 8004a90:	e024      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	3308      	adds	r3, #8
 8004a98:	623b      	str	r3, [r7, #32]
          break;
 8004a9a:	e01f      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	623b      	str	r3, [r7, #32]
          break;
 8004aa4:	e01a      	b.n	8004adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004aae:	2304      	movs	r3, #4
 8004ab0:	623b      	str	r3, [r7, #32]
          break;
 8004ab2:	e013      	b.n	8004adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004abc:	2308      	movs	r3, #8
 8004abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	611a      	str	r2, [r3, #16]
          break;
 8004ac6:	e009      	b.n	8004adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ac8:	2308      	movs	r3, #8
 8004aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	615a      	str	r2, [r3, #20]
          break;
 8004ad2:	e003      	b.n	8004adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	623b      	str	r3, [r7, #32]
          break;
 8004ad8:	e000      	b.n	8004adc <HAL_GPIO_Init+0x130>
          break;
 8004ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2bff      	cmp	r3, #255	; 0xff
 8004ae0:	d801      	bhi.n	8004ae6 <HAL_GPIO_Init+0x13a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	e001      	b.n	8004aea <HAL_GPIO_Init+0x13e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2bff      	cmp	r3, #255	; 0xff
 8004af0:	d802      	bhi.n	8004af8 <HAL_GPIO_Init+0x14c>
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	e002      	b.n	8004afe <HAL_GPIO_Init+0x152>
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	3b08      	subs	r3, #8
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	210f      	movs	r1, #15
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	6a39      	ldr	r1, [r7, #32]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80b1 	beq.w	8004c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b2c:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4a4c      	ldr	r2, [pc, #304]	; (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6193      	str	r3, [r2, #24]
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_GPIO_Init+0x2b8>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b44:	4a48      	ldr	r2, [pc, #288]	; (8004c68 <HAL_GPIO_Init+0x2bc>)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <HAL_GPIO_Init+0x2c0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_GPIO_Init+0x1ec>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3f      	ldr	r2, [pc, #252]	; (8004c70 <HAL_GPIO_Init+0x2c4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00d      	beq.n	8004b94 <HAL_GPIO_Init+0x1e8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <HAL_GPIO_Init+0x2c8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <HAL_GPIO_Init+0x1e4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3d      	ldr	r2, [pc, #244]	; (8004c78 <HAL_GPIO_Init+0x2cc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_GPIO_Init+0x1e0>
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e006      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	e004      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e002      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_GPIO_Init+0x1ee>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	f002 0203 	and.w	r2, r2, #3
 8004ba0:	0092      	lsls	r2, r2, #2
 8004ba2:	4093      	lsls	r3, r2
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004baa:	492f      	ldr	r1, [pc, #188]	; (8004c68 <HAL_GPIO_Init+0x2bc>)
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	492c      	ldr	r1, [pc, #176]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
 8004bd0:	e006      	b.n	8004be0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bd2:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	4928      	ldr	r1, [pc, #160]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004bec:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	4922      	ldr	r1, [pc, #136]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60cb      	str	r3, [r1, #12]
 8004bf8:	e006      	b.n	8004c08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	491e      	ldr	r1, [pc, #120]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4918      	ldr	r1, [pc, #96]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	e006      	b.n	8004c30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	4914      	ldr	r1, [pc, #80]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d021      	beq.n	8004c80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	490e      	ldr	r1, [pc, #56]	; (8004c7c <HAL_GPIO_Init+0x2d0>)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	e021      	b.n	8004c8e <HAL_GPIO_Init+0x2e2>
 8004c4a:	bf00      	nop
 8004c4c:	10320000 	.word	0x10320000
 8004c50:	10310000 	.word	0x10310000
 8004c54:	10220000 	.word	0x10220000
 8004c58:	10210000 	.word	0x10210000
 8004c5c:	10120000 	.word	0x10120000
 8004c60:	10110000 	.word	0x10110000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40010c00 	.word	0x40010c00
 8004c74:	40011000 	.word	0x40011000
 8004c78:	40011400 	.word	0x40011400
 8004c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_GPIO_Init+0x304>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4909      	ldr	r1, [pc, #36]	; (8004cb0 <HAL_GPIO_Init+0x304>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	3301      	adds	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f ae8e 	bne.w	80049c0 <HAL_GPIO_Init+0x14>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	372c      	adds	r7, #44	; 0x2c
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e12b      	b.n	8004f1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe fa76 	bl	80031cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	; 0x24
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d18:	f002 ff92 	bl	8007c40 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4a81      	ldr	r2, [pc, #516]	; (8004f28 <HAL_I2C_Init+0x274>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d807      	bhi.n	8004d38 <HAL_I2C_Init+0x84>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a80      	ldr	r2, [pc, #512]	; (8004f2c <HAL_I2C_Init+0x278>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bf94      	ite	ls
 8004d30:	2301      	movls	r3, #1
 8004d32:	2300      	movhi	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e006      	b.n	8004d46 <HAL_I2C_Init+0x92>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a7d      	ldr	r2, [pc, #500]	; (8004f30 <HAL_I2C_Init+0x27c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bf94      	ite	ls
 8004d40:	2301      	movls	r3, #1
 8004d42:	2300      	movhi	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0e7      	b.n	8004f1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a78      	ldr	r2, [pc, #480]	; (8004f34 <HAL_I2C_Init+0x280>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0c9b      	lsrs	r3, r3, #18
 8004d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a6a      	ldr	r2, [pc, #424]	; (8004f28 <HAL_I2C_Init+0x274>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d802      	bhi.n	8004d88 <HAL_I2C_Init+0xd4>
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3301      	adds	r3, #1
 8004d86:	e009      	b.n	8004d9c <HAL_I2C_Init+0xe8>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	4a69      	ldr	r2, [pc, #420]	; (8004f38 <HAL_I2C_Init+0x284>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	430b      	orrs	r3, r1
 8004da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	495c      	ldr	r1, [pc, #368]	; (8004f28 <HAL_I2C_Init+0x274>)
 8004db8:	428b      	cmp	r3, r1
 8004dba:	d819      	bhi.n	8004df0 <HAL_I2C_Init+0x13c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1e59      	subs	r1, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_I2C_Init+0x138>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1e59      	subs	r1, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de4:	3301      	adds	r3, #1
 8004de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dea:	e051      	b.n	8004e90 <HAL_I2C_Init+0x1dc>
 8004dec:	2304      	movs	r3, #4
 8004dee:	e04f      	b.n	8004e90 <HAL_I2C_Init+0x1dc>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d111      	bne.n	8004e1c <HAL_I2C_Init+0x168>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1e58      	subs	r0, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	440b      	add	r3, r1
 8004e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e012      	b.n	8004e42 <HAL_I2C_Init+0x18e>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1e58      	subs	r0, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	0099      	lsls	r1, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Init+0x196>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e022      	b.n	8004e90 <HAL_I2C_Init+0x1dc>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <HAL_I2C_Init+0x1bc>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1e58      	subs	r0, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	440b      	add	r3, r1
 8004e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6e:	e00f      	b.n	8004e90 <HAL_I2C_Init+0x1dc>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1e58      	subs	r0, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	0099      	lsls	r1, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	6809      	ldr	r1, [r1, #0]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6911      	ldr	r1, [r2, #16]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68d2      	ldr	r2, [r2, #12]
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	000186a0 	.word	0x000186a0
 8004f2c:	001e847f 	.word	0x001e847f
 8004f30:	003d08ff 	.word	0x003d08ff
 8004f34:	431bde83 	.word	0x431bde83
 8004f38:	10624dd3 	.word	0x10624dd3

08004f3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	817b      	strh	r3, [r7, #10]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	813b      	strh	r3, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f5a:	f7ff fb5d 	bl	8004618 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	f040 8244 	bne.w	80053f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2319      	movs	r3, #25
 8004f74:	2201      	movs	r2, #1
 8004f76:	4982      	ldr	r1, [pc, #520]	; (8005180 <HAL_I2C_Mem_Read+0x244>)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fb2f 	bl	80055dc <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
 8004f86:	e237      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_I2C_Mem_Read+0x5a>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e230      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d007      	beq.n	8004fbc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2222      	movs	r2, #34	; 0x22
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a62      	ldr	r2, [pc, #392]	; (8005184 <HAL_I2C_Mem_Read+0x248>)
 8004ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ffe:	88f8      	ldrh	r0, [r7, #6]
 8005000:	893a      	ldrh	r2, [r7, #8]
 8005002:	8979      	ldrh	r1, [r7, #10]
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	4603      	mov	r3, r0
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f9fc 	bl	800540c <I2C_RequestMemoryRead>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e1ec      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d113      	bne.n	800504e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e1c0      	b.n	80053d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b01      	cmp	r3, #1
 8005054:	d11e      	bne.n	8005094 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005066:	b672      	cpsid	i
}
 8005068:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005090:	b662      	cpsie	i
}
 8005092:	e035      	b.n	8005100 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	2b02      	cmp	r3, #2
 800509a:	d11e      	bne.n	80050da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050ac:	b672      	cpsid	i
}
 80050ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050d6:	b662      	cpsie	i
}
 80050d8:	e012      	b.n	8005100 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005100:	e166      	b.n	80053d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	2b03      	cmp	r3, #3
 8005108:	f200 811f 	bhi.w	800534a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	2b01      	cmp	r3, #1
 8005112:	d123      	bne.n	800515c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fbc1 	bl	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e167      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800515a:	e139      	b.n	80053d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005160:	2b02      	cmp	r3, #2
 8005162:	d152      	bne.n	800520a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	2200      	movs	r2, #0
 800516c:	4906      	ldr	r1, [pc, #24]	; (8005188 <HAL_I2C_Mem_Read+0x24c>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fa34 	bl	80055dc <I2C_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e13c      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
 800517e:	bf00      	nop
 8005180:	00100002 	.word	0x00100002
 8005184:	ffff0000 	.word	0xffff0000
 8005188:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800518c:	b672      	cpsid	i
}
 800518e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051d2:	b662      	cpsie	i
}
 80051d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005208:	e0e2      	b.n	80053d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	2200      	movs	r2, #0
 8005212:	497b      	ldr	r1, [pc, #492]	; (8005400 <HAL_I2C_Mem_Read+0x4c4>)
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f9e1 	bl	80055dc <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0e9      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005232:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005234:	b672      	cpsid	i
}
 8005236:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800526a:	4b66      	ldr	r3, [pc, #408]	; (8005404 <HAL_I2C_Mem_Read+0x4c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	08db      	lsrs	r3, r3, #3
 8005270:	4a65      	ldr	r2, [pc, #404]	; (8005408 <HAL_I2C_Mem_Read+0x4cc>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	0a1a      	lsrs	r2, r3, #8
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	00da      	lsls	r2, r3, #3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	3b01      	subs	r3, #1
 8005288:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d118      	bne.n	80052c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80052b2:	b662      	cpsie	i
}
 80052b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e09a      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d1d9      	bne.n	8005284 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005312:	b662      	cpsie	i
}
 8005314:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005348:	e042      	b.n	80053d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 faa6 	bl	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e04c      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d118      	bne.n	80053d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f47f ae94 	bne.w	8005102 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e000      	b.n	80053f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
  }
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	00010004 	.word	0x00010004
 8005404:	20000008 	.word	0x20000008
 8005408:	14f8b589 	.word	0x14f8b589

0800540c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	4608      	mov	r0, r1
 8005416:	4611      	mov	r1, r2
 8005418:	461a      	mov	r2, r3
 800541a:	4603      	mov	r3, r0
 800541c:	817b      	strh	r3, [r7, #10]
 800541e:	460b      	mov	r3, r1
 8005420:	813b      	strh	r3, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005434:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005444:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2200      	movs	r2, #0
 800544e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f8c2 	bl	80055dc <I2C_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546c:	d103      	bne.n	8005476 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005474:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e0aa      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005488:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	6a3a      	ldr	r2, [r7, #32]
 800548e:	4952      	ldr	r1, [pc, #328]	; (80055d8 <I2C_RequestMemoryRead+0x1cc>)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f91d 	bl	80056d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e097      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b8:	6a39      	ldr	r1, [r7, #32]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f9a8 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d107      	bne.n	80054de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e076      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d105      	bne.n	80054f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	611a      	str	r2, [r3, #16]
 80054f2:	e021      	b.n	8005538 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	6a39      	ldr	r1, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f982 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00d      	beq.n	800552e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b04      	cmp	r3, #4
 8005518:	d107      	bne.n	800552a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005528:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e050      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552e:	893b      	ldrh	r3, [r7, #8]
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553a:	6a39      	ldr	r1, [r7, #32]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f967 	bl	8005810 <I2C_WaitOnTXEFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	2b04      	cmp	r3, #4
 800554e:	d107      	bne.n	8005560 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e035      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005572:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2200      	movs	r2, #0
 800557c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f82b 	bl	80055dc <I2C_WaitOnFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559a:	d103      	bne.n	80055a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e013      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055a8:	897b      	ldrh	r3, [r7, #10]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	4906      	ldr	r1, [pc, #24]	; (80055d8 <I2C_RequestMemoryRead+0x1cc>)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f886 	bl	80056d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	00010002 	.word	0x00010002

080055dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ec:	e048      	b.n	8005680 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d044      	beq.n	8005680 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7ff f80f 	bl	8004618 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d139      	bne.n	8005680 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10d      	bne.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	43da      	mvns	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	e00c      	b.n	800564c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	43da      	mvns	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d116      	bne.n	8005680 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e023      	b.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10d      	bne.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	43da      	mvns	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4013      	ands	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	e00c      	b.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	43da      	mvns	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4013      	ands	r3, r2
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d093      	beq.n	80055ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056de:	e071      	b.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ee:	d123      	bne.n	8005738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f043 0204 	orr.w	r2, r3, #4
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e067      	b.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d041      	beq.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7fe ff6a 	bl	8004618 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d136      	bne.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10c      	bne.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	e00b      	b.n	8005792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	43da      	mvns	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e021      	b.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10c      	bne.n	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	43da      	mvns	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	e00b      	b.n	8005800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	43da      	mvns	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4013      	ands	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf14      	ite	ne
 80057fa:	2301      	movne	r3, #1
 80057fc:	2300      	moveq	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f af6d 	bne.w	80056e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800581c:	e034      	b.n	8005888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f89b 	bl	800595a <I2C_IsAcknowledgeFailed>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e034      	b.n	8005898 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d028      	beq.n	8005888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fe feef 	bl	8004618 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11d      	bne.n	8005888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d016      	beq.n	8005888 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e007      	b.n	8005898 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005892:	2b80      	cmp	r3, #128	; 0x80
 8005894:	d1c3      	bne.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ac:	e049      	b.n	8005942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d119      	bne.n	80058f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0210 	mvn.w	r2, #16
 80058c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e030      	b.n	8005952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f0:	f7fe fe92 	bl	8004618 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d302      	bcc.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11d      	bne.n	8005942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d016      	beq.n	8005942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e007      	b.n	8005952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d1ae      	bne.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d11b      	bne.n	80059aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800597a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0204 	orr.w	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b8:	b08b      	sub	sp, #44	; 0x2c
 80059ba:	af06      	add	r7, sp, #24
 80059bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0f1      	b.n	8005bac <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f008 f847 	bl	800da70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2203      	movs	r2, #3
 80059e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f003 ff0c 	bl	800980c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	687e      	ldr	r6, [r7, #4]
 80059fc:	466d      	mov	r5, sp
 80059fe:	f106 0410 	add.w	r4, r6, #16
 8005a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	1d33      	adds	r3, r6, #4
 8005a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a0e:	6838      	ldr	r0, [r7, #0]
 8005a10:	f003 fed6 	bl	80097c0 <USB_CoreInit>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0c2      	b.n	8005bac <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f003 ff07 	bl	8009840 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e040      	b.n	8005aba <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	440b      	add	r3, r1
 8005a48:	3301      	adds	r3, #1
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	440b      	add	r3, r1
 8005a72:	3303      	adds	r3, #3
 8005a74:	2200      	movs	r2, #0
 8005a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a78:	7bfa      	ldrb	r2, [r7, #15]
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	440b      	add	r3, r1
 8005a86:	3338      	adds	r3, #56	; 0x38
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	440b      	add	r3, r1
 8005a9a:	333c      	adds	r3, #60	; 0x3c
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	440b      	add	r3, r1
 8005aae:	3340      	adds	r3, #64	; 0x40
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3b9      	bcc.n	8005a38 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e044      	b.n	8005b54 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005aca:	7bfa      	ldrb	r2, [r7, #15]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	440b      	add	r3, r1
 8005ad8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ae0:	7bfa      	ldrb	r2, [r7, #15]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005af6:	7bfa      	ldrb	r2, [r7, #15]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b0c:	7bfa      	ldrb	r2, [r7, #15]
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	440b      	add	r3, r1
 8005b30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b38:	7bfa      	ldrb	r2, [r7, #15]
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	3301      	adds	r3, #1
 8005b52:	73fb      	strb	r3, [r7, #15]
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d3b5      	bcc.n	8005aca <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	687e      	ldr	r6, [r7, #4]
 8005b66:	466d      	mov	r5, sp
 8005b68:	f106 0410 	add.w	r4, r6, #16
 8005b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	1d33      	adds	r3, r6, #4
 8005b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b78:	6838      	ldr	r0, [r7, #0]
 8005b7a:	f003 fe6d 	bl	8009858 <USB_DevInit>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e00d      	b.n	8005bac <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f006 f8ee 	bl	800bd86 <USB_DevDisconnect>

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_PCD_Start+0x16>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e016      	b.n	8005bf8 <HAL_PCD_Start+0x44>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f003 fe02 	bl	80097e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005bdc:	2101      	movs	r1, #1
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f008 f9b9 	bl	800df56 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f006 f8c2 	bl	800bd72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f006 f8c4 	bl	800bd9a <USB_ReadInterrupts>
 8005c12:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fb1b 	bl	800625a <PCD_EP_ISR_Handler>

    return;
 8005c24:	e119      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d013      	beq.n	8005c58 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c42:	b292      	uxth	r2, r2
 8005c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f007 ff8c 	bl	800db66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f905 	bl	8005e60 <HAL_PCD_SetAddress>

    return;
 8005c56:	e100      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c74:	b292      	uxth	r2, r2
 8005c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005c7a:	e0ee      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005c9e:	e0dc      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d027      	beq.n	8005cfa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	b292      	uxth	r2, r2
 8005cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0208 	bic.w	r2, r2, #8
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f007 ff7c 	bl	800dbd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005cf8:	e0af      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8083 	beq.w	8005e0c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e010      	b.n	8005d2e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	7ffb      	ldrb	r3, [r7, #31]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
 8005d1a:	8812      	ldrh	r2, [r2, #0]
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	3320      	adds	r3, #32
 8005d22:	443b      	add	r3, r7
 8005d24:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	2b07      	cmp	r3, #7
 8005d32:	d9eb      	bls.n	8005d0c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	b292      	uxth	r2, r2
 8005d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005d64:	bf00      	nop
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f6      	beq.n	8005d66 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005d90:	2300      	movs	r3, #0
 8005d92:	77fb      	strb	r3, [r7, #31]
 8005d94:	e00f      	b.n	8005db6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	7ffa      	ldrb	r2, [r7, #31]
 8005da0:	0092      	lsls	r2, r2, #2
 8005da2:	440a      	add	r2, r1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	3320      	adds	r3, #32
 8005da8:	443b      	add	r3, r7
 8005daa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005dae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	3301      	adds	r3, #1
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	7ffb      	ldrb	r3, [r7, #31]
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d9ec      	bls.n	8005d96 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005de6:	b292      	uxth	r2, r2
 8005de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0204 	orr.w	r2, r2, #4
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f007 fecd 	bl	800dba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e0a:	e026      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00f      	beq.n	8005e36 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e28:	b292      	uxth	r2, r2
 8005e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f007 fe8b 	bl	800db4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e34:	e011      	b.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e52:	b292      	uxth	r2, r2
 8005e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e58:	bf00      	nop
  }
}
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_PCD_SetAddress+0x1a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e013      	b.n	8005ea2 <HAL_PCD_SetAddress+0x42>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f005 ff5a 	bl	800bd4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	4603      	mov	r3, r0
 8005eba:	70fb      	strb	r3, [r7, #3]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	803b      	strh	r3, [r7, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da0e      	bge.n	8005eee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	705a      	strb	r2, [r3, #1]
 8005eec:	e00e      	b.n	8005f0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 0207 	and.w	r2, r3, #7
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f18:	883a      	ldrh	r2, [r7, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	78ba      	ldrb	r2, [r7, #2]
 8005f22:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d102      	bne.n	8005f30 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_PCD_EP_Open+0x94>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e00e      	b.n	8005f5c <HAL_PCD_EP_Open+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f003 fca3 	bl	8009898 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	da0e      	bge.n	8005f96 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	705a      	strb	r2, [r3, #1]
 8005f94:	e00e      	b.n	8005fb4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	f003 0207 	and.w	r2, r3, #7
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_PCD_EP_Close+0x6a>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e00e      	b.n	8005fec <HAL_PCD_EP_Close+0x88>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f004 f81b 	bl	800a018 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	460b      	mov	r3, r1
 8006002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	f003 0207 	and.w	r2, r3, #7
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2200      	movs	r2, #0
 800602c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	b2da      	uxtb	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6979      	ldr	r1, [r7, #20]
 8006046:	4618      	mov	r0, r3
 8006048:	f004 f9d2 	bl	800a3f0 <USB_EPStartXfer>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	f003 0207 	and.w	r2, r3, #7
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	440b      	add	r3, r1
 8006074:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006078:	681b      	ldr	r3, [r3, #0]
}
 800607a:	4618      	mov	r0, r3
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr

08006084 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	460b      	mov	r3, r1
 8006092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2201      	movs	r2, #1
 80060ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d0:	7afb      	ldrb	r3, [r7, #11]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6979      	ldr	r1, [r7, #20]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f004 f984 	bl	800a3f0 <USB_EPStartXfer>

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060fe:	78fb      	ldrb	r3, [r7, #3]
 8006100:	f003 0207 	and.w	r2, r3, #7
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d901      	bls.n	8006110 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e04c      	b.n	80061aa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	da0e      	bge.n	8006136 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	705a      	strb	r2, [r3, #1]
 8006134:	e00c      	b.n	8006150 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	4413      	add	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_PCD_EP_SetStall+0x7e>
 800616c:	2302      	movs	r3, #2
 800616e:	e01c      	b.n	80061aa <HAL_PCD_EP_SetStall+0xb8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68f9      	ldr	r1, [r7, #12]
 800617e:	4618      	mov	r0, r3
 8006180:	f005 fce7 	bl	800bb52 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d108      	bne.n	80061a0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f005 fe0c 	bl	800bdb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d901      	bls.n	80061d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e040      	b.n	8006252 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da0e      	bge.n	80061f6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4413      	add	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	705a      	strb	r2, [r3, #1]
 80061f4:	e00e      	b.n	8006214 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	f003 0207 	and.w	r2, r3, #7
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	4413      	add	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_PCD_EP_ClrStall+0x82>
 8006230:	2302      	movs	r3, #2
 8006232:	e00e      	b.n	8006252 <HAL_PCD_EP_ClrStall+0xa0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	4618      	mov	r0, r3
 8006244:	f005 fcd5 	bl	800bbf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b096      	sub	sp, #88	; 0x58
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006262:	e3bf      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800626c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800627e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 8179 	bne.w	800657a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	d152      	bne.n	800633a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	81fb      	strh	r3, [r7, #14]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	89fb      	ldrh	r3, [r7, #14]
 80062ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3328      	adds	r3, #40	; 0x28
 80062bc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	3302      	adds	r3, #2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80062ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ec:	695a      	ldr	r2, [r3, #20]
 80062ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	441a      	add	r2, r3
 80062f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80062f8:	2100      	movs	r1, #0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f007 fc0b 	bl	800db16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 836b 	beq.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 8366 	bne.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	b292      	uxth	r2, r2
 800632c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006338:	e354      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006340:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800634c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d034      	beq.n	80063c2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4413      	add	r3, r2
 800636c:	3306      	adds	r3, #6
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006382:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800638e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006390:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006394:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006396:	b29b      	uxth	r3, r3
 8006398:	f005 fd5e 	bl	800be58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063a8:	4013      	ands	r3, r2
 80063aa:	823b      	strh	r3, [r7, #16]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	8a3a      	ldrh	r2, [r7, #16]
 80063b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b6:	b292      	uxth	r2, r2
 80063b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f007 fb7e 	bl	800dabc <HAL_PCD_SetupStageCallback>
 80063c0:	e310      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f280 830c 	bge.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063d8:	4013      	ands	r3, r2
 80063da:	83fb      	strh	r3, [r7, #30]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	8bfa      	ldrh	r2, [r7, #30]
 80063e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063e6:	b292      	uxth	r2, r2
 80063e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	3306      	adds	r3, #6
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d019      	beq.n	8006452 <PCD_EP_ISR_Handler+0x1f8>
 800641e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d015      	beq.n	8006452 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642c:	6959      	ldr	r1, [r3, #20]
 800642e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006430:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006434:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006436:	b29b      	uxth	r3, r3
 8006438:	f005 fd0e 	bl	800be58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800643c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	441a      	add	r2, r3
 8006446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006448:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f007 fb47 	bl	800dae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800645c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 82bd 	bne.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
 800646a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800646e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006476:	f000 82b5 	beq.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006488:	b29b      	uxth	r3, r3
 800648a:	461a      	mov	r2, r3
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	4413      	add	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b3e      	cmp	r3, #62	; 0x3e
 80064b0:	d91d      	bls.n	80064ee <PCD_EP_ISR_Handler+0x294>
 80064b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
 80064ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <PCD_EP_ISR_Handler+0x272>
 80064c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c8:	3b01      	subs	r3, #1
 80064ca:	647b      	str	r3, [r7, #68]	; 0x44
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	029b      	lsls	r3, r3, #10
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	801a      	strh	r2, [r3, #0]
 80064ec:	e026      	b.n	800653c <PCD_EP_ISR_Handler+0x2e2>
 80064ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <PCD_EP_ISR_Handler+0x2b2>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e017      	b.n	800653c <PCD_EP_ISR_Handler+0x2e2>
 800650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <PCD_EP_ISR_Handler+0x2cc>
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	3301      	adds	r3, #1
 8006524:	647b      	str	r3, [r7, #68]	; 0x44
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29a      	uxth	r2, r3
 800652c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652e:	b29b      	uxth	r3, r3
 8006530:	029b      	lsls	r3, r3, #10
 8006532:	b29b      	uxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b29a      	uxth	r2, r3
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654c:	827b      	strh	r3, [r7, #18]
 800654e:	8a7b      	ldrh	r3, [r7, #18]
 8006550:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006554:	827b      	strh	r3, [r7, #18]
 8006556:	8a7b      	ldrh	r3, [r7, #18]
 8006558:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800655c:	827b      	strh	r3, [r7, #18]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	8a7b      	ldrh	r3, [r7, #18]
 8006564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]
 8006578:	e234      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800658e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006592:	2b00      	cmp	r3, #0
 8006594:	f280 80fc 	bge.w	8006790 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80065ae:	4013      	ands	r3, r2
 80065b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80065c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ca:	b292      	uxth	r2, r2
 80065cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4413      	add	r3, r2
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80065e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e6:	7b1b      	ldrb	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d125      	bne.n	8006638 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	3306      	adds	r3, #6
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006614:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006618:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8092 	beq.w	8006746 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006628:	6959      	ldr	r1, [r3, #20]
 800662a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662c:	88da      	ldrh	r2, [r3, #6]
 800662e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006632:	f005 fc11 	bl	800be58 <USB_ReadPMA>
 8006636:	e086      	b.n	8006746 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663a:	78db      	ldrb	r3, [r3, #3]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d10a      	bne.n	8006656 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006640:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006644:	461a      	mov	r2, r3
 8006646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f9d9 	bl	8006a00 <HAL_PCD_EP_DB_Receive>
 800664e:	4603      	mov	r3, r0
 8006650:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006654:	e077      	b.n	8006746 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d024      	beq.n	80066fe <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	3302      	adds	r3, #2
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80066e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02e      	beq.n	8006746 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ee:	6959      	ldr	r1, [r3, #20]
 80066f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f2:	891a      	ldrh	r2, [r3, #8]
 80066f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80066f8:	f005 fbae 	bl	800be58 <USB_ReadPMA>
 80066fc:	e023      	b.n	8006746 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	3306      	adds	r3, #6
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006726:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800672a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006738:	6959      	ldr	r1, [r3, #20]
 800673a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673c:	895a      	ldrh	r2, [r3, #10]
 800673e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006742:	f005 fb89 	bl	800be58 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800674e:	441a      	add	r2, r3
 8006750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006752:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800675c:	441a      	add	r2, r3
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <PCD_EP_ISR_Handler+0x51c>
 800676a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800676e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	429a      	cmp	r2, r3
 8006774:	d206      	bcs.n	8006784 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f007 f9af 	bl	800dae0 <HAL_PCD_DataOutStageCallback>
 8006782:	e005      	b.n	8006790 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800678a:	4618      	mov	r0, r3
 800678c:	f003 fe30 	bl	800a3f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006790:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8123 	beq.w	80069e4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800679e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80067c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80067ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	f040 80a2 	bne.w	800693c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80067f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fa:	2200      	movs	r2, #0
 80067fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80067fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006800:	7b1b      	ldrb	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8093 	beq.w	800692e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006808:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d046      	beq.n	80068a2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d126      	bne.n	800686a <PCD_EP_ISR_Handler+0x610>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800682a:	b29b      	uxth	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	4413      	add	r3, r2
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
 8006834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	011a      	lsls	r2, r3, #4
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	4413      	add	r3, r2
 800683e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800684e:	b29a      	uxth	r2, r3
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006862:	b29a      	uxth	r2, r3
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e061      	b.n	800692e <PCD_EP_ISR_Handler+0x6d4>
 800686a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d15d      	bne.n	800692e <PCD_EP_ISR_Handler+0x6d4>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	4413      	add	r3, r2
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	011a      	lsls	r2, r3, #4
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	4413      	add	r3, r2
 8006894:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2200      	movs	r2, #0
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e045      	b.n	800692e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d126      	bne.n	80068fe <PCD_EP_ISR_Handler+0x6a4>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	4413      	add	r3, r2
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
 80068c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	011a      	lsls	r2, r3, #4
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	4413      	add	r3, r2
 80068d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d6:	633b      	str	r3, [r7, #48]	; 0x30
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	801a      	strh	r2, [r3, #0]
 80068fc:	e017      	b.n	800692e <PCD_EP_ISR_Handler+0x6d4>
 80068fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d113      	bne.n	800692e <PCD_EP_ISR_Handler+0x6d4>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690e:	b29b      	uxth	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006914:	4413      	add	r3, r2
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	011a      	lsls	r2, r3, #4
 800691e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006920:	4413      	add	r3, r2
 8006922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006926:	63bb      	str	r3, [r7, #56]	; 0x38
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2200      	movs	r2, #0
 800692c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f007 f8ee 	bl	800db16 <HAL_PCD_DataInStageCallback>
 800693a:	e053      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800693c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d146      	bne.n	80069d6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4413      	add	r3, r2
 800695c:	3302      	adds	r3, #2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006970:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800697c:	429a      	cmp	r2, r3
 800697e:	d907      	bls.n	8006990 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006988:	1ad2      	subs	r2, r2, r3
 800698a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800698c:	619a      	str	r2, [r3, #24]
 800698e:	e002      	b.n	8006996 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006992:	2200      	movs	r2, #0
 8006994:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800699e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f007 f8b6 	bl	800db16 <HAL_PCD_DataInStageCallback>
 80069aa:	e01b      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80069ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ae:	695a      	ldr	r2, [r3, #20]
 80069b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069b4:	441a      	add	r2, r3
 80069b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80069ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069c2:	441a      	add	r2, r3
 80069c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ce:	4618      	mov	r0, r3
 80069d0:	f003 fd0e 	bl	800a3f0 <USB_EPStartXfer>
 80069d4:	e006      	b.n	80069e4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80069d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069da:	461a      	mov	r2, r3
 80069dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f91b 	bl	8006c1a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	b21b      	sxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f6ff ac37 	blt.w	8006264 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3758      	adds	r7, #88	; 0x58
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d07e      	beq.n	8006b16 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	8b7b      	ldrh	r3, [r7, #26]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d306      	bcc.n	8006a5a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	8b7b      	ldrh	r3, [r7, #26]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	619a      	str	r2, [r3, #24]
 8006a58:	e002      	b.n	8006a60 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d123      	bne.n	8006ab0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	833b      	strh	r3, [r7, #24]
 8006a84:	8b3b      	ldrh	r3, [r7, #24]
 8006a86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a8a:	833b      	strh	r3, [r7, #24]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	441a      	add	r2, r3
 8006a9a:	8b3b      	ldrh	r3, [r7, #24]
 8006a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01f      	beq.n	8006afa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad4:	82fb      	strh	r3, [r7, #22]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8afb      	ldrh	r3, [r7, #22]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006afa:	8b7b      	ldrh	r3, [r7, #26]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8087 	beq.w	8006c10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6959      	ldr	r1, [r3, #20]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	891a      	ldrh	r2, [r3, #8]
 8006b0e:	8b7b      	ldrh	r3, [r7, #26]
 8006b10:	f005 f9a2 	bl	800be58 <USB_ReadPMA>
 8006b14:	e07c      	b.n	8006c10 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	3306      	adds	r3, #6
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	8b7b      	ldrh	r3, [r7, #26]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d306      	bcc.n	8006b58 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	8b7b      	ldrh	r3, [r7, #26]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	619a      	str	r2, [r3, #24]
 8006b56:	e002      	b.n	8006b5e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d123      	bne.n	8006bae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b80:	83fb      	strh	r3, [r7, #30]
 8006b82:	8bfb      	ldrh	r3, [r7, #30]
 8006b84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b88:	83fb      	strh	r3, [r7, #30]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8bfb      	ldrh	r3, [r7, #30]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11f      	bne.n	8006bf8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	83bb      	strh	r3, [r7, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	8bbb      	ldrh	r3, [r7, #28]
 8006be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bf8:	8b7b      	ldrh	r3, [r7, #26]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	6959      	ldr	r1, [r3, #20]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	895a      	ldrh	r2, [r3, #10]
 8006c0a:	8b7b      	ldrh	r3, [r7, #26]
 8006c0c:	f005 f924 	bl	800be58 <USB_ReadPMA>
    }
  }

  return count;
 8006c10:	8b7b      	ldrh	r3, [r7, #26]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b0a4      	sub	sp, #144	; 0x90
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	4613      	mov	r3, r2
 8006c26:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 81dd 	beq.w	8006fee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	3302      	adds	r3, #2
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d907      	bls.n	8006c7c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	619a      	str	r2, [r3, #24]
 8006c7a:	e002      	b.n	8006c82 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 80b9 	bne.w	8006dfe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d126      	bne.n	8006ce2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	4413      	add	r3, r2
 8006caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	011a      	lsls	r2, r3, #4
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	e01a      	b.n	8006d18 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d116      	bne.n	8006d18 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	4413      	add	r3, r2
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	011a      	lsls	r2, r3, #4
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d10:	633b      	str	r3, [r7, #48]	; 0x30
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2200      	movs	r2, #0
 8006d16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d126      	bne.n	8006d74 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	461a      	mov	r2, r3
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	011a      	lsls	r2, r3, #4
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e017      	b.n	8006da4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d113      	bne.n	8006da4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	4413      	add	r3, r2
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	011a      	lsls	r2, r3, #4
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f006 feb3 	bl	800db16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 82fc 	beq.w	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd6:	82fb      	strh	r3, [r7, #22]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	441a      	add	r2, r3
 8006de6:	8afb      	ldrh	r3, [r7, #22]
 8006de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	8013      	strh	r3, [r2, #0]
 8006dfc:	e2da      	b.n	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d021      	beq.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	441a      	add	r2, r3
 8006e34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	f040 82ae 	bne.w	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e60:	441a      	add	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006e6e:	441a      	add	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6a1a      	ldr	r2, [r3, #32]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d30b      	bcc.n	8006e98 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6a1a      	ldr	r2, [r3, #32]
 8006e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	621a      	str	r2, [r3, #32]
 8006e96:	e017      	b.n	8006ec8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d108      	bne.n	8006eb2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006ea0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006eb0:	e00a      	b.n	8006ec8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d165      	bne.n	8006f9c <HAL_PCD_EP_DB_Transmit+0x382>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee4:	4413      	add	r3, r2
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	011a      	lsls	r2, r3, #4
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f0e:	d91d      	bls.n	8006f4c <HAL_PCD_EP_DB_Transmit+0x332>
 8006f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <HAL_PCD_EP_DB_Transmit+0x310>
 8006f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f26:	3b01      	subs	r3, #1
 8006f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	e044      	b.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <HAL_PCD_EP_DB_Transmit+0x350>
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e035      	b.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f80:	3301      	adds	r3, #1
 8006f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4313      	orrs	r3, r2
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e01c      	b.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d118      	bne.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	4413      	add	r3, r2
 8006fba:	647b      	str	r3, [r7, #68]	; 0x44
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	011a      	lsls	r2, r3, #4
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fca:	643b      	str	r3, [r7, #64]	; 0x40
 8006fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	891a      	ldrh	r2, [r3, #8]
 8006fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f004 fef1 	bl	800bdce <USB_WritePMA>
 8006fec:	e1e2      	b.n	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	3306      	adds	r3, #6
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007016:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007022:	429a      	cmp	r2, r3
 8007024:	d307      	bcc.n	8007036 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	619a      	str	r2, [r3, #24]
 8007034:	e002      	b.n	800703c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2200      	movs	r2, #0
 800703a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f040 80c0 	bne.w	80071c6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d126      	bne.n	800709c <HAL_PCD_EP_DB_Transmit+0x482>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007062:	4413      	add	r3, r2
 8007064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	011a      	lsls	r2, r3, #4
 800706c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800706e:	4413      	add	r3, r2
 8007070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007074:	67bb      	str	r3, [r7, #120]	; 0x78
 8007076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007080:	b29a      	uxth	r2, r3
 8007082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007094:	b29a      	uxth	r2, r3
 8007096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e01a      	b.n	80070d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d116      	bne.n	80070d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	667b      	str	r3, [r7, #100]	; 0x64
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b8:	4413      	add	r3, r2
 80070ba:	667b      	str	r3, [r7, #100]	; 0x64
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	011a      	lsls	r2, r3, #4
 80070c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c4:	4413      	add	r3, r2
 80070c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070ca:	663b      	str	r3, [r7, #96]	; 0x60
 80070cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ce:	2200      	movs	r2, #0
 80070d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	677b      	str	r3, [r7, #116]	; 0x74
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d12b      	bne.n	8007138 <HAL_PCD_EP_DB_Transmit+0x51e>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f4:	4413      	add	r3, r2
 80070f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	011a      	lsls	r2, r3, #4
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	4413      	add	r3, r2
 8007102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800710a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007116:	b29a      	uxth	r2, r3
 8007118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800712a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	e017      	b.n	8007168 <HAL_PCD_EP_DB_Transmit+0x54e>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d113      	bne.n	8007168 <HAL_PCD_EP_DB_Transmit+0x54e>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007148:	b29b      	uxth	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714e:	4413      	add	r3, r2
 8007150:	677b      	str	r3, [r7, #116]	; 0x74
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	011a      	lsls	r2, r3, #4
 8007158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800715a:	4413      	add	r3, r2
 800715c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007160:	673b      	str	r3, [r7, #112]	; 0x70
 8007162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007164:	2200      	movs	r2, #0
 8007166:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4619      	mov	r1, r3
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f006 fcd1 	bl	800db16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800717a:	2b00      	cmp	r3, #0
 800717c:	f040 811a 	bne.w	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80071b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	8013      	strh	r3, [r2, #0]
 80071c4:	e0f6      	b.n	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d121      	bne.n	8007214 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800721a:	2b01      	cmp	r3, #1
 800721c:	f040 80ca 	bne.w	80073b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007228:	441a      	add	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	69da      	ldr	r2, [r3, #28]
 8007232:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007236:	441a      	add	r2, r3
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	429a      	cmp	r2, r3
 8007246:	d30b      	bcc.n	8007260 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	621a      	str	r2, [r3, #32]
 800725e:	e017      	b.n	8007290 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800726c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007278:	e00a      	b.n	8007290 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	657b      	str	r3, [r7, #84]	; 0x54
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d165      	bne.n	800736a <HAL_PCD_EP_DB_Transmit+0x750>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b2:	4413      	add	r3, r2
 80072b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	011a      	lsls	r2, r3, #4
 80072bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072be:	4413      	add	r3, r2
 80072c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072da:	2b3e      	cmp	r3, #62	; 0x3e
 80072dc:	d91d      	bls.n	800731a <HAL_PCD_EP_DB_Transmit+0x700>
 80072de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80072f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072f4:	3b01      	subs	r3, #1
 80072f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007300:	b29b      	uxth	r3, r3
 8007302:	029b      	lsls	r3, r3, #10
 8007304:	b29b      	uxth	r3, r3
 8007306:	4313      	orrs	r3, r2
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007312:	b29a      	uxth	r2, r3
 8007314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e041      	b.n	800739e <HAL_PCD_EP_DB_Transmit+0x784>
 800731a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <HAL_PCD_EP_DB_Transmit+0x71e>
 8007322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007330:	b29a      	uxth	r2, r3
 8007332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	e032      	b.n	800739e <HAL_PCD_EP_DB_Transmit+0x784>
 8007338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800733c:	085b      	lsrs	r3, r3, #1
 800733e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_PCD_EP_DB_Transmit+0x738>
 800734c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800734e:	3301      	adds	r3, #1
 8007350:	66bb      	str	r3, [r7, #104]	; 0x68
 8007352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29a      	uxth	r2, r3
 8007358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800735a:	b29b      	uxth	r3, r3
 800735c:	029b      	lsls	r3, r3, #10
 800735e:	b29b      	uxth	r3, r3
 8007360:	4313      	orrs	r3, r2
 8007362:	b29a      	uxth	r2, r3
 8007364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e019      	b.n	800739e <HAL_PCD_EP_DB_Transmit+0x784>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d115      	bne.n	800739e <HAL_PCD_EP_DB_Transmit+0x784>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007380:	4413      	add	r3, r2
 8007382:	657b      	str	r3, [r7, #84]	; 0x54
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	011a      	lsls	r2, r3, #4
 800738a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800738c:	4413      	add	r3, r2
 800738e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
 8007394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007398:	b29a      	uxth	r2, r3
 800739a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6959      	ldr	r1, [r3, #20]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	895a      	ldrh	r2, [r3, #10]
 80073aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f004 fd0d 	bl	800bdce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ce:	82bb      	strh	r3, [r7, #20]
 80073d0:	8abb      	ldrh	r3, [r7, #20]
 80073d2:	f083 0310 	eor.w	r3, r3, #16
 80073d6:	82bb      	strh	r3, [r7, #20]
 80073d8:	8abb      	ldrh	r3, [r7, #20]
 80073da:	f083 0320 	eor.w	r3, r3, #32
 80073de:	82bb      	strh	r3, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	8abb      	ldrh	r3, [r7, #20]
 80073f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007400:	b29b      	uxth	r3, r3
 8007402:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3790      	adds	r7, #144	; 0x90
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800740e:	b480      	push	{r7}
 8007410:	b087      	sub	sp, #28
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	817b      	strh	r3, [r7, #10]
 800741c:	4613      	mov	r3, r2
 800741e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007420:	897b      	ldrh	r3, [r7, #10]
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742c:	897b      	ldrh	r3, [r7, #10]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	e009      	b.n	8007458 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007444:	897a      	ldrh	r2, [r7, #10]
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007458:	893b      	ldrh	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	b29a      	uxth	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	80da      	strh	r2, [r3, #6]
 800746c:	e00b      	b.n	8007486 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2201      	movs	r2, #1
 8007472:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	b29a      	uxth	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0c1b      	lsrs	r3, r3, #16
 8007480:	b29a      	uxth	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	371c      	adds	r7, #28
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr
	...

08007494 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	420e0020 	.word	0x420e0020

080074ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e272      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8087 	beq.w	80075da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074cc:	4b92      	ldr	r3, [pc, #584]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f003 030c 	and.w	r3, r3, #12
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d00c      	beq.n	80074f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074d8:	4b8f      	ldr	r3, [pc, #572]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d112      	bne.n	800750a <HAL_RCC_OscConfig+0x5e>
 80074e4:	4b8c      	ldr	r3, [pc, #560]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f0:	d10b      	bne.n	800750a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f2:	4b89      	ldr	r3, [pc, #548]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d06c      	beq.n	80075d8 <HAL_RCC_OscConfig+0x12c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d168      	bne.n	80075d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e24c      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x76>
 8007514:	4b80      	ldr	r3, [pc, #512]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a7f      	ldr	r2, [pc, #508]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e02e      	b.n	8007580 <HAL_RCC_OscConfig+0xd4>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x98>
 800752a:	4b7b      	ldr	r3, [pc, #492]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7a      	ldr	r2, [pc, #488]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b78      	ldr	r3, [pc, #480]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a77      	ldr	r2, [pc, #476]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800753c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e01d      	b.n	8007580 <HAL_RCC_OscConfig+0xd4>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800754c:	d10c      	bne.n	8007568 <HAL_RCC_OscConfig+0xbc>
 800754e:	4b72      	ldr	r3, [pc, #456]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a71      	ldr	r2, [pc, #452]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	4b6f      	ldr	r3, [pc, #444]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a6e      	ldr	r2, [pc, #440]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e00b      	b.n	8007580 <HAL_RCC_OscConfig+0xd4>
 8007568:	4b6b      	ldr	r3, [pc, #428]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a6a      	ldr	r2, [pc, #424]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800756e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	4b68      	ldr	r3, [pc, #416]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a67      	ldr	r2, [pc, #412]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800757a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800757e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d013      	beq.n	80075b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007588:	f7fd f846 	bl	8004618 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007590:	f7fd f842 	bl	8004618 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b64      	cmp	r3, #100	; 0x64
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e200      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	4b5d      	ldr	r3, [pc, #372]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0f0      	beq.n	8007590 <HAL_RCC_OscConfig+0xe4>
 80075ae:	e014      	b.n	80075da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b0:	f7fd f832 	bl	8004618 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fd f82e 	bl	8004618 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e1ec      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ca:	4b53      	ldr	r3, [pc, #332]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f0      	bne.n	80075b8 <HAL_RCC_OscConfig+0x10c>
 80075d6:	e000      	b.n	80075da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d063      	beq.n	80076ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075e6:	4b4c      	ldr	r3, [pc, #304]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f003 030c 	and.w	r3, r3, #12
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80075f2:	4b49      	ldr	r3, [pc, #292]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b08      	cmp	r3, #8
 80075fc:	d11c      	bne.n	8007638 <HAL_RCC_OscConfig+0x18c>
 80075fe:	4b46      	ldr	r3, [pc, #280]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d116      	bne.n	8007638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800760a:	4b43      	ldr	r3, [pc, #268]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_RCC_OscConfig+0x176>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d001      	beq.n	8007622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e1c0      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007622:	4b3d      	ldr	r3, [pc, #244]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4939      	ldr	r1, [pc, #228]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007636:	e03a      	b.n	80076ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d020      	beq.n	8007682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007640:	4b36      	ldr	r3, [pc, #216]	; (800771c <HAL_RCC_OscConfig+0x270>)
 8007642:	2201      	movs	r2, #1
 8007644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007646:	f7fc ffe7 	bl	8004618 <HAL_GetTick>
 800764a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764c:	e008      	b.n	8007660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800764e:	f7fc ffe3 	bl	8004618 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e1a1      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007660:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0f0      	beq.n	800764e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800766c:	4b2a      	ldr	r3, [pc, #168]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4927      	ldr	r1, [pc, #156]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	600b      	str	r3, [r1, #0]
 8007680:	e015      	b.n	80076ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007682:	4b26      	ldr	r3, [pc, #152]	; (800771c <HAL_RCC_OscConfig+0x270>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007688:	f7fc ffc6 	bl	8004618 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007690:	f7fc ffc2 	bl	8004618 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e180      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076a2:	4b1d      	ldr	r3, [pc, #116]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0308 	and.w	r3, r3, #8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d03a      	beq.n	8007730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d019      	beq.n	80076f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <HAL_RCC_OscConfig+0x274>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c8:	f7fc ffa6 	bl	8004618 <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d0:	f7fc ffa2 	bl	8004618 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e160      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e2:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <HAL_RCC_OscConfig+0x26c>)
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f0      	beq.n	80076d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80076ee:	2001      	movs	r0, #1
 80076f0:	f000 face 	bl	8007c90 <RCC_Delay>
 80076f4:	e01c      	b.n	8007730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f6:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <HAL_RCC_OscConfig+0x274>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076fc:	f7fc ff8c 	bl	8004618 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007702:	e00f      	b.n	8007724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007704:	f7fc ff88 	bl	8004618 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d908      	bls.n	8007724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e146      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
 8007716:	bf00      	nop
 8007718:	40021000 	.word	0x40021000
 800771c:	42420000 	.word	0x42420000
 8007720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007724:	4b92      	ldr	r3, [pc, #584]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e9      	bne.n	8007704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80a6 	beq.w	800788a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007742:	4b8b      	ldr	r3, [pc, #556]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10d      	bne.n	800776a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774e:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	4a87      	ldr	r2, [pc, #540]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007758:	61d3      	str	r3, [r2, #28]
 800775a:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800776a:	4b82      	ldr	r3, [pc, #520]	; (8007974 <HAL_RCC_OscConfig+0x4c8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d118      	bne.n	80077a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007776:	4b7f      	ldr	r3, [pc, #508]	; (8007974 <HAL_RCC_OscConfig+0x4c8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a7e      	ldr	r2, [pc, #504]	; (8007974 <HAL_RCC_OscConfig+0x4c8>)
 800777c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007782:	f7fc ff49 	bl	8004618 <HAL_GetTick>
 8007786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007788:	e008      	b.n	800779c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778a:	f7fc ff45 	bl	8004618 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b64      	cmp	r3, #100	; 0x64
 8007796:	d901      	bls.n	800779c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e103      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800779c:	4b75      	ldr	r3, [pc, #468]	; (8007974 <HAL_RCC_OscConfig+0x4c8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0f0      	beq.n	800778a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d106      	bne.n	80077be <HAL_RCC_OscConfig+0x312>
 80077b0:	4b6f      	ldr	r3, [pc, #444]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	4a6e      	ldr	r2, [pc, #440]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6213      	str	r3, [r2, #32]
 80077bc:	e02d      	b.n	800781a <HAL_RCC_OscConfig+0x36e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10c      	bne.n	80077e0 <HAL_RCC_OscConfig+0x334>
 80077c6:	4b6a      	ldr	r3, [pc, #424]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	4a69      	ldr	r2, [pc, #420]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077cc:	f023 0301 	bic.w	r3, r3, #1
 80077d0:	6213      	str	r3, [r2, #32]
 80077d2:	4b67      	ldr	r3, [pc, #412]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	4a66      	ldr	r2, [pc, #408]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077d8:	f023 0304 	bic.w	r3, r3, #4
 80077dc:	6213      	str	r3, [r2, #32]
 80077de:	e01c      	b.n	800781a <HAL_RCC_OscConfig+0x36e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b05      	cmp	r3, #5
 80077e6:	d10c      	bne.n	8007802 <HAL_RCC_OscConfig+0x356>
 80077e8:	4b61      	ldr	r3, [pc, #388]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	4a60      	ldr	r2, [pc, #384]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077ee:	f043 0304 	orr.w	r3, r3, #4
 80077f2:	6213      	str	r3, [r2, #32]
 80077f4:	4b5e      	ldr	r3, [pc, #376]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	4a5d      	ldr	r2, [pc, #372]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	6213      	str	r3, [r2, #32]
 8007800:	e00b      	b.n	800781a <HAL_RCC_OscConfig+0x36e>
 8007802:	4b5b      	ldr	r3, [pc, #364]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	4a5a      	ldr	r2, [pc, #360]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	6213      	str	r3, [r2, #32]
 800780e:	4b58      	ldr	r3, [pc, #352]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	4a57      	ldr	r2, [pc, #348]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007814:	f023 0304 	bic.w	r3, r3, #4
 8007818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d015      	beq.n	800784e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007822:	f7fc fef9 	bl	8004618 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007828:	e00a      	b.n	8007840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800782a:	f7fc fef5 	bl	8004618 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	f241 3288 	movw	r2, #5000	; 0x1388
 8007838:	4293      	cmp	r3, r2
 800783a:	d901      	bls.n	8007840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e0b1      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007840:	4b4b      	ldr	r3, [pc, #300]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0ee      	beq.n	800782a <HAL_RCC_OscConfig+0x37e>
 800784c:	e014      	b.n	8007878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800784e:	f7fc fee3 	bl	8004618 <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007854:	e00a      	b.n	800786c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007856:	f7fc fedf 	bl	8004618 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	4293      	cmp	r3, r2
 8007866:	d901      	bls.n	800786c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e09b      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800786c:	4b40      	ldr	r3, [pc, #256]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1ee      	bne.n	8007856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d105      	bne.n	800788a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800787e:	4b3c      	ldr	r3, [pc, #240]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	4a3b      	ldr	r2, [pc, #236]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8087 	beq.w	80079a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007894:	4b36      	ldr	r3, [pc, #216]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f003 030c 	and.w	r3, r3, #12
 800789c:	2b08      	cmp	r3, #8
 800789e:	d061      	beq.n	8007964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d146      	bne.n	8007936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a8:	4b33      	ldr	r3, [pc, #204]	; (8007978 <HAL_RCC_OscConfig+0x4cc>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ae:	f7fc feb3 	bl	8004618 <HAL_GetTick>
 80078b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b6:	f7fc feaf 	bl	8004618 <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e06d      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078c8:	4b29      	ldr	r3, [pc, #164]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d108      	bne.n	80078f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	4921      	ldr	r1, [pc, #132]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078f0:	4b1f      	ldr	r3, [pc, #124]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a19      	ldr	r1, [r3, #32]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	430b      	orrs	r3, r1
 8007902:	491b      	ldr	r1, [pc, #108]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007904:	4313      	orrs	r3, r2
 8007906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007908:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <HAL_RCC_OscConfig+0x4cc>)
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800790e:	f7fc fe83 	bl	8004618 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007916:	f7fc fe7f 	bl	8004618 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e03d      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007928:	4b11      	ldr	r3, [pc, #68]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x46a>
 8007934:	e035      	b.n	80079a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <HAL_RCC_OscConfig+0x4cc>)
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793c:	f7fc fe6c 	bl	8004618 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fc fe68 	bl	8004618 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e026      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <HAL_RCC_OscConfig+0x4c4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x498>
 8007962:	e01e      	b.n	80079a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d107      	bne.n	800797c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e019      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
 8007970:	40021000 	.word	0x40021000
 8007974:	40007000 	.word	0x40007000
 8007978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800797c:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <HAL_RCC_OscConfig+0x500>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	429a      	cmp	r2, r3
 800798e:	d106      	bne.n	800799e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800799a:	429a      	cmp	r2, r3
 800799c:	d001      	beq.n	80079a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40021000 	.word	0x40021000

080079b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0d0      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079c4:	4b6a      	ldr	r3, [pc, #424]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d910      	bls.n	80079f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d2:	4b67      	ldr	r3, [pc, #412]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 0207 	bic.w	r2, r3, #7
 80079da:	4965      	ldr	r1, [pc, #404]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e2:	4b63      	ldr	r3, [pc, #396]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e0b8      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d020      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a0c:	4b59      	ldr	r3, [pc, #356]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	4a58      	ldr	r2, [pc, #352]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a24:	4b53      	ldr	r3, [pc, #332]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a52      	ldr	r2, [pc, #328]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a30:	4b50      	ldr	r3, [pc, #320]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	494d      	ldr	r1, [pc, #308]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d040      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d107      	bne.n	8007a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a56:	4b47      	ldr	r3, [pc, #284]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d115      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e07f      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6e:	4b41      	ldr	r3, [pc, #260]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e073      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7e:	4b3d      	ldr	r3, [pc, #244]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e06b      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a8e:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f023 0203 	bic.w	r2, r3, #3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4936      	ldr	r1, [pc, #216]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007aa0:	f7fc fdba 	bl	8004618 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aa6:	e00a      	b.n	8007abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa8:	f7fc fdb6 	bl	8004618 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e053      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	4b2d      	ldr	r3, [pc, #180]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f003 020c 	and.w	r2, r3, #12
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d1eb      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d210      	bcs.n	8007b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f023 0207 	bic.w	r2, r3, #7
 8007ae6:	4922      	ldr	r1, [pc, #136]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d001      	beq.n	8007b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e032      	b.n	8007b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b0c:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4916      	ldr	r1, [pc, #88]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	490e      	ldr	r1, [pc, #56]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b3e:	f000 f821 	bl	8007b84 <HAL_RCC_GetSysClockFreq>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	091b      	lsrs	r3, r3, #4
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	490a      	ldr	r1, [pc, #40]	; (8007b78 <HAL_RCC_ClockConfig+0x1c8>)
 8007b50:	5ccb      	ldrb	r3, [r1, r3]
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <HAL_RCC_ClockConfig+0x1cc>)
 8007b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <HAL_RCC_ClockConfig+0x1d0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fc fd18 	bl	8004594 <HAL_InitTick>

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40022000 	.word	0x40022000
 8007b74:	40021000 	.word	0x40021000
 8007b78:	0800f644 	.word	0x0800f644
 8007b7c:	20000008 	.word	0x20000008
 8007b80:	2000000c 	.word	0x2000000c

08007b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60bb      	str	r3, [r7, #8]
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d002      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d003      	beq.n	8007bba <HAL_RCC_GetSysClockFreq+0x36>
 8007bb2:	e027      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8007bb6:	613b      	str	r3, [r7, #16]
      break;
 8007bb8:	e027      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	0c9b      	lsrs	r3, r3, #18
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007bc4:	5cd3      	ldrb	r3, [r2, r3]
 8007bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d010      	beq.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	0c5b      	lsrs	r3, r3, #17
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007bde:	5cd3      	ldrb	r3, [r2, r3]
 8007be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8007be6:	fb03 f202 	mul.w	r2, r3, r2
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e004      	b.n	8007bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	613b      	str	r3, [r7, #16]
      break;
 8007c02:	e002      	b.n	8007c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8007c06:	613b      	str	r3, [r7, #16]
      break;
 8007c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c0a:	693b      	ldr	r3, [r7, #16]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	007a1200 	.word	0x007a1200
 8007c20:	0800f65c 	.word	0x0800f65c
 8007c24:	0800f66c 	.word	0x0800f66c
 8007c28:	003d0900 	.word	0x003d0900

08007c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8007c32:	681b      	ldr	r3, [r3, #0]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr
 8007c3c:	20000008 	.word	0x20000008

08007c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c44:	f7ff fff2 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	0a1b      	lsrs	r3, r3, #8
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	4903      	ldr	r1, [pc, #12]	; (8007c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c56:	5ccb      	ldrb	r3, [r1, r3]
 8007c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	40021000 	.word	0x40021000
 8007c64:	0800f654 	.word	0x0800f654

08007c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c6c:	f7ff ffde 	bl	8007c2c <HAL_RCC_GetHCLKFreq>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	0adb      	lsrs	r3, r3, #11
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	4903      	ldr	r1, [pc, #12]	; (8007c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	0800f654 	.word	0x0800f654

08007c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <RCC_Delay+0x34>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <RCC_Delay+0x38>)
 8007c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca2:	0a5b      	lsrs	r3, r3, #9
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007cac:	bf00      	nop
  }
  while (Delay --);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1e5a      	subs	r2, r3, #1
 8007cb2:	60fa      	str	r2, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f9      	bne.n	8007cac <RCC_Delay+0x1c>
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr
 8007cc4:	20000008 	.word	0x20000008
 8007cc8:	10624dd3 	.word	0x10624dd3

08007ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d07d      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cec:	4b4f      	ldr	r3, [pc, #316]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf8:	4b4c      	ldr	r3, [pc, #304]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4a4b      	ldr	r2, [pc, #300]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d02:	61d3      	str	r3, [r2, #28]
 8007d04:	4b49      	ldr	r3, [pc, #292]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d10:	2301      	movs	r3, #1
 8007d12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d14:	4b46      	ldr	r3, [pc, #280]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d118      	bne.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d20:	4b43      	ldr	r3, [pc, #268]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a42      	ldr	r2, [pc, #264]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d2c:	f7fc fc74 	bl	8004618 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d32:	e008      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d34:	f7fc fc70 	bl	8004618 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b64      	cmp	r3, #100	; 0x64
 8007d40:	d901      	bls.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e06d      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d46:	4b3a      	ldr	r3, [pc, #232]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d52:	4b36      	ldr	r3, [pc, #216]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02e      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d027      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d70:	4b2e      	ldr	r3, [pc, #184]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d7a:	4b2e      	ldr	r3, [pc, #184]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d80:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d86:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d014      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d96:	f7fc fc3f 	bl	8004618 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d9c:	e00a      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d9e:	f7fc fc3b 	bl	8004618 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e036      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db4:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0ee      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc0:	4b1a      	ldr	r3, [pc, #104]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4917      	ldr	r1, [pc, #92]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007df0:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	490b      	ldr	r1, [pc, #44]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0310 	and.w	r3, r3, #16
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d008      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	4904      	ldr	r1, [pc, #16]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40007000 	.word	0x40007000
 8007e34:	42420440 	.word	0x42420440

08007e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	2300      	movs	r3, #0
 8007e46:	61fb      	str	r3, [r7, #28]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	2300      	movs	r3, #0
 8007e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d00a      	beq.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b10      	cmp	r3, #16
 8007e5e:	f200 808a 	bhi.w	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d045      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d075      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007e6e:	e082      	b.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007e70:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007e76:	4b45      	ldr	r3, [pc, #276]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07b      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	0c9b      	lsrs	r3, r3, #18
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	4a41      	ldr	r2, [pc, #260]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007e8c:	5cd3      	ldrb	r3, [r2, r3]
 8007e8e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d015      	beq.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e9a:	4b3c      	ldr	r3, [pc, #240]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	0c5b      	lsrs	r3, r3, #17
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	4a3b      	ldr	r2, [pc, #236]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007ea6:	5cd3      	ldrb	r3, [r2, r3]
 8007ea8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007eb4:	4a38      	ldr	r2, [pc, #224]	; (8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	fb02 f303 	mul.w	r3, r2, r3
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e004      	b.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4a34      	ldr	r2, [pc, #208]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007eca:	fb02 f303 	mul.w	r3, r2, r3
 8007ece:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007ed0:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007edc:	d102      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	61bb      	str	r3, [r7, #24]
      break;
 8007ee2:	e04a      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4a2d      	ldr	r2, [pc, #180]	; (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	61bb      	str	r3, [r7, #24]
      break;
 8007ef2:	e042      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007ef4:	4b25      	ldr	r3, [pc, #148]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f04:	d108      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	e01f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f22:	d109      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007f30:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	e00f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f42:	d11c      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d016      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007f50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007f54:	61bb      	str	r3, [r7, #24]
      break;
 8007f56:	e012      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007f58:	e011      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007f5a:	f7ff fe85 	bl	8007c68 <HAL_RCC_GetPCLK2Freq>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	0b9b      	lsrs	r3, r3, #14
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	61bb      	str	r3, [r7, #24]
      break;
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007f7e:	bf00      	nop
    }
  }
  return (frequency);
 8007f80:	69bb      	ldr	r3, [r7, #24]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	0800f670 	.word	0x0800f670
 8007f94:	0800f680 	.word	0x0800f680
 8007f98:	007a1200 	.word	0x007a1200
 8007f9c:	003d0900 	.word	0x003d0900
 8007fa0:	aaaaaaab 	.word	0xaaaaaaab

08007fa4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e07a      	b.n	80080b0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7c5b      	ldrb	r3, [r3, #17]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7fc f836 	bl	800403c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb81 	bl	80086de <HAL_RTC_WaitForSynchro>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e061      	b.n	80080b0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc3a 	bl	8008866 <RTC_EnterInitMode>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e056      	b.n	80080b0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0207 	bic.w	r2, r2, #7
 8008010:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800801a:	4b27      	ldr	r3, [pc, #156]	; (80080b8 <HAL_RTC_Init+0x114>)
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	4a26      	ldr	r2, [pc, #152]	; (80080b8 <HAL_RTC_Init+0x114>)
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8008026:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <HAL_RTC_Init+0x114>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	4921      	ldr	r1, [pc, #132]	; (80080b8 <HAL_RTC_Init+0x114>)
 8008034:	4313      	orrs	r3, r2
 8008036:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d003      	beq.n	800804a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e00e      	b.n	8008068 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800804a:	2001      	movs	r0, #1
 800804c:	f7ff fef4 	bl	8007e38 <HAL_RCCEx_GetPeriphCLKFreq>
 8008050:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2204      	movs	r2, #4
 800805c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e026      	b.n	80080b0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3b01      	subs	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	0c1a      	lsrs	r2, r3, #16
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f002 020f 	and.w	r2, r2, #15
 8008074:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	b292      	uxth	r2, r2
 800807e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc18 	bl	80088b6 <RTC_ExitInitMode>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2204      	movs	r2, #4
 8008090:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e00c      	b.n	80080b0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80080ae:	2300      	movs	r3, #0
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40006c00 	.word	0x40006c00

080080bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	2300      	movs	r3, #0
 80080ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_RTC_SetTime+0x20>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e080      	b.n	80081e2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	7c1b      	ldrb	r3, [r3, #16]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d101      	bne.n	80080ec <HAL_RTC_SetTime+0x30>
 80080e8:	2302      	movs	r3, #2
 80080ea:	e07a      	b.n	80081e2 <HAL_RTC_SetTime+0x126>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2201      	movs	r2, #1
 80080f0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2202      	movs	r2, #2
 80080f6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d113      	bne.n	8008126 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008108:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	4619      	mov	r1, r3
 8008112:	460b      	mov	r3, r1
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	1a5b      	subs	r3, r3, r1
 8008118:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800811a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8008120:	4413      	add	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e01e      	b.n	8008164 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fc08 	bl	8008940 <RTC_Bcd2ToByte>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008138:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fbfd 	bl	8008940 <RTC_Bcd2ToByte>
 8008146:	4603      	mov	r3, r0
 8008148:	461a      	mov	r2, r3
 800814a:	4613      	mov	r3, r2
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008152:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	789b      	ldrb	r3, [r3, #2]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fbf1 	bl	8008940 <RTC_Bcd2ToByte>
 800815e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8008160:	4423      	add	r3, r4
 8008162:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008164:	6979      	ldr	r1, [r7, #20]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 fb16 	bl	8008798 <RTC_WriteTimeCounter>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2204      	movs	r2, #4
 8008176:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e02f      	b.n	80081e2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0205 	bic.w	r2, r2, #5
 8008190:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fb27 	bl	80087e6 <RTC_ReadAlarmCounter>
 8008198:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d018      	beq.n	80081d4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d214      	bcs.n	80081d4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80081b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80081b4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80081b6:	6939      	ldr	r1, [r7, #16]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fb2d 	bl	8008818 <RTC_WriteAlarmCounter>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2204      	movs	r2, #4
 80081c8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e006      	b.n	80081e2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80081e0:	2300      	movs	r3, #0
  }
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd90      	pop	{r4, r7, pc}
	...

080081ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	2300      	movs	r3, #0
 80081fe:	61fb      	str	r3, [r7, #28]
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	2300      	movs	r3, #0
 8008206:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_RTC_GetTime+0x28>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e0b5      	b.n	8008384 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e0ac      	b.n	8008384 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 fa84 	bl	8008738 <RTC_ReadTimeCounter>
 8008230:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	4a55      	ldr	r2, [pc, #340]	; (800838c <HAL_RTC_GetTime+0x1a0>)
 8008236:	fba2 2303 	umull	r2, r3, r2, r3
 800823a:	0adb      	lsrs	r3, r3, #11
 800823c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	4b52      	ldr	r3, [pc, #328]	; (800838c <HAL_RTC_GetTime+0x1a0>)
 8008242:	fba3 1302 	umull	r1, r3, r3, r2
 8008246:	0adb      	lsrs	r3, r3, #11
 8008248:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	4a4f      	ldr	r2, [pc, #316]	; (8008390 <HAL_RTC_GetTime+0x1a4>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	b2da      	uxtb	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	4a4a      	ldr	r2, [pc, #296]	; (800838c <HAL_RTC_GetTime+0x1a0>)
 8008264:	fba2 1203 	umull	r1, r2, r2, r3
 8008268:	0ad2      	lsrs	r2, r2, #11
 800826a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800826e:	fb01 f202 	mul.w	r2, r1, r2
 8008272:	1a9a      	subs	r2, r3, r2
 8008274:	4b46      	ldr	r3, [pc, #280]	; (8008390 <HAL_RTC_GetTime+0x1a4>)
 8008276:	fba3 1302 	umull	r1, r3, r3, r2
 800827a:	0959      	lsrs	r1, r3, #5
 800827c:	460b      	mov	r3, r1
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a5b      	subs	r3, r3, r1
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	1ad1      	subs	r1, r2, r3
 8008286:	b2ca      	uxtb	r2, r1
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b17      	cmp	r3, #23
 8008290:	d955      	bls.n	800833e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4a3f      	ldr	r2, [pc, #252]	; (8008394 <HAL_RTC_GetTime+0x1a8>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800829e:	6939      	ldr	r1, [r7, #16]
 80082a0:	4b3c      	ldr	r3, [pc, #240]	; (8008394 <HAL_RTC_GetTime+0x1a8>)
 80082a2:	fba3 2301 	umull	r2, r3, r3, r1
 80082a6:	091a      	lsrs	r2, r3, #4
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	1aca      	subs	r2, r1, r3
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fa94 	bl	80087e6 <RTC_ReadAlarmCounter>
 80082be:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d008      	beq.n	80082da <HAL_RTC_GetTime+0xee>
 80082c8:	69fa      	ldr	r2, [r7, #28]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d904      	bls.n	80082da <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e002      	b.n	80082e0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80082da:	f04f 33ff 	mov.w	r3, #4294967295
 80082de:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	4a2d      	ldr	r2, [pc, #180]	; (8008398 <HAL_RTC_GetTime+0x1ac>)
 80082e4:	fb02 f303 	mul.w	r3, r2, r3
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80082ee:	69b9      	ldr	r1, [r7, #24]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fa51 	bl	8008798 <RTC_WriteTimeCounter>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e041      	b.n	8008384 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008306:	d00c      	beq.n	8008322 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	4413      	add	r3, r2
 800830e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008310:	69f9      	ldr	r1, [r7, #28]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fa80 	bl	8008818 <RTC_WriteAlarmCounter>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e030      	b.n	8008384 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008322:	69f9      	ldr	r1, [r7, #28]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fa77 	bl	8008818 <RTC_WriteAlarmCounter>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e027      	b.n	8008384 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 fb1f 	bl	800897a <RTC_DateUpdate>
 800833c:	e003      	b.n	8008346 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	b2da      	uxtb	r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01a      	beq.n	8008382 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fad8 	bl	8008906 <RTC_ByteToBcd2>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 facf 	bl	8008906 <RTC_ByteToBcd2>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fac6 	bl	8008906 <RTC_ByteToBcd2>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	91a2b3c5 	.word	0x91a2b3c5
 8008390:	88888889 	.word	0x88888889
 8008394:	aaaaaaab 	.word	0xaaaaaaab
 8008398:	00015180 	.word	0x00015180

0800839c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <HAL_RTC_SetDate+0x24>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e097      	b.n	80084f4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	7c1b      	ldrb	r3, [r3, #16]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_RTC_SetDate+0x34>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e091      	b.n	80084f4 <HAL_RTC_SetDate+0x158>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10c      	bne.n	80083fc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	78da      	ldrb	r2, [r3, #3]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	785a      	ldrb	r2, [r3, #1]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	789a      	ldrb	r2, [r3, #2]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	739a      	strb	r2, [r3, #14]
 80083fa:	e01a      	b.n	8008432 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	78db      	ldrb	r3, [r3, #3]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fa9d 	bl	8008940 <RTC_Bcd2ToByte>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	785b      	ldrb	r3, [r3, #1]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fa94 	bl	8008940 <RTC_Bcd2ToByte>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	789b      	ldrb	r3, [r3, #2]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fa8b 	bl	8008940 <RTC_Bcd2ToByte>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	7bdb      	ldrb	r3, [r3, #15]
 8008436:	4618      	mov	r0, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	7b59      	ldrb	r1, [r3, #13]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	7b9b      	ldrb	r3, [r3, #14]
 8008440:	461a      	mov	r2, r3
 8008442:	f000 fb75 	bl	8008b30 <RTC_WeekDayNum>
 8008446:	4603      	mov	r3, r0
 8008448:	461a      	mov	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	7b1a      	ldrb	r2, [r3, #12]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f96e 	bl	8008738 <RTC_ReadTimeCounter>
 800845c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4a26      	ldr	r2, [pc, #152]	; (80084fc <HAL_RTC_SetDate+0x160>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	0adb      	lsrs	r3, r3, #11
 8008468:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b18      	cmp	r3, #24
 800846e:	d93a      	bls.n	80084e6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4a23      	ldr	r2, [pc, #140]	; (8008500 <HAL_RTC_SetDate+0x164>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	091b      	lsrs	r3, r3, #4
 800847a:	4a22      	ldr	r2, [pc, #136]	; (8008504 <HAL_RTC_SetDate+0x168>)
 800847c:	fb02 f303 	mul.w	r3, r2, r3
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f985 	bl	8008798 <RTC_WriteTimeCounter>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2204      	movs	r2, #4
 8008498:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e027      	b.n	80084f4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f99e 	bl	80087e6 <RTC_ReadAlarmCounter>
 80084aa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d018      	beq.n	80084e6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d214      	bcs.n	80084e6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80084c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80084c6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80084c8:	69b9      	ldr	r1, [r7, #24]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 f9a4 	bl	8008818 <RTC_WriteAlarmCounter>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2204      	movs	r2, #4
 80084da:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e006      	b.n	80084f4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	91a2b3c5 	.word	0x91a2b3c5
 8008500:	aaaaaaab 	.word	0xaaaaaaab
 8008504:	00015180 	.word	0x00015180

08008508 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b089      	sub	sp, #36	; 0x24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	2100      	movs	r1, #0
 800851e:	460a      	mov	r2, r1
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	460a      	mov	r2, r1
 8008524:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_RTC_SetAlarm_IT+0x2a>
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e099      	b.n	800866a <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	7c1b      	ldrb	r3, [r3, #16]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <HAL_RTC_SetAlarm_IT+0x3a>
 800853e:	2302      	movs	r3, #2
 8008540:	e093      	b.n	800866a <HAL_RTC_SetAlarm_IT+0x162>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2202      	movs	r2, #2
 800854c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800854e:	f107 0314 	add.w	r3, r7, #20
 8008552:	2200      	movs	r2, #0
 8008554:	4619      	mov	r1, r3
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fe48 	bl	80081ec <HAL_RTC_GetTime>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e081      	b.n	800866a <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008566:	7d3b      	ldrb	r3, [r7, #20]
 8008568:	461a      	mov	r2, r3
 800856a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800856e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8008572:	7d7b      	ldrb	r3, [r7, #21]
 8008574:	4619      	mov	r1, r3
 8008576:	460b      	mov	r3, r1
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	1a5b      	subs	r3, r3, r1
 800857c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800857e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8008580:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8008582:	4413      	add	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d113      	bne.n	80085b4 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008596:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	4619      	mov	r1, r3
 80085a0:	460b      	mov	r3, r1
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	1a5b      	subs	r3, r3, r1
 80085a6:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80085a8:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80085ae:	4413      	add	r3, r2
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	e01e      	b.n	80085f2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f9c1 	bl	8008940 <RTC_Bcd2ToByte>
 80085be:	4603      	mov	r3, r0
 80085c0:	461a      	mov	r2, r3
 80085c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80085c6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f9b6 	bl	8008940 <RTC_Bcd2ToByte>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	4613      	mov	r3, r2
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80085e0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	789b      	ldrb	r3, [r3, #2]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 f9aa 	bl	8008940 <RTC_Bcd2ToByte>
 80085ec:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80085ee:	4423      	add	r3, r4
 80085f0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d205      	bcs.n	8008606 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8008600:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008604:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008606:	69f9      	ldr	r1, [r7, #28]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f905 	bl	8008818 <RTC_WriteAlarmCounter>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2204      	movs	r2, #4
 8008618:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e022      	b.n	800866a <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0202 	bic.w	r2, r2, #2
 8008632:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0202 	orr.w	r2, r2, #2
 8008642:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008644:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a0a      	ldr	r2, [pc, #40]	; (8008674 <HAL_RTC_SetAlarm_IT+0x16c>)
 800864a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800864e:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008650:	4b08      	ldr	r3, [pc, #32]	; (8008674 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	4a07      	ldr	r2, [pc, #28]	; (8008674 <HAL_RTC_SetAlarm_IT+0x16c>)
 8008656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800865a:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8008668:	2300      	movs	r3, #0
  }
}
 800866a:	4618      	mov	r0, r3
 800866c:	3724      	adds	r7, #36	; 0x24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd90      	pop	{r4, r7, pc}
 8008672:	bf00      	nop
 8008674:	40010400 	.word	0x40010400

08008678 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d011      	beq.n	80086b2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f815 	bl	80086cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0202 	bic.w	r2, r2, #2
 80086b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80086b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80086b8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	745a      	strb	r2, [r3, #17]
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40010400 	.word	0x40010400

080086cc <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e01d      	b.n	8008730 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 0208 	bic.w	r2, r2, #8
 8008702:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8008704:	f7fb ff88 	bl	8004618 <HAL_GetTick>
 8008708:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800870a:	e009      	b.n	8008720 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800870c:	f7fb ff84 	bl	8004618 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800871a:	d901      	bls.n	8008720 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e007      	b.n	8008730 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0ee      	beq.n	800870c <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	827b      	strh	r3, [r7, #18]
 8008744:	2300      	movs	r3, #0
 8008746:	823b      	strh	r3, [r7, #16]
 8008748:	2300      	movs	r3, #0
 800874a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8008768:	8a7a      	ldrh	r2, [r7, #18]
 800876a:	8a3b      	ldrh	r3, [r7, #16]
 800876c:	429a      	cmp	r2, r3
 800876e:	d008      	beq.n	8008782 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8008770:	8a3b      	ldrh	r3, [r7, #16]
 8008772:	041a      	lsls	r2, r3, #16
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	b29b      	uxth	r3, r3
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e004      	b.n	800878c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8008782:	8a7b      	ldrh	r3, [r7, #18]
 8008784:	041a      	lsls	r2, r3, #16
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800878c:	697b      	ldr	r3, [r7, #20]
}
 800878e:	4618      	mov	r0, r3
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f85d 	bl	8008866 <RTC_EnterInitMode>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
 80087b6:	e011      	b.n	80087dc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	0c12      	lsrs	r2, r2, #16
 80087c0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	b292      	uxth	r2, r2
 80087ca:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f872 	bl	80088b6 <RTC_ExitInitMode>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	81fb      	strh	r3, [r7, #14]
 80087f2:	2300      	movs	r3, #0
 80087f4:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8008806:	89fb      	ldrh	r3, [r7, #14]
 8008808:	041a      	lsls	r2, r3, #16
 800880a:	89bb      	ldrh	r3, [r7, #12]
 800880c:	4313      	orrs	r3, r2
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f81d 	bl	8008866 <RTC_EnterInitMode>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
 8008836:	e011      	b.n	800885c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	0c12      	lsrs	r2, r2, #16
 8008840:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	b292      	uxth	r2, r2
 800884a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f832 	bl	80088b6 <RTC_ExitInitMode>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b084      	sub	sp, #16
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8008872:	f7fb fed1 	bl	8004618 <HAL_GetTick>
 8008876:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008878:	e009      	b.n	800888e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800887a:	f7fb fecd 	bl	8004618 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008888:	d901      	bls.n	800888e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e00f      	b.n	80088ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0ee      	beq.n	800887a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0210 	orr.w	r2, r2, #16
 80088aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0210 	bic.w	r2, r2, #16
 80088d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80088d2:	f7fb fea1 	bl	8004618 <HAL_GetTick>
 80088d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80088d8:	e009      	b.n	80088ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80088da:	f7fb fe9d 	bl	8004618 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088e8:	d901      	bls.n	80088ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e007      	b.n	80088fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0ee      	beq.n	80088da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008906:	b480      	push	{r7}
 8008908:	b085      	sub	sp, #20
 800890a:	af00      	add	r7, sp, #0
 800890c:	4603      	mov	r3, r0
 800890e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008914:	e005      	b.n	8008922 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	3b0a      	subs	r3, #10
 8008920:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008922:	79fb      	ldrb	r3, [r7, #7]
 8008924:	2b09      	cmp	r3, #9
 8008926:	d8f6      	bhi.n	8008916 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	011b      	lsls	r3, r3, #4
 800892e:	b2da      	uxtb	r2, r3
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	4313      	orrs	r3, r2
 8008934:	b2db      	uxtb	r3, r3
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr

08008940 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	091b      	lsrs	r3, r3, #4
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	4613      	mov	r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	4413      	add	r3, r2
 800896e:	b2db      	uxtb	r3, r3
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	bc80      	pop	{r7}
 8008978:	4770      	bx	lr

0800897a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b086      	sub	sp, #24
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7bdb      	ldrb	r3, [r3, #15]
 8008998:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	7b5b      	ldrb	r3, [r3, #13]
 800899e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	7b9b      	ldrb	r3, [r3, #14]
 80089a4:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	e06f      	b.n	8008a8c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d011      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d00e      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d00b      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b07      	cmp	r3, #7
 80089c2:	d008      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	d005      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b0a      	cmp	r3, #10
 80089ce:	d002      	beq.n	80089d6 <RTC_DateUpdate+0x5c>
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	2b0c      	cmp	r3, #12
 80089d4:	d117      	bne.n	8008a06 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b1e      	cmp	r3, #30
 80089da:	d803      	bhi.n	80089e4 <RTC_DateUpdate+0x6a>
      {
        day++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80089e2:	e050      	b.n	8008a86 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b0c      	cmp	r3, #12
 80089e8:	d005      	beq.n	80089f6 <RTC_DateUpdate+0x7c>
        {
          month++;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
          day = 1U;
 80089f0:	2301      	movs	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80089f4:	e047      	b.n	8008a86 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80089f6:	2301      	movs	r3, #1
 80089f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80089fa:	2301      	movs	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
          year++;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	3301      	adds	r3, #1
 8008a02:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8008a04:	e03f      	b.n	8008a86 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d008      	beq.n	8008a1e <RTC_DateUpdate+0xa4>
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2b06      	cmp	r3, #6
 8008a10:	d005      	beq.n	8008a1e <RTC_DateUpdate+0xa4>
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d002      	beq.n	8008a1e <RTC_DateUpdate+0xa4>
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2b0b      	cmp	r3, #11
 8008a1c:	d10c      	bne.n	8008a38 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b1d      	cmp	r3, #29
 8008a22:	d803      	bhi.n	8008a2c <RTC_DateUpdate+0xb2>
      {
        day++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008a2a:	e02c      	b.n	8008a86 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008a32:	2301      	movs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008a36:	e026      	b.n	8008a86 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d123      	bne.n	8008a86 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b1b      	cmp	r3, #27
 8008a42:	d803      	bhi.n	8008a4c <RTC_DateUpdate+0xd2>
      {
        day++;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	e01c      	b.n	8008a86 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b1c      	cmp	r3, #28
 8008a50:	d111      	bne.n	8008a76 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 f838 	bl	8008acc <RTC_IsLeapYear>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <RTC_DateUpdate+0xf0>
        {
          day++;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3301      	adds	r3, #1
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	e00d      	b.n	8008a86 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8008a70:	2301      	movs	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e007      	b.n	8008a86 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b1d      	cmp	r3, #29
 8008a7a:	d104      	bne.n	8008a86 <RTC_DateUpdate+0x10c>
      {
        month++;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	613b      	str	r3, [r7, #16]
        day = 1U;
 8008a82:	2301      	movs	r3, #1
 8008a84:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60bb      	str	r3, [r7, #8]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d38b      	bcc.n	80089ac <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6978      	ldr	r0, [r7, #20]
 8008ab8:	f000 f83a 	bl	8008b30 <RTC_WeekDayNum>
 8008abc:	4603      	mov	r3, r0
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	731a      	strb	r2, [r3, #12]
}
 8008ac4:	bf00      	nop
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e01d      	b.n	8008b22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <RTC_IsLeapYear+0x60>)
 8008aea:	fba2 1203 	umull	r1, r2, r2, r3
 8008aee:	0952      	lsrs	r2, r2, #5
 8008af0:	2164      	movs	r1, #100	; 0x64
 8008af2:	fb01 f202 	mul.w	r2, r1, r2
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d001      	beq.n	8008b02 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e00f      	b.n	8008b22 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <RTC_IsLeapYear+0x60>)
 8008b06:	fba2 1203 	umull	r1, r2, r2, r3
 8008b0a:	09d2      	lsrs	r2, r2, #7
 8008b0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008b10:	fb01 f202 	mul.w	r2, r1, r2
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e000      	b.n	8008b22 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8008b20:	2300      	movs	r3, #0
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	51eb851f 	.word	0x51eb851f

08008b30 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60bb      	str	r3, [r7, #8]
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8008b4e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d82d      	bhi.n	8008bb2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	4413      	add	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	4a2c      	ldr	r2, [pc, #176]	; (8008c14 <RTC_WeekDayNum+0xe4>)
 8008b64:	fba2 2303 	umull	r2, r3, r2, r3
 8008b68:	085a      	lsrs	r2, r3, #1
 8008b6a:	78bb      	ldrb	r3, [r7, #2]
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	441a      	add	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	089b      	lsrs	r3, r3, #2
 8008b78:	441a      	add	r2, r3
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4926      	ldr	r1, [pc, #152]	; (8008c18 <RTC_WeekDayNum+0xe8>)
 8008b80:	fba1 1303 	umull	r1, r3, r1, r3
 8008b84:	095b      	lsrs	r3, r3, #5
 8008b86:	1ad2      	subs	r2, r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	4922      	ldr	r1, [pc, #136]	; (8008c18 <RTC_WeekDayNum+0xe8>)
 8008b8e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b92:	09db      	lsrs	r3, r3, #7
 8008b94:	4413      	add	r3, r2
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <RTC_WeekDayNum+0xec>)
 8008b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9e:	1ad1      	subs	r1, r2, r3
 8008ba0:	0849      	lsrs	r1, r1, #1
 8008ba2:	440b      	add	r3, r1
 8008ba4:	0899      	lsrs	r1, r3, #2
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	1a5b      	subs	r3, r3, r1
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	e029      	b.n	8008c06 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	4a15      	ldr	r2, [pc, #84]	; (8008c14 <RTC_WeekDayNum+0xe4>)
 8008bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc4:	085a      	lsrs	r2, r3, #1
 8008bc6:	78bb      	ldrb	r3, [r7, #2]
 8008bc8:	441a      	add	r2, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	441a      	add	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	089b      	lsrs	r3, r3, #2
 8008bd2:	441a      	add	r2, r3
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4910      	ldr	r1, [pc, #64]	; (8008c18 <RTC_WeekDayNum+0xe8>)
 8008bd8:	fba1 1303 	umull	r1, r3, r1, r3
 8008bdc:	095b      	lsrs	r3, r3, #5
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	490d      	ldr	r1, [pc, #52]	; (8008c18 <RTC_WeekDayNum+0xe8>)
 8008be4:	fba1 1303 	umull	r1, r3, r1, r3
 8008be8:	09db      	lsrs	r3, r3, #7
 8008bea:	4413      	add	r3, r2
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <RTC_WeekDayNum+0xec>)
 8008bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf4:	1ad1      	subs	r1, r2, r3
 8008bf6:	0849      	lsrs	r1, r1, #1
 8008bf8:	440b      	add	r3, r1
 8008bfa:	0899      	lsrs	r1, r3, #2
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	1a5b      	subs	r3, r3, r1
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	b2db      	uxtb	r3, r3
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr
 8008c14:	38e38e39 	.word	0x38e38e39
 8008c18:	51eb851f 	.word	0x51eb851f
 8008c1c:	24924925 	.word	0x24924925

08008c20 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d027      	beq.n	8008c86 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d020      	beq.n	8008c86 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f824 	bl	8008ca0 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0204 	mvn.w	r2, #4
 8008c60:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2204      	movs	r2, #4
 8008c66:	745a      	strb	r2, [r3, #17]
 8008c68:	e005      	b.n	8008c76 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f80f 	bl	8008c8e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0201 	bic.w	r2, r2, #1
 8008c84:	605a      	str	r2, [r3, #4]
    }
  }
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e042      	b.n	8008d4a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d106      	bne.n	8008cde <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fb fbcb 	bl	8004474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2224      	movs	r2, #36	; 0x24
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cf4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fcd4 	bl	80096a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695a      	ldr	r2, [r3, #20]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60f8      	str	r0, [r7, #12]
 8008d5a:	60b9      	str	r1, [r7, #8]
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d112      	bne.n	8008d92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_UART_Receive_IT+0x26>
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e00b      	b.n	8008d94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fab6 	bl	80092fa <UART_Start_Receive_IT>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e000      	b.n	8008d94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
  }
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ba      	sub	sp, #232	; 0xe8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10f      	bne.n	8008e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <HAL_UART_IRQHandler+0x66>
 8008dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fb93 	bl	8009526 <UART_Receive_IT>
      return;
 8008e00:	e25b      	b.n	80092ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80de 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x22c>
 8008e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80d1 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <HAL_UART_IRQHandler+0xae>
 8008e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d005      	beq.n	8008e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e42:	f043 0201 	orr.w	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00b      	beq.n	8008e6e <HAL_UART_IRQHandler+0xd2>
 8008e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e66:	f043 0202 	orr.w	r2, r3, #2
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	f003 0302 	and.w	r3, r3, #2
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <HAL_UART_IRQHandler+0xf6>
 8008e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8a:	f043 0204 	orr.w	r2, r3, #4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 0308 	and.w	r3, r3, #8
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x126>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	f043 0208 	orr.w	r2, r3, #8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 81f2 	beq.w	80092b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d008      	beq.n	8008eea <HAL_UART_IRQHandler+0x14e>
 8008ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fb1e 	bl	8009526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	2300      	moveq	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d103      	bne.n	8008f16 <HAL_UART_IRQHandler+0x17a>
 8008f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d04f      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa28 	bl	800936c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d041      	beq.n	8008fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3314      	adds	r3, #20
 8008f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1d9      	bne.n	8008f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d013      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	4a7e      	ldr	r2, [pc, #504]	; (800917c <HAL_UART_IRQHandler+0x3e0>)
 8008f84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fb fc96 	bl	80048bc <HAL_DMA_Abort_IT>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d016      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	e00e      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f993 	bl	80092d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fac:	e00a      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f98f 	bl	80092d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e006      	b.n	8008fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f98b 	bl	80092d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008fc2:	e175      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	bf00      	nop
    return;
 8008fc6:	e173      	b.n	80092b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	f040 814f 	bne.w	8009270 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd6:	f003 0310 	and.w	r3, r3, #16
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8148 	beq.w	8009270 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8141 	beq.w	8009270 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60bb      	str	r3, [r7, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60bb      	str	r3, [r7, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	60bb      	str	r3, [r7, #8]
 8009002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 80b6 	beq.w	8009180 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8145 	beq.w	80092b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800902e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009032:	429a      	cmp	r2, r3
 8009034:	f080 813e 	bcs.w	80092b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800903e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2b20      	cmp	r3, #32
 8009048:	f000 8088 	beq.w	800915c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	330c      	adds	r3, #12
 8009052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800905a:	e853 3f00 	ldrex	r3, [r3]
 800905e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	330c      	adds	r3, #12
 8009074:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009078:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800907c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009084:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1d9      	bne.n	800904c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e1      	bne.n	8009098 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3314      	adds	r3, #20
 80090da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e3      	bne.n	80090d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	330c      	adds	r3, #12
 8009120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800912a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912c:	f023 0310 	bic.w	r3, r3, #16
 8009130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800913e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009140:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800914c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e3      	bne.n	800911a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009156:	4618      	mov	r0, r3
 8009158:	f7fb fb75 	bl	8004846 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800916a:	b29b      	uxth	r3, r3
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	b29b      	uxth	r3, r3
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f8b6 	bl	80092e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009178:	e09c      	b.n	80092b4 <HAL_UART_IRQHandler+0x518>
 800917a:	bf00      	nop
 800917c:	08009431 	.word	0x08009431
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009188:	b29b      	uxth	r3, r3
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 808e 	beq.w	80092b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800919c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 8089 	beq.w	80092b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80091ca:	647a      	str	r2, [r7, #68]	; 0x44
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e3      	bne.n	80091a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3314      	adds	r3, #20
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	623b      	str	r3, [r7, #32]
   return(result);
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	f023 0301 	bic.w	r3, r3, #1
 80091f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3314      	adds	r3, #20
 80091fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009202:	633a      	str	r2, [r7, #48]	; 0x30
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e3      	bne.n	80091de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	330c      	adds	r3, #12
 800922a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	60fb      	str	r3, [r7, #12]
   return(result);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0310 	bic.w	r3, r3, #16
 800923a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	330c      	adds	r3, #12
 8009244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009248:	61fa      	str	r2, [r7, #28]
 800924a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	69b9      	ldr	r1, [r7, #24]
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	617b      	str	r3, [r7, #20]
   return(result);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e3      	bne.n	8009224 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f83b 	bl	80092e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800926e:	e023      	b.n	80092b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <HAL_UART_IRQHandler+0x4f4>
 800927c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8e5 	bl	8009458 <UART_Transmit_IT>
    return;
 800928e:	e014      	b.n	80092ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00e      	beq.n	80092ba <HAL_UART_IRQHandler+0x51e>
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f924 	bl	80094f6 <UART_EndTransmit_IT>
    return;
 80092ae:	e004      	b.n	80092ba <HAL_UART_IRQHandler+0x51e>
    return;
 80092b0:	bf00      	nop
 80092b2:	e002      	b.n	80092ba <HAL_UART_IRQHandler+0x51e>
      return;
 80092b4:	bf00      	nop
 80092b6:	e000      	b.n	80092ba <HAL_UART_IRQHandler+0x51e>
      return;
 80092b8:	bf00      	nop
  }
}
 80092ba:	37e8      	adds	r7, #232	; 0xe8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	bc80      	pop	{r7}
 80092e2:	4770      	bx	lr

080092e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bc80      	pop	{r7}
 80092f8:	4770      	bx	lr

080092fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b085      	sub	sp, #20
 80092fe:	af00      	add	r7, sp, #0
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	4613      	mov	r3, r2
 8009306:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2222      	movs	r2, #34	; 0x22
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d007      	beq.n	8009340 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800933e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	695a      	ldr	r2, [r3, #20]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0201 	orr.w	r2, r2, #1
 800934e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0220 	orr.w	r2, r2, #32
 800935e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr

0800936c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b095      	sub	sp, #84	; 0x54
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	330c      	adds	r3, #12
 800937a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800938a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009394:	643a      	str	r2, [r7, #64]	; 0x40
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800939a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e5      	bne.n	8009374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3314      	adds	r3, #20
 80093ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	e853 3f00 	ldrex	r3, [r3]
 80093b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	64bb      	str	r3, [r7, #72]	; 0x48
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3314      	adds	r3, #20
 80093c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e5      	bne.n	80093a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d119      	bne.n	8009418 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	330c      	adds	r3, #12
 80093ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f023 0310 	bic.w	r3, r3, #16
 80093fa:	647b      	str	r3, [r7, #68]	; 0x44
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	330c      	adds	r3, #12
 8009402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009404:	61ba      	str	r2, [r7, #24]
 8009406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6979      	ldr	r1, [r7, #20]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	613b      	str	r3, [r7, #16]
   return(result);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e5      	bne.n	80093e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009426:	bf00      	nop
 8009428:	3754      	adds	r7, #84	; 0x54
 800942a:	46bd      	mov	sp, r7
 800942c:	bc80      	pop	{r7}
 800942e:	4770      	bx	lr

08009430 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff ff41 	bl	80092d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b21      	cmp	r3, #33	; 0x21
 800946a:	d13e      	bne.n	80094ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009474:	d114      	bne.n	80094a0 <UART_Transmit_IT+0x48>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d110      	bne.n	80094a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009492:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	1c9a      	adds	r2, r3, #2
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	621a      	str	r2, [r3, #32]
 800949e:	e008      	b.n	80094b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	1c59      	adds	r1, r3, #1
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6211      	str	r1, [r2, #32]
 80094aa:	781a      	ldrb	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4619      	mov	r1, r3
 80094c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10f      	bne.n	80094e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e000      	b.n	80094ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094ea:	2302      	movs	r3, #2
  }
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr

080094f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800950c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff fed2 	bl	80092c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b08c      	sub	sp, #48	; 0x30
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b22      	cmp	r3, #34	; 0x22
 8009538:	f040 80ae 	bne.w	8009698 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009544:	d117      	bne.n	8009576 <UART_Receive_IT+0x50>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d113      	bne.n	8009576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b29b      	uxth	r3, r3
 8009560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009564:	b29a      	uxth	r2, r3
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	1c9a      	adds	r2, r3, #2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	629a      	str	r2, [r3, #40]	; 0x28
 8009574:	e026      	b.n	80095c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800957c:	2300      	movs	r3, #0
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009588:	d007      	beq.n	800959a <UART_Receive_IT+0x74>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <UART_Receive_IT+0x82>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e008      	b.n	80095ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	4619      	mov	r1, r3
 80095d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d15d      	bne.n	8009694 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0220 	bic.w	r2, r2, #32
 80095e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695a      	ldr	r2, [r3, #20]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0201 	bic.w	r2, r2, #1
 8009606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2220      	movs	r2, #32
 800960c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	2b01      	cmp	r3, #1
 800961c:	d135      	bne.n	800968a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	613b      	str	r3, [r7, #16]
   return(result);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f023 0310 	bic.w	r3, r3, #16
 800963a:	627b      	str	r3, [r7, #36]	; 0x24
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	330c      	adds	r3, #12
 8009642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009644:	623a      	str	r2, [r7, #32]
 8009646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	61bb      	str	r3, [r7, #24]
   return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0310 	and.w	r3, r3, #16
 8009662:	2b10      	cmp	r3, #16
 8009664:	d10a      	bne.n	800967c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7ff fe2e 	bl	80092e4 <HAL_UARTEx_RxEventCallback>
 8009688:	e002      	b.n	8009690 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f9 fe92 	bl	80033b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	e002      	b.n	800969a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	e000      	b.n	800969a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009698:	2302      	movs	r3, #2
  }
}
 800969a:	4618      	mov	r0, r3
 800969c:	3730      	adds	r7, #48	; 0x30
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80096de:	f023 030c 	bic.w	r3, r3, #12
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6812      	ldr	r2, [r2, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	430b      	orrs	r3, r1
 80096ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a2c      	ldr	r2, [pc, #176]	; (80097b8 <UART_SetConfig+0x114>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d103      	bne.n	8009714 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800970c:	f7fe faac 	bl	8007c68 <HAL_RCC_GetPCLK2Freq>
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	e002      	b.n	800971a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009714:	f7fe fa94 	bl	8007c40 <HAL_RCC_GetPCLK1Freq>
 8009718:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	009a      	lsls	r2, r3, #2
 8009724:	441a      	add	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009730:	4a22      	ldr	r2, [pc, #136]	; (80097bc <UART_SetConfig+0x118>)
 8009732:	fba2 2303 	umull	r2, r3, r2, r3
 8009736:	095b      	lsrs	r3, r3, #5
 8009738:	0119      	lsls	r1, r3, #4
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009a      	lsls	r2, r3, #2
 8009744:	441a      	add	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009750:	4b1a      	ldr	r3, [pc, #104]	; (80097bc <UART_SetConfig+0x118>)
 8009752:	fba3 0302 	umull	r0, r3, r3, r2
 8009756:	095b      	lsrs	r3, r3, #5
 8009758:	2064      	movs	r0, #100	; 0x64
 800975a:	fb00 f303 	mul.w	r3, r0, r3
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	3332      	adds	r3, #50	; 0x32
 8009764:	4a15      	ldr	r2, [pc, #84]	; (80097bc <UART_SetConfig+0x118>)
 8009766:	fba2 2303 	umull	r2, r3, r2, r3
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009770:	4419      	add	r1, r3
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009a      	lsls	r2, r3, #2
 800977c:	441a      	add	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	fbb2 f2f3 	udiv	r2, r2, r3
 8009788:	4b0c      	ldr	r3, [pc, #48]	; (80097bc <UART_SetConfig+0x118>)
 800978a:	fba3 0302 	umull	r0, r3, r3, r2
 800978e:	095b      	lsrs	r3, r3, #5
 8009790:	2064      	movs	r0, #100	; 0x64
 8009792:	fb00 f303 	mul.w	r3, r0, r3
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	3332      	adds	r3, #50	; 0x32
 800979c:	4a07      	ldr	r2, [pc, #28]	; (80097bc <UART_SetConfig+0x118>)
 800979e:	fba2 2303 	umull	r2, r3, r2, r3
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	f003 020f 	and.w	r2, r3, #15
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	440a      	add	r2, r1
 80097ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	40013800 	.word	0x40013800
 80097bc:	51eb851f 	.word	0x51eb851f

080097c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80097c0:	b084      	sub	sp, #16
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	f107 0014 	add.w	r0, r7, #20
 80097ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	b004      	add	sp, #16
 80097de:	4770      	bx	lr

080097e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80097f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80097f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009814:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009818:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	b29b      	uxth	r3, r3
 8009826:	43db      	mvns	r3, r3
 8009828:	b29b      	uxth	r3, r3
 800982a:	4013      	ands	r3, r2
 800982c:	b29a      	uxth	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr

08009840 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009858:	b084      	sub	sp, #16
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	f107 0014 	add.w	r0, r7, #20
 8009866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	b004      	add	sp, #16
 8009896:	4770      	bx	lr

08009898 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009898:	b480      	push	{r7}
 800989a:	b09d      	sub	sp, #116	; 0x74
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	78db      	ldrb	r3, [r3, #3]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d81f      	bhi.n	800990a <USB_ActivateEndpoint+0x72>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <USB_ActivateEndpoint+0x38>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098e1 	.word	0x080098e1
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	08009913 	.word	0x08009913
 80098dc:	080098ef 	.word	0x080098ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80098e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098ec:	e012      	b.n	8009914 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80098ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80098f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80098f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80098fa:	e00b      	b.n	8009914 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80098fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009904:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009908:	e004      	b.n	8009914 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009910:	e000      	b.n	8009914 <USB_ActivateEndpoint+0x7c>
      break;
 8009912:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	441a      	add	r2, r3
 800991e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994c:	b29a      	uxth	r2, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009978:	b29b      	uxth	r3, r3
 800997a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	7b1b      	ldrb	r3, [r3, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f040 8178 	bne.w	8009c76 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 8084 	beq.w	8009a98 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	61bb      	str	r3, [r7, #24]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800999a:	b29b      	uxth	r3, r3
 800999c:	461a      	mov	r2, r3
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	4413      	add	r3, r2
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	011a      	lsls	r2, r3, #4
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	88db      	ldrh	r3, [r3, #6]
 80099b8:	085b      	lsrs	r3, r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	827b      	strh	r3, [r7, #18]
 80099d2:	8a7b      	ldrh	r3, [r7, #18]
 80099d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d01b      	beq.n	8009a14 <USB_ActivateEndpoint+0x17c>
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f2:	823b      	strh	r3, [r7, #16]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	441a      	add	r2, r3
 80099fe:	8a3b      	ldrh	r3, [r7, #16]
 8009a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	78db      	ldrb	r3, [r3, #3]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d020      	beq.n	8009a5e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a32:	81bb      	strh	r3, [r7, #12]
 8009a34:	89bb      	ldrh	r3, [r7, #12]
 8009a36:	f083 0320 	eor.w	r3, r3, #32
 8009a3a:	81bb      	strh	r3, [r7, #12]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	441a      	add	r2, r3
 8009a46:	89bb      	ldrh	r3, [r7, #12]
 8009a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	8013      	strh	r3, [r2, #0]
 8009a5c:	e2d5      	b.n	800a00a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a74:	81fb      	strh	r3, [r7, #14]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	441a      	add	r2, r3
 8009a80:	89fb      	ldrh	r3, [r7, #14]
 8009a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	8013      	strh	r3, [r2, #0]
 8009a96:	e2b8      	b.n	800a00a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	4413      	add	r3, r2
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	011a      	lsls	r2, r3, #4
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	88db      	ldrh	r3, [r3, #6]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	4413      	add	r3, r2
 8009ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	011a      	lsls	r2, r3, #4
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	4413      	add	r3, r2
 8009aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	2b3e      	cmp	r3, #62	; 0x3e
 8009b06:	d91d      	bls.n	8009b44 <USB_ActivateEndpoint+0x2ac>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	095b      	lsrs	r3, r3, #5
 8009b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <USB_ActivateEndpoint+0x28a>
 8009b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	029b      	lsls	r3, r3, #10
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	e026      	b.n	8009b92 <USB_ActivateEndpoint+0x2fa>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <USB_ActivateEndpoint+0x2ca>
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e017      	b.n	8009b92 <USB_ActivateEndpoint+0x2fa>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <USB_ActivateEndpoint+0x2e4>
 8009b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b78:	3301      	adds	r3, #1
 8009b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	029b      	lsls	r3, r3, #10
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009ba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01b      	beq.n	8009be2 <USB_ActivateEndpoint+0x34a>
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc0:	843b      	strh	r3, [r7, #32]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	441a      	add	r2, r3
 8009bcc:	8c3b      	ldrh	r3, [r7, #32]
 8009bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d124      	bne.n	8009c34 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c00:	83bb      	strh	r3, [r7, #28]
 8009c02:	8bbb      	ldrh	r3, [r7, #28]
 8009c04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c08:	83bb      	strh	r3, [r7, #28]
 8009c0a:	8bbb      	ldrh	r3, [r7, #28]
 8009c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c10:	83bb      	strh	r3, [r7, #28]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	441a      	add	r2, r3
 8009c1c:	8bbb      	ldrh	r3, [r7, #28]
 8009c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	8013      	strh	r3, [r2, #0]
 8009c32:	e1ea      	b.n	800a00a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4a:	83fb      	strh	r3, [r7, #30]
 8009c4c:	8bfb      	ldrh	r3, [r7, #30]
 8009c4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c52:	83fb      	strh	r3, [r7, #30]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	441a      	add	r2, r3
 8009c5e:	8bfb      	ldrh	r3, [r7, #30]
 8009c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	8013      	strh	r3, [r2, #0]
 8009c74:	e1c9      	b.n	800a00a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	78db      	ldrb	r3, [r3, #3]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d11e      	bne.n	8009cbc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	441a      	add	r2, r3
 8009ca2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	8013      	strh	r3, [r2, #0]
 8009cba:	e01d      	b.n	8009cf8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	441a      	add	r2, r3
 8009ce0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d08:	4413      	add	r3, r2
 8009d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	011a      	lsls	r2, r3, #4
 8009d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	891b      	ldrh	r3, [r3, #8]
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d3c:	4413      	add	r3, r2
 8009d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	011a      	lsls	r2, r3, #4
 8009d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	895b      	ldrh	r3, [r3, #10]
 8009d54:	085b      	lsrs	r3, r3, #1
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 8093 	bne.w	8009e90 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d01b      	beq.n	8009dbe <USB_ActivateEndpoint+0x526>
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	441a      	add	r2, r3
 8009da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009dcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01b      	beq.n	8009e0e <USB_ActivateEndpoint+0x576>
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	441a      	add	r2, r3
 8009df8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e24:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e34:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	441a      	add	r2, r3
 8009e40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	441a      	add	r2, r3
 8009e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	8013      	strh	r3, [r2, #0]
 8009e8e:	e0bc      	b.n	800a00a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009ea0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01d      	beq.n	8009ee8 <USB_ActivateEndpoint+0x650>
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ec2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	441a      	add	r2, r3
 8009ed0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ef8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01d      	beq.n	8009f40 <USB_ActivateEndpoint+0x6a8>
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	441a      	add	r2, r3
 8009f28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	78db      	ldrb	r3, [r3, #3]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d024      	beq.n	8009f92 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f66:	f083 0320 	eor.w	r3, r3, #32
 8009f6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	441a      	add	r2, r3
 8009f78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	8013      	strh	r3, [r2, #0]
 8009f90:	e01d      	b.n	8009fce <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	441a      	add	r2, r3
 8009fb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	441a      	add	r2, r3
 8009ff2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a006:	b29b      	uxth	r3, r3
 800a008:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a00a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3774      	adds	r7, #116	; 0x74
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr

0800a018 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a018:	b480      	push	{r7}
 800a01a:	b08d      	sub	sp, #52	; 0x34
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	7b1b      	ldrb	r3, [r3, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	f040 808e 	bne.w	800a148 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	785b      	ldrb	r3, [r3, #1]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d044      	beq.n	800a0be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	81bb      	strh	r3, [r7, #12]
 800a042:	89bb      	ldrh	r3, [r7, #12]
 800a044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d01b      	beq.n	800a084 <USB_DeactivateEndpoint+0x6c>
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	817b      	strh	r3, [r7, #10]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	441a      	add	r2, r3
 800a06e:	897b      	ldrh	r3, [r7, #10]
 800a070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a07c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a080:	b29b      	uxth	r3, r3
 800a082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29b      	uxth	r3, r3
 800a092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a09a:	813b      	strh	r3, [r7, #8]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	441a      	add	r2, r3
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	8013      	strh	r3, [r2, #0]
 800a0bc:	e192      	b.n	800a3e4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	827b      	strh	r3, [r7, #18]
 800a0cc:	8a7b      	ldrh	r3, [r7, #18]
 800a0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01b      	beq.n	800a10e <USB_DeactivateEndpoint+0xf6>
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ec:	823b      	strh	r3, [r7, #16]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	441a      	add	r2, r3
 800a0f8:	8a3b      	ldrh	r3, [r7, #16]
 800a0fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a124:	81fb      	strh	r3, [r7, #14]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	441a      	add	r2, r3
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a13a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a142:	b29b      	uxth	r3, r3
 800a144:	8013      	strh	r3, [r2, #0]
 800a146:	e14d      	b.n	800a3e4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	785b      	ldrb	r3, [r3, #1]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 80a5 	bne.w	800a29c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	843b      	strh	r3, [r7, #32]
 800a160:	8c3b      	ldrh	r3, [r7, #32]
 800a162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01b      	beq.n	800a1a2 <USB_DeactivateEndpoint+0x18a>
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a180:	83fb      	strh	r3, [r7, #30]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	441a      	add	r2, r3
 800a18c:	8bfb      	ldrh	r3, [r7, #30]
 800a18e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	83bb      	strh	r3, [r7, #28]
 800a1b0:	8bbb      	ldrh	r3, [r7, #28]
 800a1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d01b      	beq.n	800a1f2 <USB_DeactivateEndpoint+0x1da>
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d0:	837b      	strh	r3, [r7, #26]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	441a      	add	r2, r3
 800a1dc:	8b7b      	ldrh	r3, [r7, #26]
 800a1de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a208:	833b      	strh	r3, [r7, #24]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	441a      	add	r2, r3
 800a214:	8b3b      	ldrh	r3, [r7, #24]
 800a216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a21a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a226:	b29b      	uxth	r3, r3
 800a228:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	b29b      	uxth	r3, r3
 800a238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a240:	82fb      	strh	r3, [r7, #22]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	441a      	add	r2, r3
 800a24c:	8afb      	ldrh	r3, [r7, #22]
 800a24e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a25e:	b29b      	uxth	r3, r3
 800a260:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a278:	82bb      	strh	r3, [r7, #20]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	441a      	add	r2, r3
 800a284:	8abb      	ldrh	r3, [r7, #20]
 800a286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a296:	b29b      	uxth	r3, r3
 800a298:	8013      	strh	r3, [r2, #0]
 800a29a:	e0a3      	b.n	800a3e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01b      	beq.n	800a2ec <USB_DeactivateEndpoint+0x2d4>
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	441a      	add	r2, r3
 800a2d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a2fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	d01b      	beq.n	800a33c <USB_DeactivateEndpoint+0x324>
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	441a      	add	r2, r3
 800a326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a32c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a338:	b29b      	uxth	r3, r3
 800a33a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a352:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	441a      	add	r2, r3
 800a35e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a370:	b29b      	uxth	r3, r3
 800a372:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	441a      	add	r2, r3
 800a396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a39c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	441a      	add	r2, r3
 800a3ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3734      	adds	r7, #52	; 0x34
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b0c2      	sub	sp, #264	; 0x108
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3fe:	6018      	str	r0, [r3, #0]
 800a400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a408:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	785b      	ldrb	r3, [r3, #1]
 800a416:	2b01      	cmp	r3, #1
 800a418:	f040 86b7 	bne.w	800b18a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	429a      	cmp	r2, r3
 800a436:	d908      	bls.n	800a44a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a448:	e007      	b.n	800a45a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	7b1b      	ldrb	r3, [r3, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d13a      	bne.n	800a4e0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6959      	ldr	r1, [r3, #20]
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	88da      	ldrh	r2, [r3, #6]
 800a482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a486:	b29b      	uxth	r3, r3
 800a488:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a48c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a490:	6800      	ldr	r0, [r0, #0]
 800a492:	f001 fc9c 	bl	800bdce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
 800a4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	011a      	lsls	r2, r3, #4
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	801a      	strh	r2, [r3, #0]
 800a4dc:	f000 be1f 	b.w	800b11e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	78db      	ldrb	r3, [r3, #3]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f040 8462 	bne.w	800adb6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a1a      	ldr	r2, [r3, #32]
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	f240 83df 	bls.w	800acce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a536:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	441a      	add	r2, r3
 800a554:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a560:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29b      	uxth	r3, r3
 800a56a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a1a      	ldr	r2, [r3, #32]
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57c:	1ad2      	subs	r2, r2, r3
 800a57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 81c7 	beq.w	800a940 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	633b      	str	r3, [r7, #48]	; 0x30
 800a5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	785b      	ldrb	r3, [r3, #1]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d177      	bne.n	800a6be <USB_EPStartXfer+0x2ce>
 800a5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	4413      	add	r3, r2
 800a5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	011a      	lsls	r2, r3, #4
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	4413      	add	r3, r2
 800a604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a614:	b29a      	uxth	r2, r3
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	801a      	strh	r2, [r3, #0]
 800a61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a61e:	2b3e      	cmp	r3, #62	; 0x3e
 800a620:	d921      	bls.n	800a666 <USB_EPStartXfer+0x276>
 800a622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a626:	095b      	lsrs	r3, r3, #5
 800a628:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a630:	f003 031f 	and.w	r3, r3, #31
 800a634:	2b00      	cmp	r3, #0
 800a636:	d104      	bne.n	800a642 <USB_EPStartXfer+0x252>
 800a638:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a63c:	3b01      	subs	r3, #1
 800a63e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29a      	uxth	r2, r3
 800a648:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	029b      	lsls	r3, r3, #10
 800a650:	b29b      	uxth	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b29b      	uxth	r3, r3
 800a656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a65e:	b29a      	uxth	r2, r3
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	801a      	strh	r2, [r3, #0]
 800a664:	e050      	b.n	800a708 <USB_EPStartXfer+0x318>
 800a666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <USB_EPStartXfer+0x294>
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	e041      	b.n	800a708 <USB_EPStartXfer+0x318>
 800a684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d004      	beq.n	800a6a4 <USB_EPStartXfer+0x2b4>
 800a69a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a69e:	3301      	adds	r3, #1
 800a6a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	029b      	lsls	r3, r3, #10
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	801a      	strh	r2, [r3, #0]
 800a6bc:	e024      	b.n	800a708 <USB_EPStartXfer+0x318>
 800a6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	785b      	ldrb	r3, [r3, #1]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d11c      	bne.n	800a708 <USB_EPStartXfer+0x318>
 800a6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	4413      	add	r3, r2
 800a6e4:	633b      	str	r3, [r7, #48]	; 0x30
 800a6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	011a      	lsls	r2, r3, #4
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	b29a      	uxth	r2, r3
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	895b      	ldrh	r3, [r3, #10]
 800a714:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6959      	ldr	r1, [r3, #20]
 800a724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a72e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a732:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a736:	6800      	ldr	r0, [r0, #0]
 800a738:	f001 fb49 	bl	800bdce <USB_WritePMA>
            ep->xfer_buff += len;
 800a73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695a      	ldr	r2, [r3, #20]
 800a748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74c:	441a      	add	r2, r3
 800a74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6a1a      	ldr	r2, [r3, #32]
 800a766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	d90f      	bls.n	800a796 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6a1a      	ldr	r2, [r3, #32]
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	621a      	str	r2, [r3, #32]
 800a794:	e00e      	b.n	800a7b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d177      	bne.n	800a8b4 <USB_EPStartXfer+0x4c4>
 800a7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	61bb      	str	r3, [r7, #24]
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	61bb      	str	r3, [r7, #24]
 800a7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	011a      	lsls	r2, r3, #4
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	801a      	strh	r2, [r3, #0]
 800a810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a814:	2b3e      	cmp	r3, #62	; 0x3e
 800a816:	d921      	bls.n	800a85c <USB_EPStartXfer+0x46c>
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81c:	095b      	lsrs	r3, r3, #5
 800a81e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	f003 031f 	and.w	r3, r3, #31
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d104      	bne.n	800a838 <USB_EPStartXfer+0x448>
 800a82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a832:	3b01      	subs	r3, #1
 800a834:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a842:	b29b      	uxth	r3, r3
 800a844:	029b      	lsls	r3, r3, #10
 800a846:	b29b      	uxth	r3, r3
 800a848:	4313      	orrs	r3, r2
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a854:	b29a      	uxth	r2, r3
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	801a      	strh	r2, [r3, #0]
 800a85a:	e056      	b.n	800a90a <USB_EPStartXfer+0x51a>
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <USB_EPStartXfer+0x48a>
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a872:	b29a      	uxth	r2, r3
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e047      	b.n	800a90a <USB_EPStartXfer+0x51a>
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a888:	f003 0301 	and.w	r3, r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <USB_EPStartXfer+0x4aa>
 800a890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a894:	3301      	adds	r3, #1
 800a896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	029b      	lsls	r3, r3, #10
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	801a      	strh	r2, [r3, #0]
 800a8b2:	e02a      	b.n	800a90a <USB_EPStartXfer+0x51a>
 800a8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	785b      	ldrb	r3, [r3, #1]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d122      	bne.n	800a90a <USB_EPStartXfer+0x51a>
 800a8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	623b      	str	r3, [r7, #32]
 800a8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	623b      	str	r3, [r7, #32]
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	011a      	lsls	r2, r3, #4
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a904:	b29a      	uxth	r2, r3
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	891b      	ldrh	r3, [r3, #8]
 800a916:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6959      	ldr	r1, [r3, #20]
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a930:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a934:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a938:	6800      	ldr	r0, [r0, #0]
 800a93a:	f001 fa48 	bl	800bdce <USB_WritePMA>
 800a93e:	e3ee      	b.n	800b11e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	785b      	ldrb	r3, [r3, #1]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d177      	bne.n	800aa40 <USB_EPStartXfer+0x650>
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a970:	4413      	add	r3, r2
 800a972:	64bb      	str	r3, [r7, #72]	; 0x48
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	011a      	lsls	r2, r3, #4
 800a982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a984:	4413      	add	r3, r2
 800a986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a98a:	647b      	str	r3, [r7, #68]	; 0x44
 800a98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b29b      	uxth	r3, r3
 800a992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a996:	b29a      	uxth	r2, r3
 800a998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a2:	d921      	bls.n	800a9e8 <USB_EPStartXfer+0x5f8>
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	f003 031f 	and.w	r3, r3, #31
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <USB_EPStartXfer+0x5d4>
 800a9ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	029b      	lsls	r3, r3, #10
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	e056      	b.n	800aa96 <USB_EPStartXfer+0x6a6>
 800a9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <USB_EPStartXfer+0x616>
 800a9f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa02:	801a      	strh	r2, [r3, #0]
 800aa04:	e047      	b.n	800aa96 <USB_EPStartXfer+0x6a6>
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <USB_EPStartXfer+0x636>
 800aa1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa20:	3301      	adds	r3, #1
 800aa22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	029b      	lsls	r3, r3, #10
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	4313      	orrs	r3, r2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa3c:	801a      	strh	r2, [r3, #0]
 800aa3e:	e02a      	b.n	800aa96 <USB_EPStartXfer+0x6a6>
 800aa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d122      	bne.n	800aa96 <USB_EPStartXfer+0x6a6>
 800aa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	653b      	str	r3, [r7, #80]	; 0x50
 800aa5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa70:	4413      	add	r3, r2
 800aa72:	653b      	str	r3, [r7, #80]	; 0x50
 800aa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	011a      	lsls	r2, r3, #4
 800aa82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa84:	4413      	add	r3, r2
 800aa86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aa96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	891b      	ldrh	r3, [r3, #8]
 800aaa2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6959      	ldr	r1, [r3, #20]
 800aab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aabc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aac0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aac4:	6800      	ldr	r0, [r0, #0]
 800aac6:	f001 f982 	bl	800bdce <USB_WritePMA>
            ep->xfer_buff += len;
 800aaca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695a      	ldr	r2, [r3, #20]
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	441a      	add	r2, r3
 800aadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6a1a      	ldr	r2, [r3, #32]
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d90f      	bls.n	800ab24 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ab04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6a1a      	ldr	r2, [r3, #32]
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	1ad2      	subs	r2, r2, r3
 800ab16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	621a      	str	r2, [r3, #32]
 800ab22:	e00e      	b.n	800ab42 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ab4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d177      	bne.n	800ac4e <USB_EPStartXfer+0x85e>
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7e:	4413      	add	r3, r2
 800ab80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	011a      	lsls	r2, r3, #4
 800ab90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab92:	4413      	add	r3, r2
 800ab94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab98:	637b      	str	r3, [r7, #52]	; 0x34
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abae:	2b3e      	cmp	r3, #62	; 0x3e
 800abb0:	d921      	bls.n	800abf6 <USB_EPStartXfer+0x806>
 800abb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb6:	095b      	lsrs	r3, r3, #5
 800abb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc0:	f003 031f 	and.w	r3, r3, #31
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d104      	bne.n	800abd2 <USB_EPStartXfer+0x7e2>
 800abc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abcc:	3b01      	subs	r3, #1
 800abce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800abd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abdc:	b29b      	uxth	r3, r3
 800abde:	029b      	lsls	r3, r3, #10
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abee:	b29a      	uxth	r2, r3
 800abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e050      	b.n	800ac98 <USB_EPStartXfer+0x8a8>
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10a      	bne.n	800ac14 <USB_EPStartXfer+0x824>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	801a      	strh	r2, [r3, #0]
 800ac12:	e041      	b.n	800ac98 <USB_EPStartXfer+0x8a8>
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <USB_EPStartXfer+0x844>
 800ac2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac2e:	3301      	adds	r3, #1
 800ac30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	029b      	lsls	r3, r3, #10
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4a:	801a      	strh	r2, [r3, #0]
 800ac4c:	e024      	b.n	800ac98 <USB_EPStartXfer+0x8a8>
 800ac4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d11c      	bne.n	800ac98 <USB_EPStartXfer+0x8a8>
 800ac5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac72:	4413      	add	r3, r2
 800ac74:	643b      	str	r3, [r7, #64]	; 0x40
 800ac76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	011a      	lsls	r2, r3, #4
 800ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac86:	4413      	add	r3, r2
 800ac88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ac98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	895b      	ldrh	r3, [r3, #10]
 800aca4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6959      	ldr	r1, [r3, #20]
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	b29b      	uxth	r3, r3
 800acba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800acbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800acc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	f001 f881 	bl	800bdce <USB_WritePMA>
 800accc:	e227      	b.n	800b11e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800acce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800acde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	441a      	add	r2, r3
 800ad22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad5a:	4413      	add	r3, r2
 800ad5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	011a      	lsls	r2, r3, #4
 800ad6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad6e:	4413      	add	r3, r2
 800ad70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad74:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	891b      	ldrh	r3, [r3, #8]
 800ad8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6959      	ldr	r1, [r3, #20]
 800ad9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ada6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	f001 f80d 	bl	800bdce <USB_WritePMA>
 800adb4:	e1b3      	b.n	800b11e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800adb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6a1a      	ldr	r2, [r3, #32]
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800add4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 80c6 	beq.w	800af88 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800adfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	673b      	str	r3, [r7, #112]	; 0x70
 800ae08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	785b      	ldrb	r3, [r3, #1]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d177      	bne.n	800af08 <USB_EPStartXfer+0xb18>
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	461a      	mov	r2, r3
 800ae36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae38:	4413      	add	r3, r2
 800ae3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	011a      	lsls	r2, r3, #4
 800ae4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae52:	667b      	str	r3, [r7, #100]	; 0x64
 800ae54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae68:	2b3e      	cmp	r3, #62	; 0x3e
 800ae6a:	d921      	bls.n	800aeb0 <USB_EPStartXfer+0xac0>
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <USB_EPStartXfer+0xa9c>
 800ae82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae86:	3b01      	subs	r3, #1
 800ae88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	029b      	lsls	r3, r3, #10
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeac:	801a      	strh	r2, [r3, #0]
 800aeae:	e050      	b.n	800af52 <USB_EPStartXfer+0xb62>
 800aeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <USB_EPStartXfer+0xade>
 800aeb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeca:	801a      	strh	r2, [r3, #0]
 800aecc:	e041      	b.n	800af52 <USB_EPStartXfer+0xb62>
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed2:	085b      	lsrs	r3, r3, #1
 800aed4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <USB_EPStartXfer+0xafe>
 800aee4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aee8:	3301      	adds	r3, #1
 800aeea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	029b      	lsls	r3, r3, #10
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	4313      	orrs	r3, r2
 800af00:	b29a      	uxth	r2, r3
 800af02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af04:	801a      	strh	r2, [r3, #0]
 800af06:	e024      	b.n	800af52 <USB_EPStartXfer+0xb62>
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	785b      	ldrb	r3, [r3, #1]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d11c      	bne.n	800af52 <USB_EPStartXfer+0xb62>
 800af18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af26:	b29b      	uxth	r3, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af2c:	4413      	add	r3, r2
 800af2e:	673b      	str	r3, [r7, #112]	; 0x70
 800af30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	011a      	lsls	r2, r3, #4
 800af3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af40:	4413      	add	r3, r2
 800af42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800af52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	895b      	ldrh	r3, [r3, #10]
 800af5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6959      	ldr	r1, [r3, #20]
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	b29b      	uxth	r3, r3
 800af74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af80:	6800      	ldr	r0, [r0, #0]
 800af82:	f000 ff24 	bl	800bdce <USB_WritePMA>
 800af86:	e0ca      	b.n	800b11e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800af88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d177      	bne.n	800b088 <USB_EPStartXfer+0xc98>
 800af98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800afa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afb8:	4413      	add	r3, r2
 800afba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800afbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	011a      	lsls	r2, r3, #4
 800afca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800afcc:	4413      	add	r3, r2
 800afce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afd2:	67bb      	str	r3, [r7, #120]	; 0x78
 800afd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afde:	b29a      	uxth	r2, r3
 800afe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	2b3e      	cmp	r3, #62	; 0x3e
 800afea:	d921      	bls.n	800b030 <USB_EPStartXfer+0xc40>
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	095b      	lsrs	r3, r3, #5
 800aff2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	f003 031f 	and.w	r3, r3, #31
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <USB_EPStartXfer+0xc1c>
 800b002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b006:	3b01      	subs	r3, #1
 800b008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b00c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29a      	uxth	r2, r3
 800b012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b016:	b29b      	uxth	r3, r3
 800b018:	029b      	lsls	r3, r3, #10
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	4313      	orrs	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b028:	b29a      	uxth	r2, r3
 800b02a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b02c:	801a      	strh	r2, [r3, #0]
 800b02e:	e05c      	b.n	800b0ea <USB_EPStartXfer+0xcfa>
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <USB_EPStartXfer+0xc5e>
 800b038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b03a:	881b      	ldrh	r3, [r3, #0]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b046:	b29a      	uxth	r2, r3
 800b048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b04a:	801a      	strh	r2, [r3, #0]
 800b04c:	e04d      	b.n	800b0ea <USB_EPStartXfer+0xcfa>
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <USB_EPStartXfer+0xc7e>
 800b064:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b068:	3301      	adds	r3, #1
 800b06a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b06e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	b29a      	uxth	r2, r3
 800b074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b078:	b29b      	uxth	r3, r3
 800b07a:	029b      	lsls	r3, r3, #10
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	4313      	orrs	r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	e030      	b.n	800b0ea <USB_EPStartXfer+0xcfa>
 800b088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	785b      	ldrb	r3, [r3, #1]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d128      	bne.n	800b0ea <USB_EPStartXfer+0xcfa>
 800b098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0bc:	4413      	add	r3, r2
 800b0be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	011a      	lsls	r2, r3, #4
 800b0d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b0da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	891b      	ldrh	r3, [r3, #8]
 800b0f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6959      	ldr	r1, [r3, #20]
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b110:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b114:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b118:	6800      	ldr	r0, [r0, #0]
 800b11a:	f000 fe58 	bl	800bdce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b144:	817b      	strh	r3, [r7, #10]
 800b146:	897b      	ldrh	r3, [r7, #10]
 800b148:	f083 0310 	eor.w	r3, r3, #16
 800b14c:	817b      	strh	r3, [r7, #10]
 800b14e:	897b      	ldrh	r3, [r7, #10]
 800b150:	f083 0320 	eor.w	r3, r3, #32
 800b154:	817b      	strh	r3, [r7, #10]
 800b156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	441a      	add	r2, r3
 800b170:	897b      	ldrh	r3, [r7, #10]
 800b172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b17a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	b29b      	uxth	r3, r3
 800b184:	8013      	strh	r3, [r2, #0]
 800b186:	f000 bcde 	b.w	800bb46 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	7b1b      	ldrb	r3, [r3, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f040 80bb 	bne.w	800b312 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	699a      	ldr	r2, [r3, #24]
 800b1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d917      	bls.n	800b1e8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d8:	1ad2      	subs	r2, r2, r3
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	619a      	str	r2, [r3, #24]
 800b1e6:	e00e      	b.n	800b206 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2200      	movs	r2, #0
 800b204:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b222:	b29b      	uxth	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b22a:	4413      	add	r3, r2
 800b22c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	011a      	lsls	r2, r3, #4
 800b23e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b242:	4413      	add	r3, r2
 800b244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b264:	2b3e      	cmp	r3, #62	; 0x3e
 800b266:	d924      	bls.n	800b2b2 <USB_EPStartXfer+0xec2>
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	095b      	lsrs	r3, r3, #5
 800b26e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b276:	f003 031f 	and.w	r3, r3, #31
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d104      	bne.n	800b288 <USB_EPStartXfer+0xe98>
 800b27e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b282:	3b01      	subs	r3, #1
 800b284:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b288:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29a      	uxth	r2, r3
 800b290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b294:	b29b      	uxth	r3, r3
 800b296:	029b      	lsls	r3, r3, #10
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4313      	orrs	r3, r2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	f000 bc10 	b.w	800bad2 <USB_EPStartXfer+0x16e2>
 800b2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10c      	bne.n	800b2d4 <USB_EPStartXfer+0xee4>
 800b2ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	e3fe      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	085b      	lsrs	r3, r3, #1
 800b2da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d004      	beq.n	800b2f4 <USB_EPStartXfer+0xf04>
 800b2ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b300:	b29b      	uxth	r3, r3
 800b302:	029b      	lsls	r3, r3, #10
 800b304:	b29b      	uxth	r3, r3
 800b306:	4313      	orrs	r3, r2
 800b308:	b29a      	uxth	r2, r3
 800b30a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b30e:	801a      	strh	r2, [r3, #0]
 800b310:	e3df      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	78db      	ldrb	r3, [r3, #3]
 800b31e:	2b02      	cmp	r3, #2
 800b320:	f040 8218 	bne.w	800b754 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	785b      	ldrb	r3, [r3, #1]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 809d 	bne.w	800b470 <USB_EPStartXfer+0x1080>
 800b336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b352:	b29b      	uxth	r3, r3
 800b354:	461a      	mov	r2, r3
 800b356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35a:	4413      	add	r3, r2
 800b35c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	011a      	lsls	r2, r3, #4
 800b36e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b372:	4413      	add	r3, r2
 800b374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b37c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	b29b      	uxth	r3, r3
 800b384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b388:	b29a      	uxth	r2, r3
 800b38a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b38e:	801a      	strh	r2, [r3, #0]
 800b390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b3e      	cmp	r3, #62	; 0x3e
 800b39e:	d92b      	bls.n	800b3f8 <USB_EPStartXfer+0x1008>
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f003 031f 	and.w	r3, r3, #31
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d104      	bne.n	800b3d0 <USB_EPStartXfer+0xfe0>
 800b3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	029b      	lsls	r3, r3, #10
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3f4:	801a      	strh	r2, [r3, #0]
 800b3f6:	e070      	b.n	800b4da <USB_EPStartXfer+0x10ea>
 800b3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10c      	bne.n	800b422 <USB_EPStartXfer+0x1032>
 800b408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b418:	b29a      	uxth	r2, r3
 800b41a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b41e:	801a      	strh	r2, [r3, #0]
 800b420:	e05b      	b.n	800b4da <USB_EPStartXfer+0x10ea>
 800b422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f003 0301 	and.w	r3, r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <USB_EPStartXfer+0x1062>
 800b448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b44c:	3301      	adds	r3, #1
 800b44e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29a      	uxth	r2, r3
 800b45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b45e:	b29b      	uxth	r3, r3
 800b460:	029b      	lsls	r3, r3, #10
 800b462:	b29b      	uxth	r3, r3
 800b464:	4313      	orrs	r3, r2
 800b466:	b29a      	uxth	r2, r3
 800b468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	e034      	b.n	800b4da <USB_EPStartXfer+0x10ea>
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	785b      	ldrb	r3, [r3, #1]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d12c      	bne.n	800b4da <USB_EPStartXfer+0x10ea>
 800b480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	011a      	lsls	r2, r3, #4
 800b4b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4bc:	4413      	add	r3, r2
 800b4be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4d8:	801a      	strh	r2, [r3, #0]
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	785b      	ldrb	r3, [r3, #1]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f040 809d 	bne.w	800b634 <USB_EPStartXfer+0x1244>
 800b4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b516:	b29b      	uxth	r3, r3
 800b518:	461a      	mov	r2, r3
 800b51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b51e:	4413      	add	r3, r2
 800b520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	011a      	lsls	r2, r3, #4
 800b532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b536:	4413      	add	r3, r2
 800b538:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b53c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b552:	801a      	strh	r2, [r3, #0]
 800b554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	2b3e      	cmp	r3, #62	; 0x3e
 800b562:	d92b      	bls.n	800b5bc <USB_EPStartXfer+0x11cc>
 800b564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	095b      	lsrs	r3, r3, #5
 800b572:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f003 031f 	and.w	r3, r3, #31
 800b586:	2b00      	cmp	r3, #0
 800b588:	d104      	bne.n	800b594 <USB_EPStartXfer+0x11a4>
 800b58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b58e:	3b01      	subs	r3, #1
 800b590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	029b      	lsls	r3, r3, #10
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5b8:	801a      	strh	r2, [r3, #0]
 800b5ba:	e069      	b.n	800b690 <USB_EPStartXfer+0x12a0>
 800b5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d10c      	bne.n	800b5e6 <USB_EPStartXfer+0x11f6>
 800b5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5e2:	801a      	strh	r2, [r3, #0]
 800b5e4:	e054      	b.n	800b690 <USB_EPStartXfer+0x12a0>
 800b5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	085b      	lsrs	r3, r3, #1
 800b5f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d004      	beq.n	800b616 <USB_EPStartXfer+0x1226>
 800b60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b610:	3301      	adds	r3, #1
 800b612:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b616:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b622:	b29b      	uxth	r3, r3
 800b624:	029b      	lsls	r3, r3, #10
 800b626:	b29b      	uxth	r3, r3
 800b628:	4313      	orrs	r3, r2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b630:	801a      	strh	r2, [r3, #0]
 800b632:	e02d      	b.n	800b690 <USB_EPStartXfer+0x12a0>
 800b634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d125      	bne.n	800b690 <USB_EPStartXfer+0x12a0>
 800b644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b652:	b29b      	uxth	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b65a:	4413      	add	r3, r2
 800b65c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	011a      	lsls	r2, r3, #4
 800b66e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b672:	4413      	add	r3, r2
 800b674:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b68e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8218 	beq.w	800bad2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b6c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <USB_EPStartXfer+0x12ea>
 800b6ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10d      	bne.n	800b6f6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f040 81f5 	bne.w	800bad2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 81ee 	bne.w	800bad2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b6f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	b29b      	uxth	r3, r3
 800b714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b71c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b724:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	441a      	add	r2, r3
 800b73a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b73e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b74a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b74e:	b29b      	uxth	r3, r3
 800b750:	8013      	strh	r3, [r2, #0]
 800b752:	e1be      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	78db      	ldrb	r3, [r3, #3]
 800b760:	2b01      	cmp	r3, #1
 800b762:	f040 81b4 	bne.w	800bace <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d917      	bls.n	800b7b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699a      	ldr	r2, [r3, #24]
 800b79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a2:	1ad2      	subs	r2, r2, r3
 800b7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	619a      	str	r2, [r3, #24]
 800b7b0:	e00e      	b.n	800b7d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f040 8085 	bne.w	800b8ec <USB_EPStartXfer+0x14fc>
 800b7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	461a      	mov	r2, r3
 800b802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b806:	4413      	add	r3, r2
 800b808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	011a      	lsls	r2, r3, #4
 800b81a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b81e:	4413      	add	r3, r2
 800b820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	b29b      	uxth	r3, r3
 800b830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b834:	b29a      	uxth	r2, r3
 800b836:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b83a:	801a      	strh	r2, [r3, #0]
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	2b3e      	cmp	r3, #62	; 0x3e
 800b842:	d923      	bls.n	800b88c <USB_EPStartXfer+0x149c>
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	095b      	lsrs	r3, r3, #5
 800b84a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b852:	f003 031f 	and.w	r3, r3, #31
 800b856:	2b00      	cmp	r3, #0
 800b858:	d104      	bne.n	800b864 <USB_EPStartXfer+0x1474>
 800b85a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b85e:	3b01      	subs	r3, #1
 800b860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b870:	b29b      	uxth	r3, r3
 800b872:	029b      	lsls	r3, r3, #10
 800b874:	b29b      	uxth	r3, r3
 800b876:	4313      	orrs	r3, r2
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b87e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b882:	b29a      	uxth	r2, r3
 800b884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	e060      	b.n	800b94e <USB_EPStartXfer+0x155e>
 800b88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10c      	bne.n	800b8ae <USB_EPStartXfer+0x14be>
 800b894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b898:	881b      	ldrh	r3, [r3, #0]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8aa:	801a      	strh	r2, [r3, #0]
 800b8ac:	e04f      	b.n	800b94e <USB_EPStartXfer+0x155e>
 800b8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b2:	085b      	lsrs	r3, r3, #1
 800b8b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d004      	beq.n	800b8ce <USB_EPStartXfer+0x14de>
 800b8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	029b      	lsls	r3, r3, #10
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	e030      	b.n	800b94e <USB_EPStartXfer+0x155e>
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d128      	bne.n	800b94e <USB_EPStartXfer+0x155e>
 800b8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b918:	b29b      	uxth	r3, r3
 800b91a:	461a      	mov	r2, r3
 800b91c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b920:	4413      	add	r3, r2
 800b922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	011a      	lsls	r2, r3, #4
 800b934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b938:	4413      	add	r3, r2
 800b93a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b93e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b946:	b29a      	uxth	r2, r3
 800b948:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b94c:	801a      	strh	r2, [r3, #0]
 800b94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f040 8085 	bne.w	800ba78 <USB_EPStartXfer+0x1688>
 800b96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b992:	4413      	add	r3, r2
 800b994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b99c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	011a      	lsls	r2, r3, #4
 800b9a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9c6:	801a      	strh	r2, [r3, #0]
 800b9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9cc:	2b3e      	cmp	r3, #62	; 0x3e
 800b9ce:	d923      	bls.n	800ba18 <USB_EPStartXfer+0x1628>
 800b9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d4:	095b      	lsrs	r3, r3, #5
 800b9d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9de:	f003 031f 	and.w	r3, r3, #31
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <USB_EPStartXfer+0x1600>
 800b9e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	029b      	lsls	r3, r3, #10
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba14:	801a      	strh	r2, [r3, #0]
 800ba16:	e05c      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10c      	bne.n	800ba3a <USB_EPStartXfer+0x164a>
 800ba20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba36:	801a      	strh	r2, [r3, #0]
 800ba38:	e04b      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
 800ba3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d004      	beq.n	800ba5a <USB_EPStartXfer+0x166a>
 800ba50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba54:	3301      	adds	r3, #1
 800ba56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba5e:	881b      	ldrh	r3, [r3, #0]
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	029b      	lsls	r3, r3, #10
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba74:	801a      	strh	r2, [r3, #0]
 800ba76:	e02c      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
 800ba78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d124      	bne.n	800bad2 <USB_EPStartXfer+0x16e2>
 800ba88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	461a      	mov	r2, r3
 800ba9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba9e:	4413      	add	r3, r2
 800baa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	011a      	lsls	r2, r3, #4
 800bab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bab6:	4413      	add	r3, r2
 800bab8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800babc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	e001      	b.n	800bad2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e03a      	b.n	800bb48 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bafc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bb10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	441a      	add	r2, r3
 800bb2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d020      	beq.n	800bba6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7a:	81bb      	strh	r3, [r7, #12]
 800bb7c:	89bb      	ldrh	r3, [r7, #12]
 800bb7e:	f083 0310 	eor.w	r3, r3, #16
 800bb82:	81bb      	strh	r3, [r7, #12]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	441a      	add	r2, r3
 800bb8e:	89bb      	ldrh	r3, [r7, #12]
 800bb90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	8013      	strh	r3, [r2, #0]
 800bba4:	e01f      	b.n	800bbe6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbbc:	81fb      	strh	r3, [r7, #14]
 800bbbe:	89fb      	ldrh	r3, [r7, #14]
 800bbc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bbc4:	81fb      	strh	r3, [r7, #14]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	441a      	add	r2, r3
 800bbd0:	89fb      	ldrh	r3, [r7, #14]
 800bbd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bc80      	pop	{r7}
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b087      	sub	sp, #28
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	7b1b      	ldrb	r3, [r3, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f040 809d 	bne.w	800bd40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d04c      	beq.n	800bca8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	823b      	strh	r3, [r7, #16]
 800bc1c:	8a3b      	ldrh	r3, [r7, #16]
 800bc1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d01b      	beq.n	800bc5e <USB_EPClearStall+0x6c>
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc3c:	81fb      	strh	r3, [r7, #14]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	441a      	add	r2, r3
 800bc48:	89fb      	ldrh	r3, [r7, #14]
 800bc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	78db      	ldrb	r3, [r3, #3]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d06c      	beq.n	800bd40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc7c:	81bb      	strh	r3, [r7, #12]
 800bc7e:	89bb      	ldrh	r3, [r7, #12]
 800bc80:	f083 0320 	eor.w	r3, r3, #32
 800bc84:	81bb      	strh	r3, [r7, #12]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	441a      	add	r2, r3
 800bc90:	89bb      	ldrh	r3, [r7, #12]
 800bc92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	8013      	strh	r3, [r2, #0]
 800bca6:	e04b      	b.n	800bd40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	82fb      	strh	r3, [r7, #22]
 800bcb6:	8afb      	ldrh	r3, [r7, #22]
 800bcb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01b      	beq.n	800bcf8 <USB_EPClearStall+0x106>
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcd6:	82bb      	strh	r3, [r7, #20]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	441a      	add	r2, r3
 800bce2:	8abb      	ldrh	r3, [r7, #20]
 800bce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0e:	827b      	strh	r3, [r7, #18]
 800bd10:	8a7b      	ldrh	r3, [r7, #18]
 800bd12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bd16:	827b      	strh	r3, [r7, #18]
 800bd18:	8a7b      	ldrh	r3, [r7, #18]
 800bd1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd1e:	827b      	strh	r3, [r7, #18]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	441a      	add	r2, r3
 800bd2a:	8a7b      	ldrh	r3, [r7, #18]
 800bd2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr

0800bd4c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d103      	bne.n	800bd66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2280      	movs	r2, #128	; 0x80
 800bd62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bc80      	pop	{r7}
 800bd70:	4770      	bx	lr

0800bd72 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr

0800bd86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b083      	sub	sp, #12
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bc80      	pop	{r7}
 800bd98:	4770      	bx	lr

0800bd9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b085      	sub	sp, #20
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bdac:	68fb      	ldr	r3, [r7, #12]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bc80      	pop	{r7}
 800bdb6:	4770      	bx	lr

0800bdb8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bc80      	pop	{r7}
 800bdcc:	4770      	bx	lr

0800bdce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b08b      	sub	sp, #44	; 0x2c
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	4611      	mov	r1, r2
 800bdda:	461a      	mov	r2, r3
 800bddc:	460b      	mov	r3, r1
 800bdde:	80fb      	strh	r3, [r7, #6]
 800bde0:	4613      	mov	r3, r2
 800bde2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bde4:	88bb      	ldrh	r3, [r7, #4]
 800bde6:	3301      	adds	r3, #1
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	005a      	lsls	r2, r3, #1
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	627b      	str	r3, [r7, #36]	; 0x24
 800be06:	e01e      	b.n	800be46 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	3301      	adds	r3, #1
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	021b      	lsls	r3, r3, #8
 800be16:	b21a      	sxth	r2, r3
 800be18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	b21b      	sxth	r3, r3
 800be20:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	8a7a      	ldrh	r2, [r7, #18]
 800be26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	3302      	adds	r3, #2
 800be2c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	3302      	adds	r3, #2
 800be32:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	3301      	adds	r3, #1
 800be38:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	3301      	adds	r3, #1
 800be3e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	3b01      	subs	r3, #1
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1dd      	bne.n	800be08 <USB_WritePMA+0x3a>
  }
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	372c      	adds	r7, #44	; 0x2c
 800be52:	46bd      	mov	sp, r7
 800be54:	bc80      	pop	{r7}
 800be56:	4770      	bx	lr

0800be58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be58:	b480      	push	{r7}
 800be5a:	b08b      	sub	sp, #44	; 0x2c
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4611      	mov	r1, r2
 800be64:	461a      	mov	r2, r3
 800be66:	460b      	mov	r3, r1
 800be68:	80fb      	strh	r3, [r7, #6]
 800be6a:	4613      	mov	r3, r2
 800be6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800be6e:	88bb      	ldrh	r3, [r7, #4]
 800be70:	085b      	lsrs	r3, r3, #1
 800be72:	b29b      	uxth	r3, r3
 800be74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	005a      	lsls	r2, r3, #1
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
 800be90:	e01b      	b.n	800beca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	881b      	ldrh	r3, [r3, #0]
 800be96:	b29b      	uxth	r3, r3
 800be98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	3302      	adds	r3, #2
 800be9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	3301      	adds	r3, #1
 800beac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	3301      	adds	r3, #1
 800bebc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	3302      	adds	r3, #2
 800bec2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	3b01      	subs	r3, #1
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e0      	bne.n	800be92 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bed0:	88bb      	ldrh	r3, [r7, #4]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d007      	beq.n	800beec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	701a      	strb	r2, [r3, #0]
  }
}
 800beec:	bf00      	nop
 800beee:	372c      	adds	r7, #44	; 0x2c
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bc80      	pop	{r7}
 800bef4:	4770      	bx	lr

0800bef6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b084      	sub	sp, #16
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	460b      	mov	r3, r1
 800bf00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bf02:	2300      	movs	r3, #0
 800bf04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7c1b      	ldrb	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d115      	bne.n	800bf3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf12:	2202      	movs	r2, #2
 800bf14:	2181      	movs	r1, #129	; 0x81
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f001 fee1 	bl	800dcde <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf26:	2202      	movs	r2, #2
 800bf28:	2101      	movs	r1, #1
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f001 fed7 	bl	800dcde <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800bf38:	e012      	b.n	800bf60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf3a:	2340      	movs	r3, #64	; 0x40
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	2181      	movs	r1, #129	; 0x81
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 fecc 	bl	800dcde <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	2202      	movs	r2, #2
 800bf50:	2101      	movs	r1, #1
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 fec3 	bl	800dcde <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf60:	2308      	movs	r3, #8
 800bf62:	2203      	movs	r2, #3
 800bf64:	2182      	movs	r1, #130	; 0x82
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f001 feb9 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf76:	f001 ffd9 	bl	800df2c <USBD_static_malloc>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
 800bf90:	e026      	b.n	800bfe0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	7c1b      	ldrb	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d109      	bne.n	800bfd0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f001 ff79 	bl	800dec0 <USBD_LL_PrepareReceive>
 800bfce:	e007      	b.n	800bfe0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfd6:	2340      	movs	r3, #64	; 0x40
 800bfd8:	2101      	movs	r1, #1
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 ff70 	bl	800dec0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bffa:	2181      	movs	r1, #129	; 0x81
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 fe94 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 fe8d 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c018:	2182      	movs	r1, #130	; 0x82
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 fe85 	bl	800dd2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00e      	beq.n	800c04e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c040:	4618      	mov	r0, r3
 800c042:	f001 ff7f 	bl	800df44 <USBD_static_free>
    pdev->pClassData = NULL;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c068:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d039      	beq.n	800c0f6 <USBD_CDC_Setup+0x9e>
 800c082:	2b20      	cmp	r3, #32
 800c084:	d17f      	bne.n	800c186 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	88db      	ldrh	r3, [r3, #6]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d029      	beq.n	800c0e2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	b25b      	sxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	da11      	bge.n	800c0bc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c0a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	88d2      	ldrh	r2, [r2, #6]
 800c0aa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0ac:	6939      	ldr	r1, [r7, #16]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	88db      	ldrh	r3, [r3, #6]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 fa0a 	bl	800d4ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c0ba:	e06b      	b.n	800c194 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	785a      	ldrb	r2, [r3, #1]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	88db      	ldrh	r3, [r3, #6]
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0d2:	6939      	ldr	r1, [r7, #16]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	88db      	ldrh	r3, [r3, #6]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f001 fa25 	bl	800d52a <USBD_CtlPrepareRx>
      break;
 800c0e0:	e058      	b.n	800c194 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	7850      	ldrb	r0, [r2, #1]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	4798      	blx	r3
      break;
 800c0f4:	e04e      	b.n	800c194 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	2b0b      	cmp	r3, #11
 800c0fc:	d02e      	beq.n	800c15c <USBD_CDC_Setup+0x104>
 800c0fe:	2b0b      	cmp	r3, #11
 800c100:	dc38      	bgt.n	800c174 <USBD_CDC_Setup+0x11c>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d002      	beq.n	800c10c <USBD_CDC_Setup+0xb4>
 800c106:	2b0a      	cmp	r3, #10
 800c108:	d014      	beq.n	800c134 <USBD_CDC_Setup+0xdc>
 800c10a:	e033      	b.n	800c174 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c112:	2b03      	cmp	r3, #3
 800c114:	d107      	bne.n	800c126 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c116:	f107 030c 	add.w	r3, r7, #12
 800c11a:	2202      	movs	r2, #2
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f001 f9d5 	bl	800d4ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c124:	e02e      	b.n	800c184 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f001 f966 	bl	800d3fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c12e:	2302      	movs	r3, #2
 800c130:	75fb      	strb	r3, [r7, #23]
          break;
 800c132:	e027      	b.n	800c184 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d107      	bne.n	800c14e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c13e:	f107 030f 	add.w	r3, r7, #15
 800c142:	2201      	movs	r2, #1
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f001 f9c1 	bl	800d4ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c14c:	e01a      	b.n	800c184 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 f952 	bl	800d3fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c156:	2302      	movs	r3, #2
 800c158:	75fb      	strb	r3, [r7, #23]
          break;
 800c15a:	e013      	b.n	800c184 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c162:	2b03      	cmp	r3, #3
 800c164:	d00d      	beq.n	800c182 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 f946 	bl	800d3fa <USBD_CtlError>
            ret = USBD_FAIL;
 800c16e:	2302      	movs	r3, #2
 800c170:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c172:	e006      	b.n	800c182 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 f93f 	bl	800d3fa <USBD_CtlError>
          ret = USBD_FAIL;
 800c17c:	2302      	movs	r3, #2
 800c17e:	75fb      	strb	r3, [r7, #23]
          break;
 800c180:	e000      	b.n	800c184 <USBD_CDC_Setup+0x12c>
          break;
 800c182:	bf00      	nop
      }
      break;
 800c184:	e006      	b.n	800c194 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f001 f936 	bl	800d3fa <USBD_CtlError>
      ret = USBD_FAIL;
 800c18e:	2302      	movs	r3, #2
 800c190:	75fb      	strb	r3, [r7, #23]
      break;
 800c192:	bf00      	nop
  }

  return ret;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1b8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d03a      	beq.n	800c23a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	440b      	add	r3, r1
 800c1d2:	331c      	adds	r3, #28
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d029      	beq.n	800c22e <USBD_CDC_DataIn+0x90>
 800c1da:	78fa      	ldrb	r2, [r7, #3]
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	440b      	add	r3, r1
 800c1e8:	331c      	adds	r3, #28
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	78f9      	ldrb	r1, [r7, #3]
 800c1ee:	68b8      	ldr	r0, [r7, #8]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4403      	add	r3, r0
 800c1fa:	3338      	adds	r3, #56	; 0x38
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	fbb2 f1f3 	udiv	r1, r2, r3
 800c202:	fb01 f303 	mul.w	r3, r1, r3
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d110      	bne.n	800c22e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c20c:	78fa      	ldrb	r2, [r7, #3]
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	440b      	add	r3, r1
 800c21a:	331c      	adds	r3, #28
 800c21c:	2200      	movs	r2, #0
 800c21e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c220:	78f9      	ldrb	r1, [r7, #3]
 800c222:	2300      	movs	r3, #0
 800c224:	2200      	movs	r2, #0
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 fe27 	bl	800de7a <USBD_LL_Transmit>
 800c22c:	e003      	b.n	800c236 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	e000      	b.n	800c23c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c23a:	2302      	movs	r3, #2
  }
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c256:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f001 fe52 	bl	800df06 <USBD_LL_GetRxDataSize>
 800c262:	4602      	mov	r2, r0
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00d      	beq.n	800c290 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c288:	4611      	mov	r1, r2
 800c28a:	4798      	blx	r3

    return USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	e000      	b.n	800c292 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c290:	2302      	movs	r3, #2
  }
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d015      	beq.n	800c2e0 <USBD_CDC_EP0_RxReady+0x46>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2ba:	2bff      	cmp	r3, #255	; 0xff
 800c2bc:	d010      	beq.n	800c2e0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c2cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	22ff      	movs	r2, #255	; 0xff
 800c2dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
	...

0800c2ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2243      	movs	r2, #67	; 0x43
 800c2f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c2fa:	4b03      	ldr	r3, [pc, #12]	; (800c308 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	bc80      	pop	{r7}
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	2000009c 	.word	0x2000009c

0800c30c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2243      	movs	r2, #67	; 0x43
 800c318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c31a:	4b03      	ldr	r3, [pc, #12]	; (800c328 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	bc80      	pop	{r7}
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	20000058 	.word	0x20000058

0800c32c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2243      	movs	r2, #67	; 0x43
 800c338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c33a:	4b03      	ldr	r3, [pc, #12]	; (800c348 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	bc80      	pop	{r7}
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	200000e0 	.word	0x200000e0

0800c34c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	220a      	movs	r2, #10
 800c358:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c35a:	4b03      	ldr	r3, [pc, #12]	; (800c368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	bc80      	pop	{r7}
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	20000014 	.word	0x20000014

0800c36c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c376:	2302      	movs	r3, #2
 800c378:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d005      	beq.n	800c38c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	bc80      	pop	{r7}
 800c396:	4770      	bx	lr

0800c398 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3b6:	88fa      	ldrh	r2, [r7, #6]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	371c      	adds	r7, #28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bc80      	pop	{r7}
 800c3c8:	4770      	bx	lr

0800c3ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bc80      	pop	{r7}
 800c3ee:	4770      	bx	lr

0800c3f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c406:	2b00      	cmp	r3, #0
 800c408:	d01c      	beq.n	800c444 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c410:	2b00      	cmp	r3, #0
 800c412:	d115      	bne.n	800c440 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2201      	movs	r2, #1
 800c418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c432:	b29b      	uxth	r3, r3
 800c434:	2181      	movs	r1, #129	; 0x81
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f001 fd1f 	bl	800de7a <USBD_LL_Transmit>

      return USBD_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e002      	b.n	800c446 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c440:	2301      	movs	r3, #1
 800c442:	e000      	b.n	800c446 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c444:	2302      	movs	r3, #2
  }
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c464:	2b00      	cmp	r3, #0
 800c466:	d017      	beq.n	800c498 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7c1b      	ldrb	r3, [r3, #16]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d109      	bne.n	800c484 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c47a:	2101      	movs	r1, #1
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f001 fd1f 	bl	800dec0 <USBD_LL_PrepareReceive>
 800c482:	e007      	b.n	800c494 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	2101      	movs	r1, #1
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f001 fd16 	bl	800dec0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	e000      	b.n	800c49a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c498:	2302      	movs	r3, #2
  }
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	e01a      	b.n	800c4f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	79fa      	ldrb	r2, [r7, #7]
 800c4e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f001 fb83 	bl	800dbf4 <USBD_LL_Init>

  return USBD_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
 800c518:	e001      	b.n	800c51e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c51a:	2302      	movs	r3, #2
 800c51c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr

0800c52a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f001 fbb8 	bl	800dca8 <USBD_LL_Start>

  return USBD_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	bc80      	pop	{r7}
 800c554:	4770      	bx	lr

0800c556 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b084      	sub	sp, #16
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	460b      	mov	r3, r1
 800c560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c562:	2302      	movs	r3, #2
 800c564:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00c      	beq.n	800c58a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	78fa      	ldrb	r2, [r7, #3]
 800c57a:	4611      	mov	r1, r2
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	4798      	blx	r3
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	460b      	mov	r3, r1
 800c59e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	78fa      	ldrb	r2, [r7, #3]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3

  return USBD_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fed8 	bl	800d382 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c5ee:	f003 031f 	and.w	r3, r3, #31
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d016      	beq.n	800c624 <USBD_LL_SetupStage+0x6a>
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d81c      	bhi.n	800c634 <USBD_LL_SetupStage+0x7a>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d002      	beq.n	800c604 <USBD_LL_SetupStage+0x4a>
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d008      	beq.n	800c614 <USBD_LL_SetupStage+0x5a>
 800c602:	e017      	b.n	800c634 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f9cb 	bl	800c9a8 <USBD_StdDevReq>
      break;
 800c612:	e01a      	b.n	800c64a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c61a:	4619      	mov	r1, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fa2d 	bl	800ca7c <USBD_StdItfReq>
      break;
 800c622:	e012      	b.n	800c64a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fa6d 	bl	800cb0c <USBD_StdEPReq>
      break;
 800c632:	e00a      	b.n	800c64a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c63a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fb90 	bl	800dd68 <USBD_LL_StallEP>
      break;
 800c648:	bf00      	nop
  }

  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	460b      	mov	r3, r1
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c662:	7afb      	ldrb	r3, [r7, #11]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d14b      	bne.n	800c700 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c66e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c676:	2b03      	cmp	r3, #3
 800c678:	d134      	bne.n	800c6e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	68da      	ldr	r2, [r3, #12]
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	429a      	cmp	r2, r3
 800c684:	d919      	bls.n	800c6ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	68da      	ldr	r2, [r3, #12]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d203      	bcs.n	800c6a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	e002      	b.n	800c6ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 ff57 	bl	800d566 <USBD_CtlContinueRx>
 800c6b8:	e038      	b.n	800c72c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d105      	bne.n	800c6dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f000 ff54 	bl	800d58a <USBD_CtlSendStatus>
 800c6e2:	e023      	b.n	800c72c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6ea:	2b05      	cmp	r3, #5
 800c6ec:	d11e      	bne.n	800c72c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f001 fb35 	bl	800dd68 <USBD_LL_StallEP>
 800c6fe:	e015      	b.n	800c72c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00d      	beq.n	800c728 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c712:	2b03      	cmp	r3, #3
 800c714:	d108      	bne.n	800c728 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	7afa      	ldrb	r2, [r7, #11]
 800c720:	4611      	mov	r1, r2
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	4798      	blx	r3
 800c726:	e001      	b.n	800c72c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c728:	2302      	movs	r3, #2
 800c72a:	e000      	b.n	800c72e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b086      	sub	sp, #24
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	460b      	mov	r3, r1
 800c740:	607a      	str	r2, [r7, #4]
 800c742:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c744:	7afb      	ldrb	r3, [r7, #11]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d17f      	bne.n	800c84a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3314      	adds	r3, #20
 800c74e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c756:	2b02      	cmp	r3, #2
 800c758:	d15c      	bne.n	800c814 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	429a      	cmp	r2, r3
 800c764:	d915      	bls.n	800c792 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	6879      	ldr	r1, [r7, #4]
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f000 fec1 	bl	800d506 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c784:	2300      	movs	r3, #0
 800c786:	2200      	movs	r2, #0
 800c788:	2100      	movs	r1, #0
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f001 fb98 	bl	800dec0 <USBD_LL_PrepareReceive>
 800c790:	e04e      	b.n	800c830 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	697a      	ldr	r2, [r7, #20]
 800c798:	6912      	ldr	r2, [r2, #16]
 800c79a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c79e:	fb01 f202 	mul.w	r2, r1, r2
 800c7a2:	1a9b      	subs	r3, r3, r2
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d11c      	bne.n	800c7e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	689a      	ldr	r2, [r3, #8]
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d316      	bcc.n	800c7e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d20f      	bcs.n	800c7e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f000 fe9d 	bl	800d506 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	2100      	movs	r1, #0
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f001 fb70 	bl	800dec0 <USBD_LL_PrepareReceive>
 800c7e0:	e026      	b.n	800c830 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d105      	bne.n	800c804 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c804:	2180      	movs	r1, #128	; 0x80
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f001 faae 	bl	800dd68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 fecf 	bl	800d5b0 <USBD_CtlReceiveStatus>
 800c812:	e00d      	b.n	800c830 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c81a:	2b04      	cmp	r3, #4
 800c81c:	d004      	beq.n	800c828 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c824:	2b00      	cmp	r3, #0
 800c826:	d103      	bne.n	800c830 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c828:	2180      	movs	r1, #128	; 0x80
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f001 fa9c 	bl	800dd68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c836:	2b01      	cmp	r3, #1
 800c838:	d11d      	bne.n	800c876 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff fe81 	bl	800c542 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c848:	e015      	b.n	800c876 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00d      	beq.n	800c872 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d108      	bne.n	800c872 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	7afa      	ldrb	r2, [r7, #11]
 800c86a:	4611      	mov	r1, r2
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	4798      	blx	r3
 800c870:	e001      	b.n	800c876 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c872:	2302      	movs	r3, #2
 800c874:	e000      	b.n	800c878 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3718      	adds	r7, #24
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c888:	2340      	movs	r3, #64	; 0x40
 800c88a:	2200      	movs	r2, #0
 800c88c:	2100      	movs	r1, #0
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f001 fa25 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2240      	movs	r2, #64	; 0x40
 800c8a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8a4:	2340      	movs	r3, #64	; 0x40
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2180      	movs	r1, #128	; 0x80
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f001 fa17 	bl	800dcde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2240      	movs	r2, #64	; 0x40
 800c8ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d009      	beq.n	800c8f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6852      	ldr	r2, [r2, #4]
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	4798      	blx	r3
  }

  return USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c902:	b480      	push	{r7}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	78fa      	ldrb	r2, [r7, #3]
 800c912:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bc80      	pop	{r7}
 800c91e:	4770      	bx	lr

0800c920 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2204      	movs	r2, #4
 800c938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	bc80      	pop	{r7}
 800c946:	4770      	bx	lr

0800c948 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c956:	2b04      	cmp	r3, #4
 800c958:	d105      	bne.n	800c966 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bc80      	pop	{r7}
 800c970:	4770      	bx	lr

0800c972 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c980:	2b03      	cmp	r3, #3
 800c982:	d10b      	bne.n	800c99c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c996:	69db      	ldr	r3, [r3, #28]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9be:	2b40      	cmp	r3, #64	; 0x40
 800c9c0:	d005      	beq.n	800c9ce <USBD_StdDevReq+0x26>
 800c9c2:	2b40      	cmp	r3, #64	; 0x40
 800c9c4:	d84f      	bhi.n	800ca66 <USBD_StdDevReq+0xbe>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d009      	beq.n	800c9de <USBD_StdDevReq+0x36>
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	d14b      	bne.n	800ca66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	4798      	blx	r3
      break;
 800c9dc:	e048      	b.n	800ca70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	785b      	ldrb	r3, [r3, #1]
 800c9e2:	2b09      	cmp	r3, #9
 800c9e4:	d839      	bhi.n	800ca5a <USBD_StdDevReq+0xb2>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <USBD_StdDevReq+0x44>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca3d 	.word	0x0800ca3d
 800c9f0:	0800ca51 	.word	0x0800ca51
 800c9f4:	0800ca5b 	.word	0x0800ca5b
 800c9f8:	0800ca47 	.word	0x0800ca47
 800c9fc:	0800ca5b 	.word	0x0800ca5b
 800ca00:	0800ca1f 	.word	0x0800ca1f
 800ca04:	0800ca15 	.word	0x0800ca15
 800ca08:	0800ca5b 	.word	0x0800ca5b
 800ca0c:	0800ca33 	.word	0x0800ca33
 800ca10:	0800ca29 	.word	0x0800ca29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f9dc 	bl	800cdd4 <USBD_GetDescriptor>
          break;
 800ca1c:	e022      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fb3f 	bl	800d0a4 <USBD_SetAddress>
          break;
 800ca26:	e01d      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ca28:	6839      	ldr	r1, [r7, #0]
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 fb7e 	bl	800d12c <USBD_SetConfig>
          break;
 800ca30:	e018      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fc07 	bl	800d248 <USBD_GetConfig>
          break;
 800ca3a:	e013      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fc37 	bl	800d2b2 <USBD_GetStatus>
          break;
 800ca44:	e00e      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fc65 	bl	800d318 <USBD_SetFeature>
          break;
 800ca4e:	e009      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fc74 	bl	800d340 <USBD_ClrFeature>
          break;
 800ca58:	e004      	b.n	800ca64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fccc 	bl	800d3fa <USBD_CtlError>
          break;
 800ca62:	bf00      	nop
      }
      break;
 800ca64:	e004      	b.n	800ca70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 fcc6 	bl	800d3fa <USBD_CtlError>
      break;
 800ca6e:	bf00      	nop
  }

  return ret;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop

0800ca7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca92:	2b40      	cmp	r3, #64	; 0x40
 800ca94:	d005      	beq.n	800caa2 <USBD_StdItfReq+0x26>
 800ca96:	2b40      	cmp	r3, #64	; 0x40
 800ca98:	d82e      	bhi.n	800caf8 <USBD_StdItfReq+0x7c>
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <USBD_StdItfReq+0x26>
 800ca9e:	2b20      	cmp	r3, #32
 800caa0:	d12a      	bne.n	800caf8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa8:	3b01      	subs	r3, #1
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d81d      	bhi.n	800caea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	889b      	ldrh	r3, [r3, #4]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d813      	bhi.n	800cae0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	4798      	blx	r3
 800cac6:	4603      	mov	r3, r0
 800cac8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	88db      	ldrh	r3, [r3, #6]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d110      	bne.n	800caf4 <USBD_StdItfReq+0x78>
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10d      	bne.n	800caf4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fd56 	bl	800d58a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cade:	e009      	b.n	800caf4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cae0:	6839      	ldr	r1, [r7, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f000 fc89 	bl	800d3fa <USBD_CtlError>
          break;
 800cae8:	e004      	b.n	800caf4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fc84 	bl	800d3fa <USBD_CtlError>
          break;
 800caf2:	e000      	b.n	800caf6 <USBD_StdItfReq+0x7a>
          break;
 800caf4:	bf00      	nop
      }
      break;
 800caf6:	e004      	b.n	800cb02 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800caf8:	6839      	ldr	r1, [r7, #0]
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 fc7d 	bl	800d3fa <USBD_CtlError>
      break;
 800cb00:	bf00      	nop
  }

  return USBD_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	889b      	ldrh	r3, [r3, #4]
 800cb1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb28:	2b40      	cmp	r3, #64	; 0x40
 800cb2a:	d007      	beq.n	800cb3c <USBD_StdEPReq+0x30>
 800cb2c:	2b40      	cmp	r3, #64	; 0x40
 800cb2e:	f200 8146 	bhi.w	800cdbe <USBD_StdEPReq+0x2b2>
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <USBD_StdEPReq+0x40>
 800cb36:	2b20      	cmp	r3, #32
 800cb38:	f040 8141 	bne.w	800cdbe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	4798      	blx	r3
      break;
 800cb4a:	e13d      	b.n	800cdc8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb54:	2b20      	cmp	r3, #32
 800cb56:	d10a      	bne.n	800cb6e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	4798      	blx	r3
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	e12d      	b.n	800cdca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	785b      	ldrb	r3, [r3, #1]
 800cb72:	2b03      	cmp	r3, #3
 800cb74:	d007      	beq.n	800cb86 <USBD_StdEPReq+0x7a>
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	f300 811b 	bgt.w	800cdb2 <USBD_StdEPReq+0x2a6>
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d072      	beq.n	800cc66 <USBD_StdEPReq+0x15a>
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d03a      	beq.n	800cbfa <USBD_StdEPReq+0xee>
 800cb84:	e115      	b.n	800cdb2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d002      	beq.n	800cb96 <USBD_StdEPReq+0x8a>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d015      	beq.n	800cbc0 <USBD_StdEPReq+0xb4>
 800cb94:	e02b      	b.n	800cbee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00c      	beq.n	800cbb6 <USBD_StdEPReq+0xaa>
 800cb9c:	7bbb      	ldrb	r3, [r7, #14]
 800cb9e:	2b80      	cmp	r3, #128	; 0x80
 800cba0:	d009      	beq.n	800cbb6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cba2:	7bbb      	ldrb	r3, [r7, #14]
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 f8de 	bl	800dd68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cbac:	2180      	movs	r1, #128	; 0x80
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 f8da 	bl	800dd68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbb4:	e020      	b.n	800cbf8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fc1e 	bl	800d3fa <USBD_CtlError>
              break;
 800cbbe:	e01b      	b.n	800cbf8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	885b      	ldrh	r3, [r3, #2]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10e      	bne.n	800cbe6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800cbc8:	7bbb      	ldrb	r3, [r7, #14]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00b      	beq.n	800cbe6 <USBD_StdEPReq+0xda>
 800cbce:	7bbb      	ldrb	r3, [r7, #14]
 800cbd0:	2b80      	cmp	r3, #128	; 0x80
 800cbd2:	d008      	beq.n	800cbe6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	88db      	ldrh	r3, [r3, #6]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d104      	bne.n	800cbe6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f001 f8c1 	bl	800dd68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fccf 	bl	800d58a <USBD_CtlSendStatus>

              break;
 800cbec:	e004      	b.n	800cbf8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fc02 	bl	800d3fa <USBD_CtlError>
              break;
 800cbf6:	bf00      	nop
          }
          break;
 800cbf8:	e0e0      	b.n	800cdbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d002      	beq.n	800cc0a <USBD_StdEPReq+0xfe>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d015      	beq.n	800cc34 <USBD_StdEPReq+0x128>
 800cc08:	e026      	b.n	800cc58 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc0a:	7bbb      	ldrb	r3, [r7, #14]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00c      	beq.n	800cc2a <USBD_StdEPReq+0x11e>
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	2b80      	cmp	r3, #128	; 0x80
 800cc14:	d009      	beq.n	800cc2a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cc16:	7bbb      	ldrb	r3, [r7, #14]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f8a4 	bl	800dd68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cc20:	2180      	movs	r1, #128	; 0x80
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f001 f8a0 	bl	800dd68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc28:	e01c      	b.n	800cc64 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 fbe4 	bl	800d3fa <USBD_CtlError>
              break;
 800cc32:	e017      	b.n	800cc64 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	885b      	ldrh	r3, [r3, #2]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d112      	bne.n	800cc62 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc3c:	7bbb      	ldrb	r3, [r7, #14]
 800cc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d004      	beq.n	800cc50 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 f8ab 	bl	800dda6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fc9a 	bl	800d58a <USBD_CtlSendStatus>
              }
              break;
 800cc56:	e004      	b.n	800cc62 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fbcd 	bl	800d3fa <USBD_CtlError>
              break;
 800cc60:	e000      	b.n	800cc64 <USBD_StdEPReq+0x158>
              break;
 800cc62:	bf00      	nop
          }
          break;
 800cc64:	e0aa      	b.n	800cdbc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d002      	beq.n	800cc76 <USBD_StdEPReq+0x16a>
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d032      	beq.n	800ccda <USBD_StdEPReq+0x1ce>
 800cc74:	e097      	b.n	800cda6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <USBD_StdEPReq+0x180>
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	2b80      	cmp	r3, #128	; 0x80
 800cc80:	d004      	beq.n	800cc8c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fbb8 	bl	800d3fa <USBD_CtlError>
                break;
 800cc8a:	e091      	b.n	800cdb0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	da0b      	bge.n	800ccac <USBD_StdEPReq+0x1a0>
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	4413      	add	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	3310      	adds	r3, #16
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	4413      	add	r3, r2
 800cca8:	3304      	adds	r3, #4
 800ccaa:	e00b      	b.n	800ccc4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2202      	movs	r2, #2
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fbfb 	bl	800d4ce <USBD_CtlSendData>
              break;
 800ccd8:	e06a      	b.n	800cdb0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	da11      	bge.n	800cd06 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	f003 020f 	and.w	r2, r3, #15
 800cce8:	6879      	ldr	r1, [r7, #4]
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3318      	adds	r3, #24
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d117      	bne.n	800cd2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fb7b 	bl	800d3fa <USBD_CtlError>
                  break;
 800cd04:	e054      	b.n	800cdb0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	f003 020f 	and.w	r2, r3, #15
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	440b      	add	r3, r1
 800cd18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d104      	bne.n	800cd2c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fb68 	bl	800d3fa <USBD_CtlError>
                  break;
 800cd2a:	e041      	b.n	800cdb0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	da0b      	bge.n	800cd4c <USBD_StdEPReq+0x240>
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	3310      	adds	r3, #16
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	4413      	add	r3, r2
 800cd48:	3304      	adds	r3, #4
 800cd4a:	e00b      	b.n	800cd64 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	4413      	add	r3, r2
 800cd62:	3304      	adds	r3, #4
 800cd64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <USBD_StdEPReq+0x266>
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	2b80      	cmp	r3, #128	; 0x80
 800cd70:	d103      	bne.n	800cd7a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
 800cd78:	e00e      	b.n	800cd98 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 f830 	bl	800dde4 <USBD_LL_IsStallEP>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d003      	beq.n	800cd92 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]
 800cd90:	e002      	b.n	800cd98 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fb95 	bl	800d4ce <USBD_CtlSendData>
              break;
 800cda4:	e004      	b.n	800cdb0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fb26 	bl	800d3fa <USBD_CtlError>
              break;
 800cdae:	bf00      	nop
          }
          break;
 800cdb0:	e004      	b.n	800cdbc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fb20 	bl	800d3fa <USBD_CtlError>
          break;
 800cdba:	bf00      	nop
      }
      break;
 800cdbc:	e004      	b.n	800cdc8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 fb1a 	bl	800d3fa <USBD_CtlError>
      break;
 800cdc6:	bf00      	nop
  }

  return ret;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	885b      	ldrh	r3, [r3, #2]
 800cdee:	0a1b      	lsrs	r3, r3, #8
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b06      	cmp	r3, #6
 800cdf6:	f200 8128 	bhi.w	800d04a <USBD_GetDescriptor+0x276>
 800cdfa:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <USBD_GetDescriptor+0x2c>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce1d 	.word	0x0800ce1d
 800ce04:	0800ce35 	.word	0x0800ce35
 800ce08:	0800ce75 	.word	0x0800ce75
 800ce0c:	0800d04b 	.word	0x0800d04b
 800ce10:	0800d04b 	.word	0x0800d04b
 800ce14:	0800cfeb 	.word	0x0800cfeb
 800ce18:	0800d017 	.word	0x0800d017
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	7c12      	ldrb	r2, [r2, #16]
 800ce28:	f107 0108 	add.w	r1, r7, #8
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	4798      	blx	r3
 800ce30:	60f8      	str	r0, [r7, #12]
      break;
 800ce32:	e112      	b.n	800d05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7c1b      	ldrb	r3, [r3, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10d      	bne.n	800ce58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce44:	f107 0208 	add.w	r2, r7, #8
 800ce48:	4610      	mov	r0, r2
 800ce4a:	4798      	blx	r3
 800ce4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	2202      	movs	r2, #2
 800ce54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce56:	e100      	b.n	800d05a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce60:	f107 0208 	add.w	r2, r7, #8
 800ce64:	4610      	mov	r0, r2
 800ce66:	4798      	blx	r3
 800ce68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	2202      	movs	r2, #2
 800ce70:	701a      	strb	r2, [r3, #0]
      break;
 800ce72:	e0f2      	b.n	800d05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	885b      	ldrh	r3, [r3, #2]
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b05      	cmp	r3, #5
 800ce7c:	f200 80ac 	bhi.w	800cfd8 <USBD_GetDescriptor+0x204>
 800ce80:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <USBD_GetDescriptor+0xb4>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cea1 	.word	0x0800cea1
 800ce8c:	0800ced5 	.word	0x0800ced5
 800ce90:	0800cf09 	.word	0x0800cf09
 800ce94:	0800cf3d 	.word	0x0800cf3d
 800ce98:	0800cf71 	.word	0x0800cf71
 800ce9c:	0800cfa5 	.word	0x0800cfa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	7c12      	ldrb	r2, [r2, #16]
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec2:	e091      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fa97 	bl	800d3fa <USBD_CtlError>
            err++;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	3301      	adds	r3, #1
 800ced0:	72fb      	strb	r3, [r7, #11]
          break;
 800ced2:	e089      	b.n	800cfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7c12      	ldrb	r2, [r2, #16]
 800ceec:	f107 0108 	add.w	r1, r7, #8
 800cef0:	4610      	mov	r0, r2
 800cef2:	4798      	blx	r3
 800cef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cef6:	e077      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa7d 	bl	800d3fa <USBD_CtlError>
            err++;
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	3301      	adds	r3, #1
 800cf04:	72fb      	strb	r3, [r7, #11]
          break;
 800cf06:	e06f      	b.n	800cfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00b      	beq.n	800cf2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	7c12      	ldrb	r2, [r2, #16]
 800cf20:	f107 0108 	add.w	r1, r7, #8
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2a:	e05d      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fa63 	bl	800d3fa <USBD_CtlError>
            err++;
 800cf34:	7afb      	ldrb	r3, [r7, #11]
 800cf36:	3301      	adds	r3, #1
 800cf38:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3a:	e055      	b.n	800cfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	7c12      	ldrb	r2, [r2, #16]
 800cf54:	f107 0108 	add.w	r1, r7, #8
 800cf58:	4610      	mov	r0, r2
 800cf5a:	4798      	blx	r3
 800cf5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf5e:	e043      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fa49 	bl	800d3fa <USBD_CtlError>
            err++;
 800cf68:	7afb      	ldrb	r3, [r7, #11]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf6e:	e03b      	b.n	800cfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d00b      	beq.n	800cf94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	7c12      	ldrb	r2, [r2, #16]
 800cf88:	f107 0108 	add.w	r1, r7, #8
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4798      	blx	r3
 800cf90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf92:	e029      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa2f 	bl	800d3fa <USBD_CtlError>
            err++;
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfa2:	e021      	b.n	800cfe8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d00b      	beq.n	800cfc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	7c12      	ldrb	r2, [r2, #16]
 800cfbc:	f107 0108 	add.w	r1, r7, #8
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
 800cfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfc6:	e00f      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cfc8:	6839      	ldr	r1, [r7, #0]
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fa15 	bl	800d3fa <USBD_CtlError>
            err++;
 800cfd0:	7afb      	ldrb	r3, [r7, #11]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfd6:	e007      	b.n	800cfe8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa0d 	bl	800d3fa <USBD_CtlError>
          err++;
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cfe6:	e038      	b.n	800d05a <USBD_GetDescriptor+0x286>
 800cfe8:	e037      	b.n	800d05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	7c1b      	ldrb	r3, [r3, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d109      	bne.n	800d006 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cffa:	f107 0208 	add.w	r2, r7, #8
 800cffe:	4610      	mov	r0, r2
 800d000:	4798      	blx	r3
 800d002:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d004:	e029      	b.n	800d05a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9f6 	bl	800d3fa <USBD_CtlError>
        err++;
 800d00e:	7afb      	ldrb	r3, [r7, #11]
 800d010:	3301      	adds	r3, #1
 800d012:	72fb      	strb	r3, [r7, #11]
      break;
 800d014:	e021      	b.n	800d05a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	7c1b      	ldrb	r3, [r3, #16]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10d      	bne.n	800d03a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d026:	f107 0208 	add.w	r2, r7, #8
 800d02a:	4610      	mov	r0, r2
 800d02c:	4798      	blx	r3
 800d02e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	3301      	adds	r3, #1
 800d034:	2207      	movs	r2, #7
 800d036:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d038:	e00f      	b.n	800d05a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f9dc 	bl	800d3fa <USBD_CtlError>
        err++;
 800d042:	7afb      	ldrb	r3, [r7, #11]
 800d044:	3301      	adds	r3, #1
 800d046:	72fb      	strb	r3, [r7, #11]
      break;
 800d048:	e007      	b.n	800d05a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f9d4 	bl	800d3fa <USBD_CtlError>
      err++;
 800d052:	7afb      	ldrb	r3, [r7, #11]
 800d054:	3301      	adds	r3, #1
 800d056:	72fb      	strb	r3, [r7, #11]
      break;
 800d058:	bf00      	nop
  }

  if (err != 0U)
 800d05a:	7afb      	ldrb	r3, [r7, #11]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d11c      	bne.n	800d09a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d060:	893b      	ldrh	r3, [r7, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d011      	beq.n	800d08a <USBD_GetDescriptor+0x2b6>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00d      	beq.n	800d08a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	88da      	ldrh	r2, [r3, #6]
 800d072:	893b      	ldrh	r3, [r7, #8]
 800d074:	4293      	cmp	r3, r2
 800d076:	bf28      	it	cs
 800d078:	4613      	movcs	r3, r2
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d07e:	893b      	ldrh	r3, [r7, #8]
 800d080:	461a      	mov	r2, r3
 800d082:	68f9      	ldr	r1, [r7, #12]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fa22 	bl	800d4ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	88db      	ldrh	r3, [r3, #6]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d104      	bne.n	800d09c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fa79 	bl	800d58a <USBD_CtlSendStatus>
 800d098:	e000      	b.n	800d09c <USBD_GetDescriptor+0x2c8>
    return;
 800d09a:	bf00      	nop
    }
  }
}
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop

0800d0a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	889b      	ldrh	r3, [r3, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d130      	bne.n	800d118 <USBD_SetAddress+0x74>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	88db      	ldrh	r3, [r3, #6]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d12c      	bne.n	800d118 <USBD_SetAddress+0x74>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	885b      	ldrh	r3, [r3, #2]
 800d0c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c4:	d828      	bhi.n	800d118 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	885b      	ldrh	r3, [r3, #2]
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d104      	bne.n	800d0e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f98b 	bl	800d3fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e4:	e01d      	b.n	800d122 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7bfa      	ldrb	r2, [r7, #15]
 800d0ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fea2 	bl	800de3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fa46 	bl	800d58a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2202      	movs	r2, #2
 800d108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d10c:	e009      	b.n	800d122 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d116:	e004      	b.n	800d122 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f96d 	bl	800d3fa <USBD_CtlError>
  }
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
	...

0800d12c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	4b41      	ldr	r3, [pc, #260]	; (800d244 <USBD_SetConfig+0x118>)
 800d13e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d140:	4b40      	ldr	r3, [pc, #256]	; (800d244 <USBD_SetConfig+0x118>)
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d904      	bls.n	800d152 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f955 	bl	800d3fa <USBD_CtlError>
 800d150:	e075      	b.n	800d23e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d002      	beq.n	800d162 <USBD_SetConfig+0x36>
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d023      	beq.n	800d1a8 <USBD_SetConfig+0x7c>
 800d160:	e062      	b.n	800d228 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d162:	4b38      	ldr	r3, [pc, #224]	; (800d244 <USBD_SetConfig+0x118>)
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d01a      	beq.n	800d1a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d16a:	4b36      	ldr	r3, [pc, #216]	; (800d244 <USBD_SetConfig+0x118>)
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2203      	movs	r2, #3
 800d178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d17c:	4b31      	ldr	r3, [pc, #196]	; (800d244 <USBD_SetConfig+0x118>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f7ff f9e7 	bl	800c556 <USBD_SetClassConfig>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d104      	bne.n	800d198 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f932 	bl	800d3fa <USBD_CtlError>
            return;
 800d196:	e052      	b.n	800d23e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f9f6 	bl	800d58a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d19e:	e04e      	b.n	800d23e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f9f2 	bl	800d58a <USBD_CtlSendStatus>
        break;
 800d1a6:	e04a      	b.n	800d23e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d1a8:	4b26      	ldr	r3, [pc, #152]	; (800d244 <USBD_SetConfig+0x118>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d112      	bne.n	800d1d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d1b8:	4b22      	ldr	r3, [pc, #136]	; (800d244 <USBD_SetConfig+0x118>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d1c2:	4b20      	ldr	r3, [pc, #128]	; (800d244 <USBD_SetConfig+0x118>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff f9e3 	bl	800c594 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f9db 	bl	800d58a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d1d4:	e033      	b.n	800d23e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d1d6:	4b1b      	ldr	r3, [pc, #108]	; (800d244 <USBD_SetConfig+0x118>)
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d01d      	beq.n	800d220 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff f9d1 	bl	800c594 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d1f2:	4b14      	ldr	r3, [pc, #80]	; (800d244 <USBD_SetConfig+0x118>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1fc:	4b11      	ldr	r3, [pc, #68]	; (800d244 <USBD_SetConfig+0x118>)
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff f9a7 	bl	800c556 <USBD_SetClassConfig>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d104      	bne.n	800d218 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f8f2 	bl	800d3fa <USBD_CtlError>
            return;
 800d216:	e012      	b.n	800d23e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f9b6 	bl	800d58a <USBD_CtlSendStatus>
        break;
 800d21e:	e00e      	b.n	800d23e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f9b2 	bl	800d58a <USBD_CtlSendStatus>
        break;
 800d226:	e00a      	b.n	800d23e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f8e5 	bl	800d3fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d230:	4b04      	ldr	r3, [pc, #16]	; (800d244 <USBD_SetConfig+0x118>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff f9ac 	bl	800c594 <USBD_ClrClassConfig>
        break;
 800d23c:	bf00      	nop
    }
  }
}
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	20000384 	.word	0x20000384

0800d248 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	88db      	ldrh	r3, [r3, #6]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d004      	beq.n	800d264 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 f8cc 	bl	800d3fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d262:	e022      	b.n	800d2aa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	dc02      	bgt.n	800d274 <USBD_GetConfig+0x2c>
 800d26e:	2b00      	cmp	r3, #0
 800d270:	dc03      	bgt.n	800d27a <USBD_GetConfig+0x32>
 800d272:	e015      	b.n	800d2a0 <USBD_GetConfig+0x58>
 800d274:	2b03      	cmp	r3, #3
 800d276:	d00b      	beq.n	800d290 <USBD_GetConfig+0x48>
 800d278:	e012      	b.n	800d2a0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3308      	adds	r3, #8
 800d284:	2201      	movs	r2, #1
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f920 	bl	800d4ce <USBD_CtlSendData>
        break;
 800d28e:	e00c      	b.n	800d2aa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3304      	adds	r3, #4
 800d294:	2201      	movs	r2, #1
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f918 	bl	800d4ce <USBD_CtlSendData>
        break;
 800d29e:	e004      	b.n	800d2aa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f8a9 	bl	800d3fa <USBD_CtlError>
        break;
 800d2a8:	bf00      	nop
}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d81e      	bhi.n	800d306 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	88db      	ldrh	r3, [r3, #6]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d004      	beq.n	800d2da <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f891 	bl	800d3fa <USBD_CtlError>
        break;
 800d2d8:	e01a      	b.n	800d310 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d005      	beq.n	800d2f6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	f043 0202 	orr.w	r2, r3, #2
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	330c      	adds	r3, #12
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f8e5 	bl	800d4ce <USBD_CtlSendData>
      break;
 800d304:	e004      	b.n	800d310 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f876 	bl	800d3fa <USBD_CtlError>
      break;
 800d30e:	bf00      	nop
  }
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	885b      	ldrh	r3, [r3, #2]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d106      	bne.n	800d338 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f929 	bl	800d58a <USBD_CtlSendStatus>
  }
}
 800d338:	bf00      	nop
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d350:	3b01      	subs	r3, #1
 800d352:	2b02      	cmp	r3, #2
 800d354:	d80b      	bhi.n	800d36e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d10c      	bne.n	800d378 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f90f 	bl	800d58a <USBD_CtlSendStatus>
      }
      break;
 800d36c:	e004      	b.n	800d378 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f842 	bl	800d3fa <USBD_CtlError>
      break;
 800d376:	e000      	b.n	800d37a <USBD_ClrFeature+0x3a>
      break;
 800d378:	bf00      	nop
  }
}
 800d37a:	bf00      	nop
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	781a      	ldrb	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	785a      	ldrb	r2, [r3, #1]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	3302      	adds	r3, #2
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	3303      	adds	r3, #3
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	021b      	lsls	r3, r3, #8
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	4413      	add	r3, r2
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	3305      	adds	r3, #5
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	021b      	lsls	r3, r3, #8
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4413      	add	r3, r2
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	3306      	adds	r3, #6
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	3307      	adds	r3, #7
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	021b      	lsls	r3, r3, #8
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4413      	add	r3, r2
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	80da      	strh	r2, [r3, #6]

}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bc80      	pop	{r7}
 800d3f8:	4770      	bx	lr

0800d3fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b082      	sub	sp, #8
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d404:	2180      	movs	r1, #128	; 0x80
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fcae 	bl	800dd68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d40c:	2100      	movs	r1, #0
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fcaa 	bl	800dd68 <USBD_LL_StallEP>
}
 800d414:	bf00      	nop
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d428:	2300      	movs	r3, #0
 800d42a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d032      	beq.n	800d498 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 f834 	bl	800d4a0 <USBD_GetLen>
 800d438:	4603      	mov	r3, r0
 800d43a:	3301      	adds	r3, #1
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	b29a      	uxth	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	75fa      	strb	r2, [r7, #23]
 800d44c:	461a      	mov	r2, r3
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	4413      	add	r3, r2
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	7812      	ldrb	r2, [r2, #0]
 800d456:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	75fa      	strb	r2, [r7, #23]
 800d45e:	461a      	mov	r2, r3
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	4413      	add	r3, r2
 800d464:	2203      	movs	r2, #3
 800d466:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d468:	e012      	b.n	800d490 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	60fa      	str	r2, [r7, #12]
 800d470:	7dfa      	ldrb	r2, [r7, #23]
 800d472:	1c51      	adds	r1, r2, #1
 800d474:	75f9      	strb	r1, [r7, #23]
 800d476:	4611      	mov	r1, r2
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	440a      	add	r2, r1
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	75fa      	strb	r2, [r7, #23]
 800d486:	461a      	mov	r2, r3
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	4413      	add	r3, r2
 800d48c:	2200      	movs	r2, #0
 800d48e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e8      	bne.n	800d46a <USBD_GetString+0x4e>
    }
  }
}
 800d498:	bf00      	nop
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d4ac:	e005      	b.n	800d4ba <USBD_GetLen+0x1a>
  {
    len++;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1f5      	bne.n	800d4ae <USBD_GetLen+0xe>
  }

  return len;
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3714      	adds	r7, #20
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bc80      	pop	{r7}
 800d4cc:	4770      	bx	lr

0800d4ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b084      	sub	sp, #16
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d4e4:	88fa      	ldrh	r2, [r7, #6]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d4ea:	88fa      	ldrh	r2, [r7, #6]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d4f0:	88fb      	ldrh	r3, [r7, #6]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f000 fcbf 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b084      	sub	sp, #16
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	60f8      	str	r0, [r7, #12]
 800d50e:	60b9      	str	r1, [r7, #8]
 800d510:	4613      	mov	r3, r2
 800d512:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d514:	88fb      	ldrh	r3, [r7, #6]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	2100      	movs	r1, #0
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f000 fcad 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	60f8      	str	r0, [r7, #12]
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	4613      	mov	r3, r2
 800d536:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2203      	movs	r2, #3
 800d53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d540:	88fa      	ldrh	r2, [r7, #6]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d548:	88fa      	ldrh	r2, [r7, #6]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d550:	88fb      	ldrh	r3, [r7, #6]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	2100      	movs	r1, #0
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 fcb2 	bl	800dec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b084      	sub	sp, #16
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	4613      	mov	r3, r2
 800d572:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d574:	88fb      	ldrh	r3, [r7, #6]
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	2100      	movs	r1, #0
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f000 fca0 	bl	800dec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b082      	sub	sp, #8
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2204      	movs	r2, #4
 800d596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d59a:	2300      	movs	r3, #0
 800d59c:	2200      	movs	r2, #0
 800d59e:	2100      	movs	r1, #0
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fc6a 	bl	800de7a <USBD_LL_Transmit>

  return USBD_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2205      	movs	r2, #5
 800d5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fc7a 	bl	800dec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
	...

0800d5d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4912      	ldr	r1, [pc, #72]	; (800d628 <MX_USB_DEVICE_Init+0x50>)
 800d5e0:	4812      	ldr	r0, [pc, #72]	; (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d5e2:	f7fe ff5e 	bl	800c4a2 <USBD_Init>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5ec:	f7f5 ffc8 	bl	8003580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5f0:	490f      	ldr	r1, [pc, #60]	; (800d630 <MX_USB_DEVICE_Init+0x58>)
 800d5f2:	480e      	ldr	r0, [pc, #56]	; (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d5f4:	f7fe ff80 	bl	800c4f8 <USBD_RegisterClass>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d001      	beq.n	800d602 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d5fe:	f7f5 ffbf 	bl	8003580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d602:	490c      	ldr	r1, [pc, #48]	; (800d634 <MX_USB_DEVICE_Init+0x5c>)
 800d604:	4809      	ldr	r0, [pc, #36]	; (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d606:	f7fe feb1 	bl	800c36c <USBD_CDC_RegisterInterface>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d610:	f7f5 ffb6 	bl	8003580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d614:	4805      	ldr	r0, [pc, #20]	; (800d62c <MX_USB_DEVICE_Init+0x54>)
 800d616:	f7fe ff88 	bl	800c52a <USBD_Start>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d620:	f7f5 ffae 	bl	8003580 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000134 	.word	0x20000134
 800d62c:	20000388 	.word	0x20000388
 800d630:	20000020 	.word	0x20000020
 800d634:	20000124 	.word	0x20000124

0800d638 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d63c:	2200      	movs	r2, #0
 800d63e:	4905      	ldr	r1, [pc, #20]	; (800d654 <CDC_Init_FS+0x1c>)
 800d640:	4805      	ldr	r0, [pc, #20]	; (800d658 <CDC_Init_FS+0x20>)
 800d642:	f7fe fea9 	bl	800c398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d646:	4905      	ldr	r1, [pc, #20]	; (800d65c <CDC_Init_FS+0x24>)
 800d648:	4803      	ldr	r0, [pc, #12]	; (800d658 <CDC_Init_FS+0x20>)
 800d64a:	f7fe febe 	bl	800c3ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d64e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d650:	4618      	mov	r0, r3
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20000a3c 	.word	0x20000a3c
 800d658:	20000388 	.word	0x20000388
 800d65c:	20000654 	.word	0x20000654

0800d660 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d660:	b480      	push	{r7}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d664:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d666:	4618      	mov	r0, r3
 800d668:	46bd      	mov	sp, r7
 800d66a:	bc80      	pop	{r7}
 800d66c:	4770      	bx	lr
	...

0800d670 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	6039      	str	r1, [r7, #0]
 800d67a:	71fb      	strb	r3, [r7, #7]
 800d67c:	4613      	mov	r3, r2
 800d67e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	2b23      	cmp	r3, #35	; 0x23
 800d684:	f200 8098 	bhi.w	800d7b8 <CDC_Control_FS+0x148>
 800d688:	a201      	add	r2, pc, #4	; (adr r2, 800d690 <CDC_Control_FS+0x20>)
 800d68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68e:	bf00      	nop
 800d690:	0800d7b9 	.word	0x0800d7b9
 800d694:	0800d7b9 	.word	0x0800d7b9
 800d698:	0800d7b9 	.word	0x0800d7b9
 800d69c:	0800d7b9 	.word	0x0800d7b9
 800d6a0:	0800d7b9 	.word	0x0800d7b9
 800d6a4:	0800d7b9 	.word	0x0800d7b9
 800d6a8:	0800d7b9 	.word	0x0800d7b9
 800d6ac:	0800d7b9 	.word	0x0800d7b9
 800d6b0:	0800d7b9 	.word	0x0800d7b9
 800d6b4:	0800d7b9 	.word	0x0800d7b9
 800d6b8:	0800d7b9 	.word	0x0800d7b9
 800d6bc:	0800d7b9 	.word	0x0800d7b9
 800d6c0:	0800d7b9 	.word	0x0800d7b9
 800d6c4:	0800d7b9 	.word	0x0800d7b9
 800d6c8:	0800d7b9 	.word	0x0800d7b9
 800d6cc:	0800d7b9 	.word	0x0800d7b9
 800d6d0:	0800d7b9 	.word	0x0800d7b9
 800d6d4:	0800d7b9 	.word	0x0800d7b9
 800d6d8:	0800d7b9 	.word	0x0800d7b9
 800d6dc:	0800d7b9 	.word	0x0800d7b9
 800d6e0:	0800d7b9 	.word	0x0800d7b9
 800d6e4:	0800d7b9 	.word	0x0800d7b9
 800d6e8:	0800d7b9 	.word	0x0800d7b9
 800d6ec:	0800d7b9 	.word	0x0800d7b9
 800d6f0:	0800d7b9 	.word	0x0800d7b9
 800d6f4:	0800d7b9 	.word	0x0800d7b9
 800d6f8:	0800d7b9 	.word	0x0800d7b9
 800d6fc:	0800d7b9 	.word	0x0800d7b9
 800d700:	0800d7b9 	.word	0x0800d7b9
 800d704:	0800d7b9 	.word	0x0800d7b9
 800d708:	0800d7b9 	.word	0x0800d7b9
 800d70c:	0800d7b9 	.word	0x0800d7b9
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d765 	.word	0x0800d765
 800d718:	0800d7b9 	.word	0x0800d7b9
 800d71c:	0800d7b9 	.word	0x0800d7b9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
	case CDC_SET_LINE_CODING:
		line_coding.bitrate = (uint32_t) (pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	021b      	lsls	r3, r3, #8
 800d72e:	431a      	orrs	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	3302      	adds	r3, #2
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	041b      	lsls	r3, r3, #16
 800d738:	431a      	orrs	r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	3303      	adds	r3, #3
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	061b      	lsls	r3, r3, #24
 800d742:	4313      	orrs	r3, r2
 800d744:	461a      	mov	r2, r3
 800d746:	4b20      	ldr	r3, [pc, #128]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d748:	601a      	str	r2, [r3, #0]
		line_coding.format = pbuf[4];
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	791a      	ldrb	r2, [r3, #4]
 800d74e:	4b1e      	ldr	r3, [pc, #120]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d750:	711a      	strb	r2, [r3, #4]
		line_coding.parity = pbuf[5];
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	795a      	ldrb	r2, [r3, #5]
 800d756:	4b1c      	ldr	r3, [pc, #112]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d758:	715a      	strb	r2, [r3, #5]
		line_coding.data_bits = pbuf[6];
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	799a      	ldrb	r2, [r3, #6]
 800d75e:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d760:	719a      	strb	r2, [r3, #6]
	break;
 800d762:	e02a      	b.n	800d7ba <CDC_Control_FS+0x14a>

	case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t) (line_coding.bitrate);
 800d764:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t) (line_coding.bitrate >> 8);
 800d76e:	4b16      	ldr	r3, [pc, #88]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	0a1a      	lsrs	r2, r3, #8
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	3301      	adds	r3, #1
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t) (line_coding.bitrate >> 16);
 800d77c:	4b12      	ldr	r3, [pc, #72]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	0c1a      	lsrs	r2, r3, #16
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	3302      	adds	r3, #2
 800d786:	b2d2      	uxtb	r2, r2
 800d788:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t) (line_coding.bitrate >> 24);
 800d78a:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	0e1a      	lsrs	r2, r3, #24
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	3303      	adds	r3, #3
 800d794:	b2d2      	uxtb	r2, r2
 800d796:	701a      	strb	r2, [r3, #0]
		pbuf[4] = line_coding.format;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	3304      	adds	r3, #4
 800d79c:	4a0a      	ldr	r2, [pc, #40]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d79e:	7912      	ldrb	r2, [r2, #4]
 800d7a0:	701a      	strb	r2, [r3, #0]
		pbuf[5] = line_coding.parity;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	3305      	adds	r3, #5
 800d7a6:	4a08      	ldr	r2, [pc, #32]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d7a8:	7952      	ldrb	r2, [r2, #5]
 800d7aa:	701a      	strb	r2, [r3, #0]
		pbuf[6] = line_coding.data_bits;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	3306      	adds	r3, #6
 800d7b0:	4a05      	ldr	r2, [pc, #20]	; (800d7c8 <CDC_Control_FS+0x158>)
 800d7b2:	7992      	ldrb	r2, [r2, #6]
 800d7b4:	701a      	strb	r2, [r3, #0]
	break;
 800d7b6:	e000      	b.n	800d7ba <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d7b8:	bf00      	nop
  }

  return (USBD_OK);
 800d7ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bc80      	pop	{r7}
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	2000064c 	.word	0x2000064c

0800d7cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	4809      	ldr	r0, [pc, #36]	; (800d800 <CDC_Receive_FS+0x34>)
 800d7da:	f7fe fdf6 	bl	800c3ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d7de:	4808      	ldr	r0, [pc, #32]	; (800d800 <CDC_Receive_FS+0x34>)
 800d7e0:	f7fe fe35 	bl	800c44e <USBD_CDC_ReceivePacket>

  ringbuf_memcpy_into(input_data_buffer, Buf, *Len);
 800d7e4:	4b07      	ldr	r3, [pc, #28]	; (800d804 <CDC_Receive_FS+0x38>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	6879      	ldr	r1, [r7, #4]
 800d7f0:	f7f5 fb92 	bl	8002f18 <ringbuf_memcpy_into>

  return (USBD_OK);
 800d7f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20000388 	.word	0x20000388
 800d804:	2000031c 	.word	0x2000031c

0800d808 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d814:	2300      	movs	r3, #0
 800d816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d818:	4b0d      	ldr	r3, [pc, #52]	; (800d850 <CDC_Transmit_FS+0x48>)
 800d81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d826:	2b00      	cmp	r3, #0
 800d828:	d001      	beq.n	800d82e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e00b      	b.n	800d846 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d82e:	887b      	ldrh	r3, [r7, #2]
 800d830:	461a      	mov	r2, r3
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	4806      	ldr	r0, [pc, #24]	; (800d850 <CDC_Transmit_FS+0x48>)
 800d836:	f7fe fdaf 	bl	800c398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d83a:	4805      	ldr	r0, [pc, #20]	; (800d850 <CDC_Transmit_FS+0x48>)
 800d83c:	f7fe fdd8 	bl	800c3f0 <USBD_CDC_TransmitPacket>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d844:	7bfb      	ldrb	r3, [r7, #15]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20000388 	.word	0x20000388

0800d854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	4603      	mov	r3, r0
 800d85c:	6039      	str	r1, [r7, #0]
 800d85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2212      	movs	r2, #18
 800d864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d866:	4b03      	ldr	r3, [pc, #12]	; (800d874 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bc80      	pop	{r7}
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	20000150 	.word	0x20000150

0800d878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	6039      	str	r1, [r7, #0]
 800d882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2204      	movs	r2, #4
 800d888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d88a:	4b03      	ldr	r3, [pc, #12]	; (800d898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	bc80      	pop	{r7}
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	20000164 	.word	0x20000164

0800d89c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8a8:	79fb      	ldrb	r3, [r7, #7]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d105      	bne.n	800d8ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	4907      	ldr	r1, [pc, #28]	; (800d8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8b2:	4808      	ldr	r0, [pc, #32]	; (800d8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d8b4:	f7ff fdb2 	bl	800d41c <USBD_GetString>
 800d8b8:	e004      	b.n	800d8c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	4904      	ldr	r1, [pc, #16]	; (800d8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d8be:	4805      	ldr	r0, [pc, #20]	; (800d8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d8c0:	f7ff fdac 	bl	800d41c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8c4:	4b02      	ldr	r3, [pc, #8]	; (800d8d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	20000e24 	.word	0x20000e24
 800d8d4:	0800f5b8 	.word	0x0800f5b8

0800d8d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	4904      	ldr	r1, [pc, #16]	; (800d8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8e8:	4804      	ldr	r0, [pc, #16]	; (800d8fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8ea:	f7ff fd97 	bl	800d41c <USBD_GetString>
  return USBD_StrDesc;
 800d8ee:	4b02      	ldr	r3, [pc, #8]	; (800d8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20000e24 	.word	0x20000e24
 800d8fc:	0800f5d0 	.word	0x0800f5d0

0800d900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	6039      	str	r1, [r7, #0]
 800d90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	221a      	movs	r2, #26
 800d910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d912:	f000 f843 	bl	800d99c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d916:	4b02      	ldr	r3, [pc, #8]	; (800d920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000168 	.word	0x20000168

0800d924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	6039      	str	r1, [r7, #0]
 800d92e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d105      	bne.n	800d942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	4907      	ldr	r1, [pc, #28]	; (800d958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d93a:	4808      	ldr	r0, [pc, #32]	; (800d95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d93c:	f7ff fd6e 	bl	800d41c <USBD_GetString>
 800d940:	e004      	b.n	800d94c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	4904      	ldr	r1, [pc, #16]	; (800d958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d946:	4805      	ldr	r0, [pc, #20]	; (800d95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d948:	f7ff fd68 	bl	800d41c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d94c:	4b02      	ldr	r3, [pc, #8]	; (800d958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20000e24 	.word	0x20000e24
 800d95c:	0800f5e4 	.word	0x0800f5e4

0800d960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	6039      	str	r1, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d105      	bne.n	800d97e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d972:	683a      	ldr	r2, [r7, #0]
 800d974:	4907      	ldr	r1, [pc, #28]	; (800d994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d976:	4808      	ldr	r0, [pc, #32]	; (800d998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d978:	f7ff fd50 	bl	800d41c <USBD_GetString>
 800d97c:	e004      	b.n	800d988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	4904      	ldr	r1, [pc, #16]	; (800d994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d982:	4805      	ldr	r0, [pc, #20]	; (800d998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d984:	f7ff fd4a 	bl	800d41c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d988:	4b02      	ldr	r3, [pc, #8]	; (800d994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	20000e24 	.word	0x20000e24
 800d998:	0800f5f0 	.word	0x0800f5f0

0800d99c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d9a2:	4b0f      	ldr	r3, [pc, #60]	; (800d9e0 <Get_SerialNum+0x44>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9a8:	4b0e      	ldr	r3, [pc, #56]	; (800d9e4 <Get_SerialNum+0x48>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9ae:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <Get_SerialNum+0x4c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d009      	beq.n	800d9d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9c2:	2208      	movs	r2, #8
 800d9c4:	4909      	ldr	r1, [pc, #36]	; (800d9ec <Get_SerialNum+0x50>)
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 f814 	bl	800d9f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9cc:	2204      	movs	r2, #4
 800d9ce:	4908      	ldr	r1, [pc, #32]	; (800d9f0 <Get_SerialNum+0x54>)
 800d9d0:	68b8      	ldr	r0, [r7, #8]
 800d9d2:	f000 f80f 	bl	800d9f4 <IntToUnicode>
  }
}
 800d9d6:	bf00      	nop
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	1ffff7e8 	.word	0x1ffff7e8
 800d9e4:	1ffff7ec 	.word	0x1ffff7ec
 800d9e8:	1ffff7f0 	.word	0x1ffff7f0
 800d9ec:	2000016a 	.word	0x2000016a
 800d9f0:	2000017a 	.word	0x2000017a

0800d9f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	4613      	mov	r3, r2
 800da00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da06:	2300      	movs	r3, #0
 800da08:	75fb      	strb	r3, [r7, #23]
 800da0a:	e027      	b.n	800da5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	0f1b      	lsrs	r3, r3, #28
 800da10:	2b09      	cmp	r3, #9
 800da12:	d80b      	bhi.n	800da2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	0f1b      	lsrs	r3, r3, #28
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	7dfb      	ldrb	r3, [r7, #23]
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	4619      	mov	r1, r3
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	440b      	add	r3, r1
 800da24:	3230      	adds	r2, #48	; 0x30
 800da26:	b2d2      	uxtb	r2, r2
 800da28:	701a      	strb	r2, [r3, #0]
 800da2a:	e00a      	b.n	800da42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	0f1b      	lsrs	r3, r3, #28
 800da30:	b2da      	uxtb	r2, r3
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	4619      	mov	r1, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	440b      	add	r3, r1
 800da3c:	3237      	adds	r2, #55	; 0x37
 800da3e:	b2d2      	uxtb	r2, r2
 800da40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	011b      	lsls	r3, r3, #4
 800da46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	005b      	lsls	r3, r3, #1
 800da4c:	3301      	adds	r3, #1
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	4413      	add	r3, r2
 800da52:	2200      	movs	r2, #0
 800da54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da56:	7dfb      	ldrb	r3, [r7, #23]
 800da58:	3301      	adds	r3, #1
 800da5a:	75fb      	strb	r3, [r7, #23]
 800da5c:	7dfa      	ldrb	r2, [r7, #23]
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	429a      	cmp	r2, r3
 800da62:	d3d3      	bcc.n	800da0c <IntToUnicode+0x18>
  }
}
 800da64:	bf00      	nop
 800da66:	bf00      	nop
 800da68:	371c      	adds	r7, #28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bc80      	pop	{r7}
 800da6e:	4770      	bx	lr

0800da70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a0d      	ldr	r2, [pc, #52]	; (800dab4 <HAL_PCD_MspInit+0x44>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d113      	bne.n	800daaa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800da82:	4b0d      	ldr	r3, [pc, #52]	; (800dab8 <HAL_PCD_MspInit+0x48>)
 800da84:	69db      	ldr	r3, [r3, #28]
 800da86:	4a0c      	ldr	r2, [pc, #48]	; (800dab8 <HAL_PCD_MspInit+0x48>)
 800da88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da8c:	61d3      	str	r3, [r2, #28]
 800da8e:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <HAL_PCD_MspInit+0x48>)
 800da90:	69db      	ldr	r3, [r3, #28]
 800da92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800da9a:	2200      	movs	r2, #0
 800da9c:	2100      	movs	r1, #0
 800da9e:	2014      	movs	r0, #20
 800daa0:	f7f6 fe9b 	bl	80047da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800daa4:	2014      	movs	r0, #20
 800daa6:	f7f6 feb4 	bl	8004812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	40005c00 	.word	0x40005c00
 800dab8:	40021000 	.word	0x40021000

0800dabc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800dad0:	4619      	mov	r1, r3
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7fe fd71 	bl	800c5ba <USBD_LL_SetupStage>
}
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800daf2:	78fa      	ldrb	r2, [r7, #3]
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	4613      	mov	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	440b      	add	r3, r1
 800db00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	78fb      	ldrb	r3, [r7, #3]
 800db08:	4619      	mov	r1, r3
 800db0a:	f7fe fda3 	bl	800c654 <USBD_LL_DataOutStage>
}
 800db0e:	bf00      	nop
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800db28:	78fa      	ldrb	r2, [r7, #3]
 800db2a:	6879      	ldr	r1, [r7, #4]
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	440b      	add	r3, r1
 800db36:	333c      	adds	r3, #60	; 0x3c
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	78fb      	ldrb	r3, [r7, #3]
 800db3c:	4619      	mov	r1, r3
 800db3e:	f7fe fdfa 	bl	800c736 <USBD_LL_DataInStage>
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe ff0a 	bl	800c972 <USBD_LL_SOF>
}
 800db5e:	bf00      	nop
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800db6e:	2301      	movs	r3, #1
 800db70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b02      	cmp	r3, #2
 800db78:	d001      	beq.n	800db7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800db7a:	f7f5 fd01 	bl	8003580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db84:	7bfa      	ldrb	r2, [r7, #15]
 800db86:	4611      	mov	r1, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fe feba 	bl	800c902 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fe73 	bl	800c880 <USBD_LL_Reset>
}
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe feb4 	bl	800c920 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d005      	beq.n	800dbcc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dbc0:	4b04      	ldr	r3, [pc, #16]	; (800dbd4 <HAL_PCD_SuspendCallback+0x30>)
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	4a03      	ldr	r2, [pc, #12]	; (800dbd4 <HAL_PCD_SuspendCallback+0x30>)
 800dbc6:	f043 0306 	orr.w	r3, r3, #6
 800dbca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	e000ed00 	.word	0xe000ed00

0800dbd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fe feae 	bl	800c948 <USBD_LL_Resume>
}
 800dbec:	bf00      	nop
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800dbfc:	4a28      	ldr	r2, [pc, #160]	; (800dca0 <USBD_LL_Init+0xac>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a26      	ldr	r2, [pc, #152]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800dc0c:	4b24      	ldr	r3, [pc, #144]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc0e:	4a25      	ldr	r2, [pc, #148]	; (800dca4 <USBD_LL_Init+0xb0>)
 800dc10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dc12:	4b23      	ldr	r3, [pc, #140]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc14:	2208      	movs	r2, #8
 800dc16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dc18:	4b21      	ldr	r3, [pc, #132]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dc1e:	4b20      	ldr	r3, [pc, #128]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dc24:	4b1e      	ldr	r3, [pc, #120]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dc2a:	4b1d      	ldr	r3, [pc, #116]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dc30:	481b      	ldr	r0, [pc, #108]	; (800dca0 <USBD_LL_Init+0xac>)
 800dc32:	f7f7 fec0 	bl	80059b6 <HAL_PCD_Init>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800dc3c:	f7f5 fca0 	bl	8003580 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc46:	2318      	movs	r3, #24
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	f7f9 fbdf 	bl	800740e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc56:	2358      	movs	r3, #88	; 0x58
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2180      	movs	r1, #128	; 0x80
 800dc5c:	f7f9 fbd7 	bl	800740e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc66:	23c0      	movs	r3, #192	; 0xc0
 800dc68:	2200      	movs	r2, #0
 800dc6a:	2181      	movs	r1, #129	; 0x81
 800dc6c:	f7f9 fbcf 	bl	800740e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc76:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	f7f9 fbc6 	bl	800740e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2182      	movs	r1, #130	; 0x82
 800dc90:	f7f9 fbbd 	bl	800740e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20001024 	.word	0x20001024
 800dca4:	40005c00 	.word	0x40005c00

0800dca8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7f7 ff78 	bl	8005bb4 <HAL_PCD_Start>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 f94e 	bl	800df6c <USBD_Get_USB_Status>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b084      	sub	sp, #16
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
 800dce6:	4608      	mov	r0, r1
 800dce8:	4611      	mov	r1, r2
 800dcea:	461a      	mov	r2, r3
 800dcec:	4603      	mov	r3, r0
 800dcee:	70fb      	strb	r3, [r7, #3]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70bb      	strb	r3, [r7, #2]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dd06:	78bb      	ldrb	r3, [r7, #2]
 800dd08:	883a      	ldrh	r2, [r7, #0]
 800dd0a:	78f9      	ldrb	r1, [r7, #3]
 800dd0c:	f7f8 f8cd 	bl	8005eaa <HAL_PCD_EP_Open>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd14:	7bfb      	ldrb	r3, [r7, #15]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 f928 	bl	800df6c <USBD_Get_USB_Status>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd44:	78fa      	ldrb	r2, [r7, #3]
 800dd46:	4611      	mov	r1, r2
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7f8 f90b 	bl	8005f64 <HAL_PCD_EP_Close>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd52:	7bfb      	ldrb	r3, [r7, #15]
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 f909 	bl	800df6c <USBD_Get_USB_Status>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b084      	sub	sp, #16
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd82:	78fa      	ldrb	r2, [r7, #3]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7f8 f9b3 	bl	80060f2 <HAL_PCD_EP_SetStall>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 f8ea 	bl	800df6c <USBD_Get_USB_Status>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddc0:	78fa      	ldrb	r2, [r7, #3]
 800ddc2:	4611      	mov	r1, r2
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f8 f9f4 	bl	80061b2 <HAL_PCD_EP_ClrStall>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 f8cb 	bl	800df6c <USBD_Get_USB_Status>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3710      	adds	r7, #16
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ddf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	da0c      	bge.n	800de1a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de06:	68f9      	ldr	r1, [r7, #12]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	4613      	mov	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	00db      	lsls	r3, r3, #3
 800de12:	440b      	add	r3, r1
 800de14:	3302      	adds	r3, #2
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	e00b      	b.n	800de32 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de20:	68f9      	ldr	r1, [r7, #12]
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	440b      	add	r3, r1
 800de2c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800de30:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de32:	4618      	mov	r0, r3
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	bc80      	pop	{r7}
 800de3a:	4770      	bx	lr

0800de3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	460b      	mov	r3, r1
 800de46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f8 f800 	bl	8005e60 <HAL_PCD_SetAddress>
 800de60:	4603      	mov	r3, r0
 800de62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f880 	bl	800df6c <USBD_Get_USB_Status>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de70:	7bbb      	ldrb	r3, [r7, #14]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b086      	sub	sp, #24
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	461a      	mov	r2, r3
 800de86:	460b      	mov	r3, r1
 800de88:	72fb      	strb	r3, [r7, #11]
 800de8a:	4613      	mov	r3, r2
 800de8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de9c:	893b      	ldrh	r3, [r7, #8]
 800de9e:	7af9      	ldrb	r1, [r7, #11]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	f7f8 f8ef 	bl	8006084 <HAL_PCD_EP_Transmit>
 800dea6:	4603      	mov	r3, r0
 800dea8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	4618      	mov	r0, r3
 800deae:	f000 f85d 	bl	800df6c <USBD_Get_USB_Status>
 800deb2:	4603      	mov	r3, r0
 800deb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800deb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	607a      	str	r2, [r7, #4]
 800deca:	461a      	mov	r2, r3
 800decc:	460b      	mov	r3, r1
 800dece:	72fb      	strb	r3, [r7, #11]
 800ded0:	4613      	mov	r3, r2
 800ded2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded8:	2300      	movs	r3, #0
 800deda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dee2:	893b      	ldrh	r3, [r7, #8]
 800dee4:	7af9      	ldrb	r1, [r7, #11]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	f7f8 f884 	bl	8005ff4 <HAL_PCD_EP_Receive>
 800deec:	4603      	mov	r3, r0
 800deee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	4618      	mov	r0, r3
 800def4:	f000 f83a 	bl	800df6c <USBD_Get_USB_Status>
 800def8:	4603      	mov	r3, r0
 800defa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800defc:	7dbb      	ldrb	r3, [r7, #22]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3718      	adds	r7, #24
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b082      	sub	sp, #8
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
 800df0e:	460b      	mov	r3, r1
 800df10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df18:	78fa      	ldrb	r2, [r7, #3]
 800df1a:	4611      	mov	r1, r2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7f8 f89a 	bl	8006056 <HAL_PCD_EP_GetRxCount>
 800df22:	4603      	mov	r3, r0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df34:	4b02      	ldr	r3, [pc, #8]	; (800df40 <USBD_static_malloc+0x14>)
}
 800df36:	4618      	mov	r0, r3
 800df38:	370c      	adds	r7, #12
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bc80      	pop	{r7}
 800df3e:	4770      	bx	lr
 800df40:	20001314 	.word	0x20001314

0800df44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]

}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	bc80      	pop	{r7}
 800df54:	4770      	bx	lr

0800df56 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	460b      	mov	r3, r1
 800df60:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800df62:	bf00      	nop
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	bc80      	pop	{r7}
 800df6a:	4770      	bx	lr

0800df6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b085      	sub	sp, #20
 800df70:	af00      	add	r7, sp, #0
 800df72:	4603      	mov	r3, r0
 800df74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d817      	bhi.n	800dfb0 <USBD_Get_USB_Status+0x44>
 800df80:	a201      	add	r2, pc, #4	; (adr r2, 800df88 <USBD_Get_USB_Status+0x1c>)
 800df82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df86:	bf00      	nop
 800df88:	0800df99 	.word	0x0800df99
 800df8c:	0800df9f 	.word	0x0800df9f
 800df90:	0800dfa5 	.word	0x0800dfa5
 800df94:	0800dfab 	.word	0x0800dfab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800df98:	2300      	movs	r3, #0
 800df9a:	73fb      	strb	r3, [r7, #15]
    break;
 800df9c:	e00b      	b.n	800dfb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df9e:	2302      	movs	r3, #2
 800dfa0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa2:	e008      	b.n	800dfb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa8:	e005      	b.n	800dfb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfaa:	2302      	movs	r3, #2
 800dfac:	73fb      	strb	r3, [r7, #15]
    break;
 800dfae:	e002      	b.n	800dfb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb4:	bf00      	nop
  }
  return usb_status;
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bc80      	pop	{r7}
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop

0800dfc4 <_ZdlPv>:
 800dfc4:	f000 b940 	b.w	800e248 <free>

0800dfc8 <_ZdlPvj>:
 800dfc8:	f7ff bffc 	b.w	800dfc4 <_ZdlPv>

0800dfcc <_Znwj>:
 800dfcc:	2801      	cmp	r0, #1
 800dfce:	bf38      	it	cc
 800dfd0:	2001      	movcc	r0, #1
 800dfd2:	b510      	push	{r4, lr}
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 f92e 	bl	800e238 <malloc>
 800dfdc:	b930      	cbnz	r0, 800dfec <_Znwj+0x20>
 800dfde:	f000 f8c1 	bl	800e164 <_ZSt15get_new_handlerv>
 800dfe2:	b908      	cbnz	r0, 800dfe8 <_Znwj+0x1c>
 800dfe4:	f000 f8c6 	bl	800e174 <abort>
 800dfe8:	4780      	blx	r0
 800dfea:	e7f4      	b.n	800dfd6 <_Znwj+0xa>
 800dfec:	bd10      	pop	{r4, pc}

0800dfee <_ZNSaIcEC1Ev>:
 800dfee:	4770      	bx	lr

0800dff0 <_ZNSaIcEC1ERKS_>:
 800dff0:	4770      	bx	lr

0800dff2 <_ZNSaIcED1Ev>:
 800dff2:	4770      	bx	lr

0800dff4 <_ZSt17__throw_bad_allocv>:
 800dff4:	b508      	push	{r3, lr}
 800dff6:	f000 f8bd 	bl	800e174 <abort>

0800dffa <_ZSt19__throw_logic_errorPKc>:
 800dffa:	b508      	push	{r3, lr}
 800dffc:	f000 f8ba 	bl	800e174 <abort>

0800e000 <_ZSt20__throw_length_errorPKc>:
 800e000:	b508      	push	{r3, lr}
 800e002:	f000 f8b7 	bl	800e174 <abort>

0800e006 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800e006:	b40f      	push	{r0, r1, r2, r3}
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	f107 0410 	add.w	r4, r7, #16
 800e012:	f854 5b04 	ldr.w	r5, [r4], #4
 800e016:	4628      	mov	r0, r5
 800e018:	f7f2 f898 	bl	800014c <strlen>
 800e01c:	f200 2307 	addw	r3, r0, #519	; 0x207
 800e020:	f023 0307 	bic.w	r3, r3, #7
 800e024:	ebad 0d03 	sub.w	sp, sp, r3
 800e028:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800e02c:	4623      	mov	r3, r4
 800e02e:	462a      	mov	r2, r5
 800e030:	4668      	mov	r0, sp
 800e032:	607c      	str	r4, [r7, #4]
 800e034:	f000 f854 	bl	800e0e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800e038:	f000 f89c 	bl	800e174 <abort>

0800e03c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800e03c:	4606      	mov	r6, r0
 800e03e:	460c      	mov	r4, r1
 800e040:	b580      	push	{r7, lr}
 800e042:	b09c      	sub	sp, #112	; 0x70
 800e044:	af00      	add	r7, sp, #0
 800e046:	1ba4      	subs	r4, r4, r6
 800e048:	2269      	movs	r2, #105	; 0x69
 800e04a:	490e      	ldr	r1, [pc, #56]	; (800e084 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800e04c:	1d38      	adds	r0, r7, #4
 800e04e:	f000 f913 	bl	800e278 <memcpy>
 800e052:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800e056:	f023 0307 	bic.w	r3, r3, #7
 800e05a:	ebad 0d03 	sub.w	sp, sp, r3
 800e05e:	466d      	mov	r5, sp
 800e060:	2268      	movs	r2, #104	; 0x68
 800e062:	1d39      	adds	r1, r7, #4
 800e064:	4628      	mov	r0, r5
 800e066:	f000 f907 	bl	800e278 <memcpy>
 800e06a:	4622      	mov	r2, r4
 800e06c:	4631      	mov	r1, r6
 800e06e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800e072:	f000 f901 	bl	800e278 <memcpy>
 800e076:	2300      	movs	r3, #0
 800e078:	442c      	add	r4, r5
 800e07a:	4628      	mov	r0, r5
 800e07c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800e080:	f7ff ffbb 	bl	800dffa <_ZSt19__throw_logic_errorPKc>
 800e084:	0800f682 	.word	0x0800f682

0800e088 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	b084      	sub	sp, #16
 800e090:	466d      	mov	r5, sp
 800e092:	f105 040c 	add.w	r4, r5, #12
 800e096:	4623      	mov	r3, r4
 800e098:	f04f 0c0a 	mov.w	ip, #10
 800e09c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800e0dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800e0a0:	fbb2 f6fc 	udiv	r6, r2, ip
 800e0a4:	fb0c 2e16 	mls	lr, ip, r6, r2
 800e0a8:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800e0ac:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800e0b0:	4696      	mov	lr, r2
 800e0b2:	f1be 0f09 	cmp.w	lr, #9
 800e0b6:	4632      	mov	r2, r6
 800e0b8:	d8f2      	bhi.n	800e0a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800e0ba:	1ae4      	subs	r4, r4, r3
 800e0bc:	428c      	cmp	r4, r1
 800e0be:	d809      	bhi.n	800e0d4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800e0c0:	f1c4 030c 	rsb	r3, r4, #12
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	18e9      	adds	r1, r5, r3
 800e0c8:	f000 f8d6 	bl	800e278 <memcpy>
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	f04f 34ff 	mov.w	r4, #4294967295
 800e0d8:	e7f8      	b.n	800e0cc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800e0da:	bf00      	nop
 800e0dc:	0800f6eb 	.word	0x0800f6eb

0800e0e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	4615      	mov	r5, r2
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	3901      	subs	r1, #1
 800e0ec:	eb00 0801 	add.w	r8, r0, r1
 800e0f0:	782a      	ldrb	r2, [r5, #0]
 800e0f2:	b392      	cbz	r2, 800e15a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 800e0f4:	4544      	cmp	r4, r8
 800e0f6:	d22a      	bcs.n	800e14e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800e0f8:	2a25      	cmp	r2, #37	; 0x25
 800e0fa:	d107      	bne.n	800e10c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800e0fc:	786a      	ldrb	r2, [r5, #1]
 800e0fe:	2a73      	cmp	r2, #115	; 0x73
 800e100:	d009      	beq.n	800e116 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800e102:	2a7a      	cmp	r2, #122	; 0x7a
 800e104:	d012      	beq.n	800e12c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800e106:	2a25      	cmp	r2, #37	; 0x25
 800e108:	d100      	bne.n	800e10c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800e10a:	3501      	adds	r5, #1
 800e10c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e110:	f804 2b01 	strb.w	r2, [r4], #1
 800e114:	e7ec      	b.n	800e0f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800e116:	f853 2b04 	ldr.w	r2, [r3], #4
 800e11a:	3a01      	subs	r2, #1
 800e11c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e120:	b1c9      	cbz	r1, 800e156 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800e122:	4544      	cmp	r4, r8
 800e124:	d013      	beq.n	800e14e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800e126:	f804 1b01 	strb.w	r1, [r4], #1
 800e12a:	e7f7      	b.n	800e11c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800e12c:	78aa      	ldrb	r2, [r5, #2]
 800e12e:	2a75      	cmp	r2, #117	; 0x75
 800e130:	d1ec      	bne.n	800e10c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800e132:	461e      	mov	r6, r3
 800e134:	4620      	mov	r0, r4
 800e136:	f856 2b04 	ldr.w	r2, [r6], #4
 800e13a:	eba8 0104 	sub.w	r1, r8, r4
 800e13e:	f7ff ffa3 	bl	800e088 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800e142:	2800      	cmp	r0, #0
 800e144:	dd03      	ble.n	800e14e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800e146:	4633      	mov	r3, r6
 800e148:	4404      	add	r4, r0
 800e14a:	3503      	adds	r5, #3
 800e14c:	e7d0      	b.n	800e0f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800e14e:	4621      	mov	r1, r4
 800e150:	4638      	mov	r0, r7
 800e152:	f7ff ff73 	bl	800e03c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800e156:	3502      	adds	r5, #2
 800e158:	e7ca      	b.n	800e0f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800e15a:	7022      	strb	r2, [r4, #0]
 800e15c:	1be0      	subs	r0, r4, r7
 800e15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e164 <_ZSt15get_new_handlerv>:
 800e164:	4b02      	ldr	r3, [pc, #8]	; (800e170 <_ZSt15get_new_handlerv+0xc>)
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	f3bf 8f5b 	dmb	ish
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	20001534 	.word	0x20001534

0800e174 <abort>:
 800e174:	2006      	movs	r0, #6
 800e176:	b508      	push	{r3, lr}
 800e178:	f000 fcb0 	bl	800eadc <raise>
 800e17c:	2001      	movs	r0, #1
 800e17e:	f7f6 f8a0 	bl	80042c2 <_exit>
	...

0800e184 <__assert_func>:
 800e184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e186:	4614      	mov	r4, r2
 800e188:	461a      	mov	r2, r3
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <__assert_func+0x2c>)
 800e18c:	4605      	mov	r5, r0
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68d8      	ldr	r0, [r3, #12]
 800e192:	b14c      	cbz	r4, 800e1a8 <__assert_func+0x24>
 800e194:	4b07      	ldr	r3, [pc, #28]	; (800e1b4 <__assert_func+0x30>)
 800e196:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e19a:	9100      	str	r1, [sp, #0]
 800e19c:	462b      	mov	r3, r5
 800e19e:	4906      	ldr	r1, [pc, #24]	; (800e1b8 <__assert_func+0x34>)
 800e1a0:	f000 f814 	bl	800e1cc <fiprintf>
 800e1a4:	f7ff ffe6 	bl	800e174 <abort>
 800e1a8:	4b04      	ldr	r3, [pc, #16]	; (800e1bc <__assert_func+0x38>)
 800e1aa:	461c      	mov	r4, r3
 800e1ac:	e7f3      	b.n	800e196 <__assert_func+0x12>
 800e1ae:	bf00      	nop
 800e1b0:	20000184 	.word	0x20000184
 800e1b4:	0800f6f6 	.word	0x0800f6f6
 800e1b8:	0800f703 	.word	0x0800f703
 800e1bc:	0800f731 	.word	0x0800f731

0800e1c0 <__errno>:
 800e1c0:	4b01      	ldr	r3, [pc, #4]	; (800e1c8 <__errno+0x8>)
 800e1c2:	6818      	ldr	r0, [r3, #0]
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	20000184 	.word	0x20000184

0800e1cc <fiprintf>:
 800e1cc:	b40e      	push	{r1, r2, r3}
 800e1ce:	b503      	push	{r0, r1, lr}
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	ab03      	add	r3, sp, #12
 800e1d4:	4805      	ldr	r0, [pc, #20]	; (800e1ec <fiprintf+0x20>)
 800e1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	f000 f97f 	bl	800e4e0 <_vfiprintf_r>
 800e1e2:	b002      	add	sp, #8
 800e1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e8:	b003      	add	sp, #12
 800e1ea:	4770      	bx	lr
 800e1ec:	20000184 	.word	0x20000184

0800e1f0 <__libc_init_array>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	2600      	movs	r6, #0
 800e1f4:	4d0c      	ldr	r5, [pc, #48]	; (800e228 <__libc_init_array+0x38>)
 800e1f6:	4c0d      	ldr	r4, [pc, #52]	; (800e22c <__libc_init_array+0x3c>)
 800e1f8:	1b64      	subs	r4, r4, r5
 800e1fa:	10a4      	asrs	r4, r4, #2
 800e1fc:	42a6      	cmp	r6, r4
 800e1fe:	d109      	bne.n	800e214 <__libc_init_array+0x24>
 800e200:	f001 f82a 	bl	800f258 <_init>
 800e204:	2600      	movs	r6, #0
 800e206:	4d0a      	ldr	r5, [pc, #40]	; (800e230 <__libc_init_array+0x40>)
 800e208:	4c0a      	ldr	r4, [pc, #40]	; (800e234 <__libc_init_array+0x44>)
 800e20a:	1b64      	subs	r4, r4, r5
 800e20c:	10a4      	asrs	r4, r4, #2
 800e20e:	42a6      	cmp	r6, r4
 800e210:	d105      	bne.n	800e21e <__libc_init_array+0x2e>
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	f855 3b04 	ldr.w	r3, [r5], #4
 800e218:	4798      	blx	r3
 800e21a:	3601      	adds	r6, #1
 800e21c:	e7ee      	b.n	800e1fc <__libc_init_array+0xc>
 800e21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e222:	4798      	blx	r3
 800e224:	3601      	adds	r6, #1
 800e226:	e7f2      	b.n	800e20e <__libc_init_array+0x1e>
 800e228:	0800f7cc 	.word	0x0800f7cc
 800e22c:	0800f7cc 	.word	0x0800f7cc
 800e230:	0800f7cc 	.word	0x0800f7cc
 800e234:	0800f7d4 	.word	0x0800f7d4

0800e238 <malloc>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <malloc+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f000 b8b3 	b.w	800e3a8 <_malloc_r>
 800e242:	bf00      	nop
 800e244:	20000184 	.word	0x20000184

0800e248 <free>:
 800e248:	4b02      	ldr	r3, [pc, #8]	; (800e254 <free+0xc>)
 800e24a:	4601      	mov	r1, r0
 800e24c:	6818      	ldr	r0, [r3, #0]
 800e24e:	f000 b843 	b.w	800e2d8 <_free_r>
 800e252:	bf00      	nop
 800e254:	20000184 	.word	0x20000184

0800e258 <memcmp>:
 800e258:	b510      	push	{r4, lr}
 800e25a:	3901      	subs	r1, #1
 800e25c:	4402      	add	r2, r0
 800e25e:	4290      	cmp	r0, r2
 800e260:	d101      	bne.n	800e266 <memcmp+0xe>
 800e262:	2000      	movs	r0, #0
 800e264:	e005      	b.n	800e272 <memcmp+0x1a>
 800e266:	7803      	ldrb	r3, [r0, #0]
 800e268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e26c:	42a3      	cmp	r3, r4
 800e26e:	d001      	beq.n	800e274 <memcmp+0x1c>
 800e270:	1b18      	subs	r0, r3, r4
 800e272:	bd10      	pop	{r4, pc}
 800e274:	3001      	adds	r0, #1
 800e276:	e7f2      	b.n	800e25e <memcmp+0x6>

0800e278 <memcpy>:
 800e278:	440a      	add	r2, r1
 800e27a:	4291      	cmp	r1, r2
 800e27c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e280:	d100      	bne.n	800e284 <memcpy+0xc>
 800e282:	4770      	bx	lr
 800e284:	b510      	push	{r4, lr}
 800e286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e28a:	4291      	cmp	r1, r2
 800e28c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e290:	d1f9      	bne.n	800e286 <memcpy+0xe>
 800e292:	bd10      	pop	{r4, pc}

0800e294 <memmove>:
 800e294:	4288      	cmp	r0, r1
 800e296:	b510      	push	{r4, lr}
 800e298:	eb01 0402 	add.w	r4, r1, r2
 800e29c:	d902      	bls.n	800e2a4 <memmove+0x10>
 800e29e:	4284      	cmp	r4, r0
 800e2a0:	4623      	mov	r3, r4
 800e2a2:	d807      	bhi.n	800e2b4 <memmove+0x20>
 800e2a4:	1e43      	subs	r3, r0, #1
 800e2a6:	42a1      	cmp	r1, r4
 800e2a8:	d008      	beq.n	800e2bc <memmove+0x28>
 800e2aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2b2:	e7f8      	b.n	800e2a6 <memmove+0x12>
 800e2b4:	4601      	mov	r1, r0
 800e2b6:	4402      	add	r2, r0
 800e2b8:	428a      	cmp	r2, r1
 800e2ba:	d100      	bne.n	800e2be <memmove+0x2a>
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2c6:	e7f7      	b.n	800e2b8 <memmove+0x24>

0800e2c8 <memset>:
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	4402      	add	r2, r0
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d100      	bne.n	800e2d2 <memset+0xa>
 800e2d0:	4770      	bx	lr
 800e2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e2d6:	e7f9      	b.n	800e2cc <memset+0x4>

0800e2d8 <_free_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	4605      	mov	r5, r0
 800e2dc:	2900      	cmp	r1, #0
 800e2de:	d040      	beq.n	800e362 <_free_r+0x8a>
 800e2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e4:	1f0c      	subs	r4, r1, #4
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	bfb8      	it	lt
 800e2ea:	18e4      	addlt	r4, r4, r3
 800e2ec:	f000 ff0e 	bl	800f10c <__malloc_lock>
 800e2f0:	4a1c      	ldr	r2, [pc, #112]	; (800e364 <_free_r+0x8c>)
 800e2f2:	6813      	ldr	r3, [r2, #0]
 800e2f4:	b933      	cbnz	r3, 800e304 <_free_r+0x2c>
 800e2f6:	6063      	str	r3, [r4, #4]
 800e2f8:	6014      	str	r4, [r2, #0]
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e300:	f000 bf0a 	b.w	800f118 <__malloc_unlock>
 800e304:	42a3      	cmp	r3, r4
 800e306:	d908      	bls.n	800e31a <_free_r+0x42>
 800e308:	6820      	ldr	r0, [r4, #0]
 800e30a:	1821      	adds	r1, r4, r0
 800e30c:	428b      	cmp	r3, r1
 800e30e:	bf01      	itttt	eq
 800e310:	6819      	ldreq	r1, [r3, #0]
 800e312:	685b      	ldreq	r3, [r3, #4]
 800e314:	1809      	addeq	r1, r1, r0
 800e316:	6021      	streq	r1, [r4, #0]
 800e318:	e7ed      	b.n	800e2f6 <_free_r+0x1e>
 800e31a:	461a      	mov	r2, r3
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	b10b      	cbz	r3, 800e324 <_free_r+0x4c>
 800e320:	42a3      	cmp	r3, r4
 800e322:	d9fa      	bls.n	800e31a <_free_r+0x42>
 800e324:	6811      	ldr	r1, [r2, #0]
 800e326:	1850      	adds	r0, r2, r1
 800e328:	42a0      	cmp	r0, r4
 800e32a:	d10b      	bne.n	800e344 <_free_r+0x6c>
 800e32c:	6820      	ldr	r0, [r4, #0]
 800e32e:	4401      	add	r1, r0
 800e330:	1850      	adds	r0, r2, r1
 800e332:	4283      	cmp	r3, r0
 800e334:	6011      	str	r1, [r2, #0]
 800e336:	d1e0      	bne.n	800e2fa <_free_r+0x22>
 800e338:	6818      	ldr	r0, [r3, #0]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	4401      	add	r1, r0
 800e33e:	6011      	str	r1, [r2, #0]
 800e340:	6053      	str	r3, [r2, #4]
 800e342:	e7da      	b.n	800e2fa <_free_r+0x22>
 800e344:	d902      	bls.n	800e34c <_free_r+0x74>
 800e346:	230c      	movs	r3, #12
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	e7d6      	b.n	800e2fa <_free_r+0x22>
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	1821      	adds	r1, r4, r0
 800e350:	428b      	cmp	r3, r1
 800e352:	bf01      	itttt	eq
 800e354:	6819      	ldreq	r1, [r3, #0]
 800e356:	685b      	ldreq	r3, [r3, #4]
 800e358:	1809      	addeq	r1, r1, r0
 800e35a:	6021      	streq	r1, [r4, #0]
 800e35c:	6063      	str	r3, [r4, #4]
 800e35e:	6054      	str	r4, [r2, #4]
 800e360:	e7cb      	b.n	800e2fa <_free_r+0x22>
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20001538 	.word	0x20001538

0800e368 <sbrk_aligned>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4e0e      	ldr	r6, [pc, #56]	; (800e3a4 <sbrk_aligned+0x3c>)
 800e36c:	460c      	mov	r4, r1
 800e36e:	6831      	ldr	r1, [r6, #0]
 800e370:	4605      	mov	r5, r0
 800e372:	b911      	cbnz	r1, 800e37a <sbrk_aligned+0x12>
 800e374:	f000 fb7a 	bl	800ea6c <_sbrk_r>
 800e378:	6030      	str	r0, [r6, #0]
 800e37a:	4621      	mov	r1, r4
 800e37c:	4628      	mov	r0, r5
 800e37e:	f000 fb75 	bl	800ea6c <_sbrk_r>
 800e382:	1c43      	adds	r3, r0, #1
 800e384:	d00a      	beq.n	800e39c <sbrk_aligned+0x34>
 800e386:	1cc4      	adds	r4, r0, #3
 800e388:	f024 0403 	bic.w	r4, r4, #3
 800e38c:	42a0      	cmp	r0, r4
 800e38e:	d007      	beq.n	800e3a0 <sbrk_aligned+0x38>
 800e390:	1a21      	subs	r1, r4, r0
 800e392:	4628      	mov	r0, r5
 800e394:	f000 fb6a 	bl	800ea6c <_sbrk_r>
 800e398:	3001      	adds	r0, #1
 800e39a:	d101      	bne.n	800e3a0 <sbrk_aligned+0x38>
 800e39c:	f04f 34ff 	mov.w	r4, #4294967295
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	bd70      	pop	{r4, r5, r6, pc}
 800e3a4:	2000153c 	.word	0x2000153c

0800e3a8 <_malloc_r>:
 800e3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ac:	1ccd      	adds	r5, r1, #3
 800e3ae:	f025 0503 	bic.w	r5, r5, #3
 800e3b2:	3508      	adds	r5, #8
 800e3b4:	2d0c      	cmp	r5, #12
 800e3b6:	bf38      	it	cc
 800e3b8:	250c      	movcc	r5, #12
 800e3ba:	2d00      	cmp	r5, #0
 800e3bc:	4607      	mov	r7, r0
 800e3be:	db01      	blt.n	800e3c4 <_malloc_r+0x1c>
 800e3c0:	42a9      	cmp	r1, r5
 800e3c2:	d905      	bls.n	800e3d0 <_malloc_r+0x28>
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	2600      	movs	r6, #0
 800e3c8:	603b      	str	r3, [r7, #0]
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d0:	4e2e      	ldr	r6, [pc, #184]	; (800e48c <_malloc_r+0xe4>)
 800e3d2:	f000 fe9b 	bl	800f10c <__malloc_lock>
 800e3d6:	6833      	ldr	r3, [r6, #0]
 800e3d8:	461c      	mov	r4, r3
 800e3da:	bb34      	cbnz	r4, 800e42a <_malloc_r+0x82>
 800e3dc:	4629      	mov	r1, r5
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f7ff ffc2 	bl	800e368 <sbrk_aligned>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	d14d      	bne.n	800e486 <_malloc_r+0xde>
 800e3ea:	6834      	ldr	r4, [r6, #0]
 800e3ec:	4626      	mov	r6, r4
 800e3ee:	2e00      	cmp	r6, #0
 800e3f0:	d140      	bne.n	800e474 <_malloc_r+0xcc>
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	eb04 0803 	add.w	r8, r4, r3
 800e3fc:	f000 fb36 	bl	800ea6c <_sbrk_r>
 800e400:	4580      	cmp	r8, r0
 800e402:	d13a      	bne.n	800e47a <_malloc_r+0xd2>
 800e404:	6821      	ldr	r1, [r4, #0]
 800e406:	3503      	adds	r5, #3
 800e408:	1a6d      	subs	r5, r5, r1
 800e40a:	f025 0503 	bic.w	r5, r5, #3
 800e40e:	3508      	adds	r5, #8
 800e410:	2d0c      	cmp	r5, #12
 800e412:	bf38      	it	cc
 800e414:	250c      	movcc	r5, #12
 800e416:	4638      	mov	r0, r7
 800e418:	4629      	mov	r1, r5
 800e41a:	f7ff ffa5 	bl	800e368 <sbrk_aligned>
 800e41e:	3001      	adds	r0, #1
 800e420:	d02b      	beq.n	800e47a <_malloc_r+0xd2>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	442b      	add	r3, r5
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	e00e      	b.n	800e448 <_malloc_r+0xa0>
 800e42a:	6822      	ldr	r2, [r4, #0]
 800e42c:	1b52      	subs	r2, r2, r5
 800e42e:	d41e      	bmi.n	800e46e <_malloc_r+0xc6>
 800e430:	2a0b      	cmp	r2, #11
 800e432:	d916      	bls.n	800e462 <_malloc_r+0xba>
 800e434:	1961      	adds	r1, r4, r5
 800e436:	42a3      	cmp	r3, r4
 800e438:	6025      	str	r5, [r4, #0]
 800e43a:	bf18      	it	ne
 800e43c:	6059      	strne	r1, [r3, #4]
 800e43e:	6863      	ldr	r3, [r4, #4]
 800e440:	bf08      	it	eq
 800e442:	6031      	streq	r1, [r6, #0]
 800e444:	5162      	str	r2, [r4, r5]
 800e446:	604b      	str	r3, [r1, #4]
 800e448:	4638      	mov	r0, r7
 800e44a:	f104 060b 	add.w	r6, r4, #11
 800e44e:	f000 fe63 	bl	800f118 <__malloc_unlock>
 800e452:	f026 0607 	bic.w	r6, r6, #7
 800e456:	1d23      	adds	r3, r4, #4
 800e458:	1af2      	subs	r2, r6, r3
 800e45a:	d0b6      	beq.n	800e3ca <_malloc_r+0x22>
 800e45c:	1b9b      	subs	r3, r3, r6
 800e45e:	50a3      	str	r3, [r4, r2]
 800e460:	e7b3      	b.n	800e3ca <_malloc_r+0x22>
 800e462:	6862      	ldr	r2, [r4, #4]
 800e464:	42a3      	cmp	r3, r4
 800e466:	bf0c      	ite	eq
 800e468:	6032      	streq	r2, [r6, #0]
 800e46a:	605a      	strne	r2, [r3, #4]
 800e46c:	e7ec      	b.n	800e448 <_malloc_r+0xa0>
 800e46e:	4623      	mov	r3, r4
 800e470:	6864      	ldr	r4, [r4, #4]
 800e472:	e7b2      	b.n	800e3da <_malloc_r+0x32>
 800e474:	4634      	mov	r4, r6
 800e476:	6876      	ldr	r6, [r6, #4]
 800e478:	e7b9      	b.n	800e3ee <_malloc_r+0x46>
 800e47a:	230c      	movs	r3, #12
 800e47c:	4638      	mov	r0, r7
 800e47e:	603b      	str	r3, [r7, #0]
 800e480:	f000 fe4a 	bl	800f118 <__malloc_unlock>
 800e484:	e7a1      	b.n	800e3ca <_malloc_r+0x22>
 800e486:	6025      	str	r5, [r4, #0]
 800e488:	e7de      	b.n	800e448 <_malloc_r+0xa0>
 800e48a:	bf00      	nop
 800e48c:	20001538 	.word	0x20001538

0800e490 <__sfputc_r>:
 800e490:	6893      	ldr	r3, [r2, #8]
 800e492:	b410      	push	{r4}
 800e494:	3b01      	subs	r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	6093      	str	r3, [r2, #8]
 800e49a:	da07      	bge.n	800e4ac <__sfputc_r+0x1c>
 800e49c:	6994      	ldr	r4, [r2, #24]
 800e49e:	42a3      	cmp	r3, r4
 800e4a0:	db01      	blt.n	800e4a6 <__sfputc_r+0x16>
 800e4a2:	290a      	cmp	r1, #10
 800e4a4:	d102      	bne.n	800e4ac <__sfputc_r+0x1c>
 800e4a6:	bc10      	pop	{r4}
 800e4a8:	f000 bb34 	b.w	800eb14 <__swbuf_r>
 800e4ac:	6813      	ldr	r3, [r2, #0]
 800e4ae:	1c58      	adds	r0, r3, #1
 800e4b0:	6010      	str	r0, [r2, #0]
 800e4b2:	7019      	strb	r1, [r3, #0]
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	bc10      	pop	{r4}
 800e4b8:	4770      	bx	lr

0800e4ba <__sfputs_r>:
 800e4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4bc:	4606      	mov	r6, r0
 800e4be:	460f      	mov	r7, r1
 800e4c0:	4614      	mov	r4, r2
 800e4c2:	18d5      	adds	r5, r2, r3
 800e4c4:	42ac      	cmp	r4, r5
 800e4c6:	d101      	bne.n	800e4cc <__sfputs_r+0x12>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	e007      	b.n	800e4dc <__sfputs_r+0x22>
 800e4cc:	463a      	mov	r2, r7
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d4:	f7ff ffdc 	bl	800e490 <__sfputc_r>
 800e4d8:	1c43      	adds	r3, r0, #1
 800e4da:	d1f3      	bne.n	800e4c4 <__sfputs_r+0xa>
 800e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4e0 <_vfiprintf_r>:
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	4614      	mov	r4, r2
 800e4e8:	4698      	mov	r8, r3
 800e4ea:	4606      	mov	r6, r0
 800e4ec:	b09d      	sub	sp, #116	; 0x74
 800e4ee:	b118      	cbz	r0, 800e4f8 <_vfiprintf_r+0x18>
 800e4f0:	6983      	ldr	r3, [r0, #24]
 800e4f2:	b90b      	cbnz	r3, 800e4f8 <_vfiprintf_r+0x18>
 800e4f4:	f000 fcf6 	bl	800eee4 <__sinit>
 800e4f8:	4b89      	ldr	r3, [pc, #548]	; (800e720 <_vfiprintf_r+0x240>)
 800e4fa:	429d      	cmp	r5, r3
 800e4fc:	d11b      	bne.n	800e536 <_vfiprintf_r+0x56>
 800e4fe:	6875      	ldr	r5, [r6, #4]
 800e500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e502:	07d9      	lsls	r1, r3, #31
 800e504:	d405      	bmi.n	800e512 <_vfiprintf_r+0x32>
 800e506:	89ab      	ldrh	r3, [r5, #12]
 800e508:	059a      	lsls	r2, r3, #22
 800e50a:	d402      	bmi.n	800e512 <_vfiprintf_r+0x32>
 800e50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e50e:	f000 fd87 	bl	800f020 <__retarget_lock_acquire_recursive>
 800e512:	89ab      	ldrh	r3, [r5, #12]
 800e514:	071b      	lsls	r3, r3, #28
 800e516:	d501      	bpl.n	800e51c <_vfiprintf_r+0x3c>
 800e518:	692b      	ldr	r3, [r5, #16]
 800e51a:	b9eb      	cbnz	r3, 800e558 <_vfiprintf_r+0x78>
 800e51c:	4629      	mov	r1, r5
 800e51e:	4630      	mov	r0, r6
 800e520:	f000 fb5c 	bl	800ebdc <__swsetup_r>
 800e524:	b1c0      	cbz	r0, 800e558 <_vfiprintf_r+0x78>
 800e526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e528:	07dc      	lsls	r4, r3, #31
 800e52a:	d50e      	bpl.n	800e54a <_vfiprintf_r+0x6a>
 800e52c:	f04f 30ff 	mov.w	r0, #4294967295
 800e530:	b01d      	add	sp, #116	; 0x74
 800e532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e536:	4b7b      	ldr	r3, [pc, #492]	; (800e724 <_vfiprintf_r+0x244>)
 800e538:	429d      	cmp	r5, r3
 800e53a:	d101      	bne.n	800e540 <_vfiprintf_r+0x60>
 800e53c:	68b5      	ldr	r5, [r6, #8]
 800e53e:	e7df      	b.n	800e500 <_vfiprintf_r+0x20>
 800e540:	4b79      	ldr	r3, [pc, #484]	; (800e728 <_vfiprintf_r+0x248>)
 800e542:	429d      	cmp	r5, r3
 800e544:	bf08      	it	eq
 800e546:	68f5      	ldreq	r5, [r6, #12]
 800e548:	e7da      	b.n	800e500 <_vfiprintf_r+0x20>
 800e54a:	89ab      	ldrh	r3, [r5, #12]
 800e54c:	0598      	lsls	r0, r3, #22
 800e54e:	d4ed      	bmi.n	800e52c <_vfiprintf_r+0x4c>
 800e550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e552:	f000 fd66 	bl	800f022 <__retarget_lock_release_recursive>
 800e556:	e7e9      	b.n	800e52c <_vfiprintf_r+0x4c>
 800e558:	2300      	movs	r3, #0
 800e55a:	9309      	str	r3, [sp, #36]	; 0x24
 800e55c:	2320      	movs	r3, #32
 800e55e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e562:	2330      	movs	r3, #48	; 0x30
 800e564:	f04f 0901 	mov.w	r9, #1
 800e568:	f8cd 800c 	str.w	r8, [sp, #12]
 800e56c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e72c <_vfiprintf_r+0x24c>
 800e570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e574:	4623      	mov	r3, r4
 800e576:	469a      	mov	sl, r3
 800e578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e57c:	b10a      	cbz	r2, 800e582 <_vfiprintf_r+0xa2>
 800e57e:	2a25      	cmp	r2, #37	; 0x25
 800e580:	d1f9      	bne.n	800e576 <_vfiprintf_r+0x96>
 800e582:	ebba 0b04 	subs.w	fp, sl, r4
 800e586:	d00b      	beq.n	800e5a0 <_vfiprintf_r+0xc0>
 800e588:	465b      	mov	r3, fp
 800e58a:	4622      	mov	r2, r4
 800e58c:	4629      	mov	r1, r5
 800e58e:	4630      	mov	r0, r6
 800e590:	f7ff ff93 	bl	800e4ba <__sfputs_r>
 800e594:	3001      	adds	r0, #1
 800e596:	f000 80aa 	beq.w	800e6ee <_vfiprintf_r+0x20e>
 800e59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e59c:	445a      	add	r2, fp
 800e59e:	9209      	str	r2, [sp, #36]	; 0x24
 800e5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 80a2 	beq.w	800e6ee <_vfiprintf_r+0x20e>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5b4:	f10a 0a01 	add.w	sl, sl, #1
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	9307      	str	r3, [sp, #28]
 800e5bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5c2:	4654      	mov	r4, sl
 800e5c4:	2205      	movs	r2, #5
 800e5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ca:	4858      	ldr	r0, [pc, #352]	; (800e72c <_vfiprintf_r+0x24c>)
 800e5cc:	f000 fd90 	bl	800f0f0 <memchr>
 800e5d0:	9a04      	ldr	r2, [sp, #16]
 800e5d2:	b9d8      	cbnz	r0, 800e60c <_vfiprintf_r+0x12c>
 800e5d4:	06d1      	lsls	r1, r2, #27
 800e5d6:	bf44      	itt	mi
 800e5d8:	2320      	movmi	r3, #32
 800e5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5de:	0713      	lsls	r3, r2, #28
 800e5e0:	bf44      	itt	mi
 800e5e2:	232b      	movmi	r3, #43	; 0x2b
 800e5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ee:	d015      	beq.n	800e61c <_vfiprintf_r+0x13c>
 800e5f0:	4654      	mov	r4, sl
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	f04f 0c0a 	mov.w	ip, #10
 800e5f8:	9a07      	ldr	r2, [sp, #28]
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e600:	3b30      	subs	r3, #48	; 0x30
 800e602:	2b09      	cmp	r3, #9
 800e604:	d94e      	bls.n	800e6a4 <_vfiprintf_r+0x1c4>
 800e606:	b1b0      	cbz	r0, 800e636 <_vfiprintf_r+0x156>
 800e608:	9207      	str	r2, [sp, #28]
 800e60a:	e014      	b.n	800e636 <_vfiprintf_r+0x156>
 800e60c:	eba0 0308 	sub.w	r3, r0, r8
 800e610:	fa09 f303 	lsl.w	r3, r9, r3
 800e614:	4313      	orrs	r3, r2
 800e616:	46a2      	mov	sl, r4
 800e618:	9304      	str	r3, [sp, #16]
 800e61a:	e7d2      	b.n	800e5c2 <_vfiprintf_r+0xe2>
 800e61c:	9b03      	ldr	r3, [sp, #12]
 800e61e:	1d19      	adds	r1, r3, #4
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	9103      	str	r1, [sp, #12]
 800e624:	2b00      	cmp	r3, #0
 800e626:	bfbb      	ittet	lt
 800e628:	425b      	neglt	r3, r3
 800e62a:	f042 0202 	orrlt.w	r2, r2, #2
 800e62e:	9307      	strge	r3, [sp, #28]
 800e630:	9307      	strlt	r3, [sp, #28]
 800e632:	bfb8      	it	lt
 800e634:	9204      	strlt	r2, [sp, #16]
 800e636:	7823      	ldrb	r3, [r4, #0]
 800e638:	2b2e      	cmp	r3, #46	; 0x2e
 800e63a:	d10c      	bne.n	800e656 <_vfiprintf_r+0x176>
 800e63c:	7863      	ldrb	r3, [r4, #1]
 800e63e:	2b2a      	cmp	r3, #42	; 0x2a
 800e640:	d135      	bne.n	800e6ae <_vfiprintf_r+0x1ce>
 800e642:	9b03      	ldr	r3, [sp, #12]
 800e644:	3402      	adds	r4, #2
 800e646:	1d1a      	adds	r2, r3, #4
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	9203      	str	r2, [sp, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	bfb8      	it	lt
 800e650:	f04f 33ff 	movlt.w	r3, #4294967295
 800e654:	9305      	str	r3, [sp, #20]
 800e656:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e730 <_vfiprintf_r+0x250>
 800e65a:	2203      	movs	r2, #3
 800e65c:	4650      	mov	r0, sl
 800e65e:	7821      	ldrb	r1, [r4, #0]
 800e660:	f000 fd46 	bl	800f0f0 <memchr>
 800e664:	b140      	cbz	r0, 800e678 <_vfiprintf_r+0x198>
 800e666:	2340      	movs	r3, #64	; 0x40
 800e668:	eba0 000a 	sub.w	r0, r0, sl
 800e66c:	fa03 f000 	lsl.w	r0, r3, r0
 800e670:	9b04      	ldr	r3, [sp, #16]
 800e672:	3401      	adds	r4, #1
 800e674:	4303      	orrs	r3, r0
 800e676:	9304      	str	r3, [sp, #16]
 800e678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67c:	2206      	movs	r2, #6
 800e67e:	482d      	ldr	r0, [pc, #180]	; (800e734 <_vfiprintf_r+0x254>)
 800e680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e684:	f000 fd34 	bl	800f0f0 <memchr>
 800e688:	2800      	cmp	r0, #0
 800e68a:	d03f      	beq.n	800e70c <_vfiprintf_r+0x22c>
 800e68c:	4b2a      	ldr	r3, [pc, #168]	; (800e738 <_vfiprintf_r+0x258>)
 800e68e:	bb1b      	cbnz	r3, 800e6d8 <_vfiprintf_r+0x1f8>
 800e690:	9b03      	ldr	r3, [sp, #12]
 800e692:	3307      	adds	r3, #7
 800e694:	f023 0307 	bic.w	r3, r3, #7
 800e698:	3308      	adds	r3, #8
 800e69a:	9303      	str	r3, [sp, #12]
 800e69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e69e:	443b      	add	r3, r7
 800e6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a2:	e767      	b.n	800e574 <_vfiprintf_r+0x94>
 800e6a4:	460c      	mov	r4, r1
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6ac:	e7a5      	b.n	800e5fa <_vfiprintf_r+0x11a>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	f04f 0c0a 	mov.w	ip, #10
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	3401      	adds	r4, #1
 800e6b8:	9305      	str	r3, [sp, #20]
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6c0:	3a30      	subs	r2, #48	; 0x30
 800e6c2:	2a09      	cmp	r2, #9
 800e6c4:	d903      	bls.n	800e6ce <_vfiprintf_r+0x1ee>
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d0c5      	beq.n	800e656 <_vfiprintf_r+0x176>
 800e6ca:	9105      	str	r1, [sp, #20]
 800e6cc:	e7c3      	b.n	800e656 <_vfiprintf_r+0x176>
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6d6:	e7f0      	b.n	800e6ba <_vfiprintf_r+0x1da>
 800e6d8:	ab03      	add	r3, sp, #12
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4630      	mov	r0, r6
 800e6e0:	4b16      	ldr	r3, [pc, #88]	; (800e73c <_vfiprintf_r+0x25c>)
 800e6e2:	a904      	add	r1, sp, #16
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	1c78      	adds	r0, r7, #1
 800e6ec:	d1d6      	bne.n	800e69c <_vfiprintf_r+0x1bc>
 800e6ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6f0:	07d9      	lsls	r1, r3, #31
 800e6f2:	d405      	bmi.n	800e700 <_vfiprintf_r+0x220>
 800e6f4:	89ab      	ldrh	r3, [r5, #12]
 800e6f6:	059a      	lsls	r2, r3, #22
 800e6f8:	d402      	bmi.n	800e700 <_vfiprintf_r+0x220>
 800e6fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6fc:	f000 fc91 	bl	800f022 <__retarget_lock_release_recursive>
 800e700:	89ab      	ldrh	r3, [r5, #12]
 800e702:	065b      	lsls	r3, r3, #25
 800e704:	f53f af12 	bmi.w	800e52c <_vfiprintf_r+0x4c>
 800e708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e70a:	e711      	b.n	800e530 <_vfiprintf_r+0x50>
 800e70c:	ab03      	add	r3, sp, #12
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	462a      	mov	r2, r5
 800e712:	4630      	mov	r0, r6
 800e714:	4b09      	ldr	r3, [pc, #36]	; (800e73c <_vfiprintf_r+0x25c>)
 800e716:	a904      	add	r1, sp, #16
 800e718:	f000 f882 	bl	800e820 <_printf_i>
 800e71c:	e7e4      	b.n	800e6e8 <_vfiprintf_r+0x208>
 800e71e:	bf00      	nop
 800e720:	0800f78c 	.word	0x0800f78c
 800e724:	0800f7ac 	.word	0x0800f7ac
 800e728:	0800f76c 	.word	0x0800f76c
 800e72c:	0800f738 	.word	0x0800f738
 800e730:	0800f73e 	.word	0x0800f73e
 800e734:	0800f742 	.word	0x0800f742
 800e738:	00000000 	.word	0x00000000
 800e73c:	0800e4bb 	.word	0x0800e4bb

0800e740 <_printf_common>:
 800e740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e744:	4616      	mov	r6, r2
 800e746:	4699      	mov	r9, r3
 800e748:	688a      	ldr	r2, [r1, #8]
 800e74a:	690b      	ldr	r3, [r1, #16]
 800e74c:	4607      	mov	r7, r0
 800e74e:	4293      	cmp	r3, r2
 800e750:	bfb8      	it	lt
 800e752:	4613      	movlt	r3, r2
 800e754:	6033      	str	r3, [r6, #0]
 800e756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e75a:	460c      	mov	r4, r1
 800e75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e760:	b10a      	cbz	r2, 800e766 <_printf_common+0x26>
 800e762:	3301      	adds	r3, #1
 800e764:	6033      	str	r3, [r6, #0]
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	0699      	lsls	r1, r3, #26
 800e76a:	bf42      	ittt	mi
 800e76c:	6833      	ldrmi	r3, [r6, #0]
 800e76e:	3302      	addmi	r3, #2
 800e770:	6033      	strmi	r3, [r6, #0]
 800e772:	6825      	ldr	r5, [r4, #0]
 800e774:	f015 0506 	ands.w	r5, r5, #6
 800e778:	d106      	bne.n	800e788 <_printf_common+0x48>
 800e77a:	f104 0a19 	add.w	sl, r4, #25
 800e77e:	68e3      	ldr	r3, [r4, #12]
 800e780:	6832      	ldr	r2, [r6, #0]
 800e782:	1a9b      	subs	r3, r3, r2
 800e784:	42ab      	cmp	r3, r5
 800e786:	dc28      	bgt.n	800e7da <_printf_common+0x9a>
 800e788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e78c:	1e13      	subs	r3, r2, #0
 800e78e:	6822      	ldr	r2, [r4, #0]
 800e790:	bf18      	it	ne
 800e792:	2301      	movne	r3, #1
 800e794:	0692      	lsls	r2, r2, #26
 800e796:	d42d      	bmi.n	800e7f4 <_printf_common+0xb4>
 800e798:	4649      	mov	r1, r9
 800e79a:	4638      	mov	r0, r7
 800e79c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7a0:	47c0      	blx	r8
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	d020      	beq.n	800e7e8 <_printf_common+0xa8>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	68e5      	ldr	r5, [r4, #12]
 800e7aa:	f003 0306 	and.w	r3, r3, #6
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	bf18      	it	ne
 800e7b2:	2500      	movne	r5, #0
 800e7b4:	6832      	ldr	r2, [r6, #0]
 800e7b6:	f04f 0600 	mov.w	r6, #0
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	bf08      	it	eq
 800e7be:	1aad      	subeq	r5, r5, r2
 800e7c0:	6922      	ldr	r2, [r4, #16]
 800e7c2:	bf08      	it	eq
 800e7c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	bfc4      	itt	gt
 800e7cc:	1a9b      	subgt	r3, r3, r2
 800e7ce:	18ed      	addgt	r5, r5, r3
 800e7d0:	341a      	adds	r4, #26
 800e7d2:	42b5      	cmp	r5, r6
 800e7d4:	d11a      	bne.n	800e80c <_printf_common+0xcc>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	e008      	b.n	800e7ec <_printf_common+0xac>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	4652      	mov	r2, sl
 800e7de:	4649      	mov	r1, r9
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	47c0      	blx	r8
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d103      	bne.n	800e7f0 <_printf_common+0xb0>
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f0:	3501      	adds	r5, #1
 800e7f2:	e7c4      	b.n	800e77e <_printf_common+0x3e>
 800e7f4:	2030      	movs	r0, #48	; 0x30
 800e7f6:	18e1      	adds	r1, r4, r3
 800e7f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7fc:	1c5a      	adds	r2, r3, #1
 800e7fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e802:	4422      	add	r2, r4
 800e804:	3302      	adds	r3, #2
 800e806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e80a:	e7c5      	b.n	800e798 <_printf_common+0x58>
 800e80c:	2301      	movs	r3, #1
 800e80e:	4622      	mov	r2, r4
 800e810:	4649      	mov	r1, r9
 800e812:	4638      	mov	r0, r7
 800e814:	47c0      	blx	r8
 800e816:	3001      	adds	r0, #1
 800e818:	d0e6      	beq.n	800e7e8 <_printf_common+0xa8>
 800e81a:	3601      	adds	r6, #1
 800e81c:	e7d9      	b.n	800e7d2 <_printf_common+0x92>
	...

0800e820 <_printf_i>:
 800e820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e824:	7e0f      	ldrb	r7, [r1, #24]
 800e826:	4691      	mov	r9, r2
 800e828:	2f78      	cmp	r7, #120	; 0x78
 800e82a:	4680      	mov	r8, r0
 800e82c:	460c      	mov	r4, r1
 800e82e:	469a      	mov	sl, r3
 800e830:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e836:	d807      	bhi.n	800e848 <_printf_i+0x28>
 800e838:	2f62      	cmp	r7, #98	; 0x62
 800e83a:	d80a      	bhi.n	800e852 <_printf_i+0x32>
 800e83c:	2f00      	cmp	r7, #0
 800e83e:	f000 80d9 	beq.w	800e9f4 <_printf_i+0x1d4>
 800e842:	2f58      	cmp	r7, #88	; 0x58
 800e844:	f000 80a4 	beq.w	800e990 <_printf_i+0x170>
 800e848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e84c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e850:	e03a      	b.n	800e8c8 <_printf_i+0xa8>
 800e852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e856:	2b15      	cmp	r3, #21
 800e858:	d8f6      	bhi.n	800e848 <_printf_i+0x28>
 800e85a:	a101      	add	r1, pc, #4	; (adr r1, 800e860 <_printf_i+0x40>)
 800e85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e860:	0800e8b9 	.word	0x0800e8b9
 800e864:	0800e8cd 	.word	0x0800e8cd
 800e868:	0800e849 	.word	0x0800e849
 800e86c:	0800e849 	.word	0x0800e849
 800e870:	0800e849 	.word	0x0800e849
 800e874:	0800e849 	.word	0x0800e849
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800e849 	.word	0x0800e849
 800e880:	0800e849 	.word	0x0800e849
 800e884:	0800e849 	.word	0x0800e849
 800e888:	0800e849 	.word	0x0800e849
 800e88c:	0800e9db 	.word	0x0800e9db
 800e890:	0800e8fd 	.word	0x0800e8fd
 800e894:	0800e9bd 	.word	0x0800e9bd
 800e898:	0800e849 	.word	0x0800e849
 800e89c:	0800e849 	.word	0x0800e849
 800e8a0:	0800e9fd 	.word	0x0800e9fd
 800e8a4:	0800e849 	.word	0x0800e849
 800e8a8:	0800e8fd 	.word	0x0800e8fd
 800e8ac:	0800e849 	.word	0x0800e849
 800e8b0:	0800e849 	.word	0x0800e849
 800e8b4:	0800e9c5 	.word	0x0800e9c5
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	1d1a      	adds	r2, r3, #4
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	602a      	str	r2, [r5, #0]
 800e8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0a4      	b.n	800ea16 <_printf_i+0x1f6>
 800e8cc:	6820      	ldr	r0, [r4, #0]
 800e8ce:	6829      	ldr	r1, [r5, #0]
 800e8d0:	0606      	lsls	r6, r0, #24
 800e8d2:	f101 0304 	add.w	r3, r1, #4
 800e8d6:	d50a      	bpl.n	800e8ee <_printf_i+0xce>
 800e8d8:	680e      	ldr	r6, [r1, #0]
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	2e00      	cmp	r6, #0
 800e8de:	da03      	bge.n	800e8e8 <_printf_i+0xc8>
 800e8e0:	232d      	movs	r3, #45	; 0x2d
 800e8e2:	4276      	negs	r6, r6
 800e8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8e8:	230a      	movs	r3, #10
 800e8ea:	485e      	ldr	r0, [pc, #376]	; (800ea64 <_printf_i+0x244>)
 800e8ec:	e019      	b.n	800e922 <_printf_i+0x102>
 800e8ee:	680e      	ldr	r6, [r1, #0]
 800e8f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8f4:	602b      	str	r3, [r5, #0]
 800e8f6:	bf18      	it	ne
 800e8f8:	b236      	sxthne	r6, r6
 800e8fa:	e7ef      	b.n	800e8dc <_printf_i+0xbc>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	6820      	ldr	r0, [r4, #0]
 800e900:	1d19      	adds	r1, r3, #4
 800e902:	6029      	str	r1, [r5, #0]
 800e904:	0601      	lsls	r1, r0, #24
 800e906:	d501      	bpl.n	800e90c <_printf_i+0xec>
 800e908:	681e      	ldr	r6, [r3, #0]
 800e90a:	e002      	b.n	800e912 <_printf_i+0xf2>
 800e90c:	0646      	lsls	r6, r0, #25
 800e90e:	d5fb      	bpl.n	800e908 <_printf_i+0xe8>
 800e910:	881e      	ldrh	r6, [r3, #0]
 800e912:	2f6f      	cmp	r7, #111	; 0x6f
 800e914:	bf0c      	ite	eq
 800e916:	2308      	moveq	r3, #8
 800e918:	230a      	movne	r3, #10
 800e91a:	4852      	ldr	r0, [pc, #328]	; (800ea64 <_printf_i+0x244>)
 800e91c:	2100      	movs	r1, #0
 800e91e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e922:	6865      	ldr	r5, [r4, #4]
 800e924:	2d00      	cmp	r5, #0
 800e926:	bfa8      	it	ge
 800e928:	6821      	ldrge	r1, [r4, #0]
 800e92a:	60a5      	str	r5, [r4, #8]
 800e92c:	bfa4      	itt	ge
 800e92e:	f021 0104 	bicge.w	r1, r1, #4
 800e932:	6021      	strge	r1, [r4, #0]
 800e934:	b90e      	cbnz	r6, 800e93a <_printf_i+0x11a>
 800e936:	2d00      	cmp	r5, #0
 800e938:	d04d      	beq.n	800e9d6 <_printf_i+0x1b6>
 800e93a:	4615      	mov	r5, r2
 800e93c:	fbb6 f1f3 	udiv	r1, r6, r3
 800e940:	fb03 6711 	mls	r7, r3, r1, r6
 800e944:	5dc7      	ldrb	r7, [r0, r7]
 800e946:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e94a:	4637      	mov	r7, r6
 800e94c:	42bb      	cmp	r3, r7
 800e94e:	460e      	mov	r6, r1
 800e950:	d9f4      	bls.n	800e93c <_printf_i+0x11c>
 800e952:	2b08      	cmp	r3, #8
 800e954:	d10b      	bne.n	800e96e <_printf_i+0x14e>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	07de      	lsls	r6, r3, #31
 800e95a:	d508      	bpl.n	800e96e <_printf_i+0x14e>
 800e95c:	6923      	ldr	r3, [r4, #16]
 800e95e:	6861      	ldr	r1, [r4, #4]
 800e960:	4299      	cmp	r1, r3
 800e962:	bfde      	ittt	le
 800e964:	2330      	movle	r3, #48	; 0x30
 800e966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e96a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e96e:	1b52      	subs	r2, r2, r5
 800e970:	6122      	str	r2, [r4, #16]
 800e972:	464b      	mov	r3, r9
 800e974:	4621      	mov	r1, r4
 800e976:	4640      	mov	r0, r8
 800e978:	f8cd a000 	str.w	sl, [sp]
 800e97c:	aa03      	add	r2, sp, #12
 800e97e:	f7ff fedf 	bl	800e740 <_printf_common>
 800e982:	3001      	adds	r0, #1
 800e984:	d14c      	bne.n	800ea20 <_printf_i+0x200>
 800e986:	f04f 30ff 	mov.w	r0, #4294967295
 800e98a:	b004      	add	sp, #16
 800e98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e990:	4834      	ldr	r0, [pc, #208]	; (800ea64 <_printf_i+0x244>)
 800e992:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e996:	6829      	ldr	r1, [r5, #0]
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	f851 6b04 	ldr.w	r6, [r1], #4
 800e99e:	6029      	str	r1, [r5, #0]
 800e9a0:	061d      	lsls	r5, r3, #24
 800e9a2:	d514      	bpl.n	800e9ce <_printf_i+0x1ae>
 800e9a4:	07df      	lsls	r7, r3, #31
 800e9a6:	bf44      	itt	mi
 800e9a8:	f043 0320 	orrmi.w	r3, r3, #32
 800e9ac:	6023      	strmi	r3, [r4, #0]
 800e9ae:	b91e      	cbnz	r6, 800e9b8 <_printf_i+0x198>
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	f023 0320 	bic.w	r3, r3, #32
 800e9b6:	6023      	str	r3, [r4, #0]
 800e9b8:	2310      	movs	r3, #16
 800e9ba:	e7af      	b.n	800e91c <_printf_i+0xfc>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	f043 0320 	orr.w	r3, r3, #32
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	2378      	movs	r3, #120	; 0x78
 800e9c6:	4828      	ldr	r0, [pc, #160]	; (800ea68 <_printf_i+0x248>)
 800e9c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9cc:	e7e3      	b.n	800e996 <_printf_i+0x176>
 800e9ce:	0659      	lsls	r1, r3, #25
 800e9d0:	bf48      	it	mi
 800e9d2:	b2b6      	uxthmi	r6, r6
 800e9d4:	e7e6      	b.n	800e9a4 <_printf_i+0x184>
 800e9d6:	4615      	mov	r5, r2
 800e9d8:	e7bb      	b.n	800e952 <_printf_i+0x132>
 800e9da:	682b      	ldr	r3, [r5, #0]
 800e9dc:	6826      	ldr	r6, [r4, #0]
 800e9de:	1d18      	adds	r0, r3, #4
 800e9e0:	6961      	ldr	r1, [r4, #20]
 800e9e2:	6028      	str	r0, [r5, #0]
 800e9e4:	0635      	lsls	r5, r6, #24
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	d501      	bpl.n	800e9ee <_printf_i+0x1ce>
 800e9ea:	6019      	str	r1, [r3, #0]
 800e9ec:	e002      	b.n	800e9f4 <_printf_i+0x1d4>
 800e9ee:	0670      	lsls	r0, r6, #25
 800e9f0:	d5fb      	bpl.n	800e9ea <_printf_i+0x1ca>
 800e9f2:	8019      	strh	r1, [r3, #0]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4615      	mov	r5, r2
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	e7ba      	b.n	800e972 <_printf_i+0x152>
 800e9fc:	682b      	ldr	r3, [r5, #0]
 800e9fe:	2100      	movs	r1, #0
 800ea00:	1d1a      	adds	r2, r3, #4
 800ea02:	602a      	str	r2, [r5, #0]
 800ea04:	681d      	ldr	r5, [r3, #0]
 800ea06:	6862      	ldr	r2, [r4, #4]
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f000 fb71 	bl	800f0f0 <memchr>
 800ea0e:	b108      	cbz	r0, 800ea14 <_printf_i+0x1f4>
 800ea10:	1b40      	subs	r0, r0, r5
 800ea12:	6060      	str	r0, [r4, #4]
 800ea14:	6863      	ldr	r3, [r4, #4]
 800ea16:	6123      	str	r3, [r4, #16]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea1e:	e7a8      	b.n	800e972 <_printf_i+0x152>
 800ea20:	462a      	mov	r2, r5
 800ea22:	4649      	mov	r1, r9
 800ea24:	4640      	mov	r0, r8
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	47d0      	blx	sl
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	d0ab      	beq.n	800e986 <_printf_i+0x166>
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	079b      	lsls	r3, r3, #30
 800ea32:	d413      	bmi.n	800ea5c <_printf_i+0x23c>
 800ea34:	68e0      	ldr	r0, [r4, #12]
 800ea36:	9b03      	ldr	r3, [sp, #12]
 800ea38:	4298      	cmp	r0, r3
 800ea3a:	bfb8      	it	lt
 800ea3c:	4618      	movlt	r0, r3
 800ea3e:	e7a4      	b.n	800e98a <_printf_i+0x16a>
 800ea40:	2301      	movs	r3, #1
 800ea42:	4632      	mov	r2, r6
 800ea44:	4649      	mov	r1, r9
 800ea46:	4640      	mov	r0, r8
 800ea48:	47d0      	blx	sl
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	d09b      	beq.n	800e986 <_printf_i+0x166>
 800ea4e:	3501      	adds	r5, #1
 800ea50:	68e3      	ldr	r3, [r4, #12]
 800ea52:	9903      	ldr	r1, [sp, #12]
 800ea54:	1a5b      	subs	r3, r3, r1
 800ea56:	42ab      	cmp	r3, r5
 800ea58:	dcf2      	bgt.n	800ea40 <_printf_i+0x220>
 800ea5a:	e7eb      	b.n	800ea34 <_printf_i+0x214>
 800ea5c:	2500      	movs	r5, #0
 800ea5e:	f104 0619 	add.w	r6, r4, #25
 800ea62:	e7f5      	b.n	800ea50 <_printf_i+0x230>
 800ea64:	0800f749 	.word	0x0800f749
 800ea68:	0800f75a 	.word	0x0800f75a

0800ea6c <_sbrk_r>:
 800ea6c:	b538      	push	{r3, r4, r5, lr}
 800ea6e:	2300      	movs	r3, #0
 800ea70:	4d05      	ldr	r5, [pc, #20]	; (800ea88 <_sbrk_r+0x1c>)
 800ea72:	4604      	mov	r4, r0
 800ea74:	4608      	mov	r0, r1
 800ea76:	602b      	str	r3, [r5, #0]
 800ea78:	f7f5 fc96 	bl	80043a8 <_sbrk>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d102      	bne.n	800ea86 <_sbrk_r+0x1a>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	b103      	cbz	r3, 800ea86 <_sbrk_r+0x1a>
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	20001544 	.word	0x20001544

0800ea8c <_raise_r>:
 800ea8c:	291f      	cmp	r1, #31
 800ea8e:	b538      	push	{r3, r4, r5, lr}
 800ea90:	4604      	mov	r4, r0
 800ea92:	460d      	mov	r5, r1
 800ea94:	d904      	bls.n	800eaa0 <_raise_r+0x14>
 800ea96:	2316      	movs	r3, #22
 800ea98:	6003      	str	r3, [r0, #0]
 800ea9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eaa2:	b112      	cbz	r2, 800eaaa <_raise_r+0x1e>
 800eaa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaa8:	b94b      	cbnz	r3, 800eabe <_raise_r+0x32>
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 f830 	bl	800eb10 <_getpid_r>
 800eab0:	462a      	mov	r2, r5
 800eab2:	4601      	mov	r1, r0
 800eab4:	4620      	mov	r0, r4
 800eab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaba:	f000 b817 	b.w	800eaec <_kill_r>
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d00a      	beq.n	800ead8 <_raise_r+0x4c>
 800eac2:	1c59      	adds	r1, r3, #1
 800eac4:	d103      	bne.n	800eace <_raise_r+0x42>
 800eac6:	2316      	movs	r3, #22
 800eac8:	6003      	str	r3, [r0, #0]
 800eaca:	2001      	movs	r0, #1
 800eacc:	e7e7      	b.n	800ea9e <_raise_r+0x12>
 800eace:	2400      	movs	r4, #0
 800ead0:	4628      	mov	r0, r5
 800ead2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ead6:	4798      	blx	r3
 800ead8:	2000      	movs	r0, #0
 800eada:	e7e0      	b.n	800ea9e <_raise_r+0x12>

0800eadc <raise>:
 800eadc:	4b02      	ldr	r3, [pc, #8]	; (800eae8 <raise+0xc>)
 800eade:	4601      	mov	r1, r0
 800eae0:	6818      	ldr	r0, [r3, #0]
 800eae2:	f7ff bfd3 	b.w	800ea8c <_raise_r>
 800eae6:	bf00      	nop
 800eae8:	20000184 	.word	0x20000184

0800eaec <_kill_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4d06      	ldr	r5, [pc, #24]	; (800eb0c <_kill_r+0x20>)
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	602b      	str	r3, [r5, #0]
 800eafa:	f7f5 fbd2 	bl	80042a2 <_kill>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	d102      	bne.n	800eb08 <_kill_r+0x1c>
 800eb02:	682b      	ldr	r3, [r5, #0]
 800eb04:	b103      	cbz	r3, 800eb08 <_kill_r+0x1c>
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	bd38      	pop	{r3, r4, r5, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20001544 	.word	0x20001544

0800eb10 <_getpid_r>:
 800eb10:	f7f5 bbc0 	b.w	8004294 <_getpid>

0800eb14 <__swbuf_r>:
 800eb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb16:	460e      	mov	r6, r1
 800eb18:	4614      	mov	r4, r2
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	b118      	cbz	r0, 800eb26 <__swbuf_r+0x12>
 800eb1e:	6983      	ldr	r3, [r0, #24]
 800eb20:	b90b      	cbnz	r3, 800eb26 <__swbuf_r+0x12>
 800eb22:	f000 f9df 	bl	800eee4 <__sinit>
 800eb26:	4b21      	ldr	r3, [pc, #132]	; (800ebac <__swbuf_r+0x98>)
 800eb28:	429c      	cmp	r4, r3
 800eb2a:	d12b      	bne.n	800eb84 <__swbuf_r+0x70>
 800eb2c:	686c      	ldr	r4, [r5, #4]
 800eb2e:	69a3      	ldr	r3, [r4, #24]
 800eb30:	60a3      	str	r3, [r4, #8]
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	071a      	lsls	r2, r3, #28
 800eb36:	d52f      	bpl.n	800eb98 <__swbuf_r+0x84>
 800eb38:	6923      	ldr	r3, [r4, #16]
 800eb3a:	b36b      	cbz	r3, 800eb98 <__swbuf_r+0x84>
 800eb3c:	6923      	ldr	r3, [r4, #16]
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	b2f6      	uxtb	r6, r6
 800eb42:	1ac0      	subs	r0, r0, r3
 800eb44:	6963      	ldr	r3, [r4, #20]
 800eb46:	4637      	mov	r7, r6
 800eb48:	4283      	cmp	r3, r0
 800eb4a:	dc04      	bgt.n	800eb56 <__swbuf_r+0x42>
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	4628      	mov	r0, r5
 800eb50:	f000 f934 	bl	800edbc <_fflush_r>
 800eb54:	bb30      	cbnz	r0, 800eba4 <__swbuf_r+0x90>
 800eb56:	68a3      	ldr	r3, [r4, #8]
 800eb58:	3001      	adds	r0, #1
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	60a3      	str	r3, [r4, #8]
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	1c5a      	adds	r2, r3, #1
 800eb62:	6022      	str	r2, [r4, #0]
 800eb64:	701e      	strb	r6, [r3, #0]
 800eb66:	6963      	ldr	r3, [r4, #20]
 800eb68:	4283      	cmp	r3, r0
 800eb6a:	d004      	beq.n	800eb76 <__swbuf_r+0x62>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	07db      	lsls	r3, r3, #31
 800eb70:	d506      	bpl.n	800eb80 <__swbuf_r+0x6c>
 800eb72:	2e0a      	cmp	r6, #10
 800eb74:	d104      	bne.n	800eb80 <__swbuf_r+0x6c>
 800eb76:	4621      	mov	r1, r4
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f000 f91f 	bl	800edbc <_fflush_r>
 800eb7e:	b988      	cbnz	r0, 800eba4 <__swbuf_r+0x90>
 800eb80:	4638      	mov	r0, r7
 800eb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb84:	4b0a      	ldr	r3, [pc, #40]	; (800ebb0 <__swbuf_r+0x9c>)
 800eb86:	429c      	cmp	r4, r3
 800eb88:	d101      	bne.n	800eb8e <__swbuf_r+0x7a>
 800eb8a:	68ac      	ldr	r4, [r5, #8]
 800eb8c:	e7cf      	b.n	800eb2e <__swbuf_r+0x1a>
 800eb8e:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <__swbuf_r+0xa0>)
 800eb90:	429c      	cmp	r4, r3
 800eb92:	bf08      	it	eq
 800eb94:	68ec      	ldreq	r4, [r5, #12]
 800eb96:	e7ca      	b.n	800eb2e <__swbuf_r+0x1a>
 800eb98:	4621      	mov	r1, r4
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	f000 f81e 	bl	800ebdc <__swsetup_r>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d0cb      	beq.n	800eb3c <__swbuf_r+0x28>
 800eba4:	f04f 37ff 	mov.w	r7, #4294967295
 800eba8:	e7ea      	b.n	800eb80 <__swbuf_r+0x6c>
 800ebaa:	bf00      	nop
 800ebac:	0800f78c 	.word	0x0800f78c
 800ebb0:	0800f7ac 	.word	0x0800f7ac
 800ebb4:	0800f76c 	.word	0x0800f76c

0800ebb8 <_write_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4604      	mov	r4, r0
 800ebbc:	4608      	mov	r0, r1
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	4d05      	ldr	r5, [pc, #20]	; (800ebd8 <_write_r+0x20>)
 800ebc4:	602a      	str	r2, [r5, #0]
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	f7f5 fba2 	bl	8004310 <_write>
 800ebcc:	1c43      	adds	r3, r0, #1
 800ebce:	d102      	bne.n	800ebd6 <_write_r+0x1e>
 800ebd0:	682b      	ldr	r3, [r5, #0]
 800ebd2:	b103      	cbz	r3, 800ebd6 <_write_r+0x1e>
 800ebd4:	6023      	str	r3, [r4, #0]
 800ebd6:	bd38      	pop	{r3, r4, r5, pc}
 800ebd8:	20001544 	.word	0x20001544

0800ebdc <__swsetup_r>:
 800ebdc:	4b32      	ldr	r3, [pc, #200]	; (800eca8 <__swsetup_r+0xcc>)
 800ebde:	b570      	push	{r4, r5, r6, lr}
 800ebe0:	681d      	ldr	r5, [r3, #0]
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	b125      	cbz	r5, 800ebf2 <__swsetup_r+0x16>
 800ebe8:	69ab      	ldr	r3, [r5, #24]
 800ebea:	b913      	cbnz	r3, 800ebf2 <__swsetup_r+0x16>
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 f979 	bl	800eee4 <__sinit>
 800ebf2:	4b2e      	ldr	r3, [pc, #184]	; (800ecac <__swsetup_r+0xd0>)
 800ebf4:	429c      	cmp	r4, r3
 800ebf6:	d10f      	bne.n	800ec18 <__swsetup_r+0x3c>
 800ebf8:	686c      	ldr	r4, [r5, #4]
 800ebfa:	89a3      	ldrh	r3, [r4, #12]
 800ebfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec00:	0719      	lsls	r1, r3, #28
 800ec02:	d42c      	bmi.n	800ec5e <__swsetup_r+0x82>
 800ec04:	06dd      	lsls	r5, r3, #27
 800ec06:	d411      	bmi.n	800ec2c <__swsetup_r+0x50>
 800ec08:	2309      	movs	r3, #9
 800ec0a:	6033      	str	r3, [r6, #0]
 800ec0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295
 800ec14:	81a3      	strh	r3, [r4, #12]
 800ec16:	e03e      	b.n	800ec96 <__swsetup_r+0xba>
 800ec18:	4b25      	ldr	r3, [pc, #148]	; (800ecb0 <__swsetup_r+0xd4>)
 800ec1a:	429c      	cmp	r4, r3
 800ec1c:	d101      	bne.n	800ec22 <__swsetup_r+0x46>
 800ec1e:	68ac      	ldr	r4, [r5, #8]
 800ec20:	e7eb      	b.n	800ebfa <__swsetup_r+0x1e>
 800ec22:	4b24      	ldr	r3, [pc, #144]	; (800ecb4 <__swsetup_r+0xd8>)
 800ec24:	429c      	cmp	r4, r3
 800ec26:	bf08      	it	eq
 800ec28:	68ec      	ldreq	r4, [r5, #12]
 800ec2a:	e7e6      	b.n	800ebfa <__swsetup_r+0x1e>
 800ec2c:	0758      	lsls	r0, r3, #29
 800ec2e:	d512      	bpl.n	800ec56 <__swsetup_r+0x7a>
 800ec30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec32:	b141      	cbz	r1, 800ec46 <__swsetup_r+0x6a>
 800ec34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec38:	4299      	cmp	r1, r3
 800ec3a:	d002      	beq.n	800ec42 <__swsetup_r+0x66>
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	f7ff fb4b 	bl	800e2d8 <_free_r>
 800ec42:	2300      	movs	r3, #0
 800ec44:	6363      	str	r3, [r4, #52]	; 0x34
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	2300      	movs	r3, #0
 800ec50:	6063      	str	r3, [r4, #4]
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f043 0308 	orr.w	r3, r3, #8
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	b94b      	cbnz	r3, 800ec76 <__swsetup_r+0x9a>
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec6c:	d003      	beq.n	800ec76 <__swsetup_r+0x9a>
 800ec6e:	4621      	mov	r1, r4
 800ec70:	4630      	mov	r0, r6
 800ec72:	f000 f9fd 	bl	800f070 <__smakebuf_r>
 800ec76:	89a0      	ldrh	r0, [r4, #12]
 800ec78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec7c:	f010 0301 	ands.w	r3, r0, #1
 800ec80:	d00a      	beq.n	800ec98 <__swsetup_r+0xbc>
 800ec82:	2300      	movs	r3, #0
 800ec84:	60a3      	str	r3, [r4, #8]
 800ec86:	6963      	ldr	r3, [r4, #20]
 800ec88:	425b      	negs	r3, r3
 800ec8a:	61a3      	str	r3, [r4, #24]
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	b943      	cbnz	r3, 800eca2 <__swsetup_r+0xc6>
 800ec90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec94:	d1ba      	bne.n	800ec0c <__swsetup_r+0x30>
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	0781      	lsls	r1, r0, #30
 800ec9a:	bf58      	it	pl
 800ec9c:	6963      	ldrpl	r3, [r4, #20]
 800ec9e:	60a3      	str	r3, [r4, #8]
 800eca0:	e7f4      	b.n	800ec8c <__swsetup_r+0xb0>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e7f7      	b.n	800ec96 <__swsetup_r+0xba>
 800eca6:	bf00      	nop
 800eca8:	20000184 	.word	0x20000184
 800ecac:	0800f78c 	.word	0x0800f78c
 800ecb0:	0800f7ac 	.word	0x0800f7ac
 800ecb4:	0800f76c 	.word	0x0800f76c

0800ecb8 <__sflush_r>:
 800ecb8:	898a      	ldrh	r2, [r1, #12]
 800ecba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	0710      	lsls	r0, r2, #28
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	d457      	bmi.n	800ed74 <__sflush_r+0xbc>
 800ecc4:	684b      	ldr	r3, [r1, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	dc04      	bgt.n	800ecd4 <__sflush_r+0x1c>
 800ecca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dc01      	bgt.n	800ecd4 <__sflush_r+0x1c>
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecd6:	2e00      	cmp	r6, #0
 800ecd8:	d0fa      	beq.n	800ecd0 <__sflush_r+0x18>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ece0:	682f      	ldr	r7, [r5, #0]
 800ece2:	602b      	str	r3, [r5, #0]
 800ece4:	d032      	beq.n	800ed4c <__sflush_r+0x94>
 800ece6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ece8:	89a3      	ldrh	r3, [r4, #12]
 800ecea:	075a      	lsls	r2, r3, #29
 800ecec:	d505      	bpl.n	800ecfa <__sflush_r+0x42>
 800ecee:	6863      	ldr	r3, [r4, #4]
 800ecf0:	1ac0      	subs	r0, r0, r3
 800ecf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecf4:	b10b      	cbz	r3, 800ecfa <__sflush_r+0x42>
 800ecf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecf8:	1ac0      	subs	r0, r0, r3
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed00:	4628      	mov	r0, r5
 800ed02:	6a21      	ldr	r1, [r4, #32]
 800ed04:	47b0      	blx	r6
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	d106      	bne.n	800ed1a <__sflush_r+0x62>
 800ed0c:	6829      	ldr	r1, [r5, #0]
 800ed0e:	291d      	cmp	r1, #29
 800ed10:	d82c      	bhi.n	800ed6c <__sflush_r+0xb4>
 800ed12:	4a29      	ldr	r2, [pc, #164]	; (800edb8 <__sflush_r+0x100>)
 800ed14:	40ca      	lsrs	r2, r1
 800ed16:	07d6      	lsls	r6, r2, #31
 800ed18:	d528      	bpl.n	800ed6c <__sflush_r+0xb4>
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	6062      	str	r2, [r4, #4]
 800ed1e:	6922      	ldr	r2, [r4, #16]
 800ed20:	04d9      	lsls	r1, r3, #19
 800ed22:	6022      	str	r2, [r4, #0]
 800ed24:	d504      	bpl.n	800ed30 <__sflush_r+0x78>
 800ed26:	1c42      	adds	r2, r0, #1
 800ed28:	d101      	bne.n	800ed2e <__sflush_r+0x76>
 800ed2a:	682b      	ldr	r3, [r5, #0]
 800ed2c:	b903      	cbnz	r3, 800ed30 <__sflush_r+0x78>
 800ed2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ed30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed32:	602f      	str	r7, [r5, #0]
 800ed34:	2900      	cmp	r1, #0
 800ed36:	d0cb      	beq.n	800ecd0 <__sflush_r+0x18>
 800ed38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed3c:	4299      	cmp	r1, r3
 800ed3e:	d002      	beq.n	800ed46 <__sflush_r+0x8e>
 800ed40:	4628      	mov	r0, r5
 800ed42:	f7ff fac9 	bl	800e2d8 <_free_r>
 800ed46:	2000      	movs	r0, #0
 800ed48:	6360      	str	r0, [r4, #52]	; 0x34
 800ed4a:	e7c2      	b.n	800ecd2 <__sflush_r+0x1a>
 800ed4c:	6a21      	ldr	r1, [r4, #32]
 800ed4e:	2301      	movs	r3, #1
 800ed50:	4628      	mov	r0, r5
 800ed52:	47b0      	blx	r6
 800ed54:	1c41      	adds	r1, r0, #1
 800ed56:	d1c7      	bne.n	800ece8 <__sflush_r+0x30>
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d0c4      	beq.n	800ece8 <__sflush_r+0x30>
 800ed5e:	2b1d      	cmp	r3, #29
 800ed60:	d001      	beq.n	800ed66 <__sflush_r+0xae>
 800ed62:	2b16      	cmp	r3, #22
 800ed64:	d101      	bne.n	800ed6a <__sflush_r+0xb2>
 800ed66:	602f      	str	r7, [r5, #0]
 800ed68:	e7b2      	b.n	800ecd0 <__sflush_r+0x18>
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed70:	81a3      	strh	r3, [r4, #12]
 800ed72:	e7ae      	b.n	800ecd2 <__sflush_r+0x1a>
 800ed74:	690f      	ldr	r7, [r1, #16]
 800ed76:	2f00      	cmp	r7, #0
 800ed78:	d0aa      	beq.n	800ecd0 <__sflush_r+0x18>
 800ed7a:	0793      	lsls	r3, r2, #30
 800ed7c:	bf18      	it	ne
 800ed7e:	2300      	movne	r3, #0
 800ed80:	680e      	ldr	r6, [r1, #0]
 800ed82:	bf08      	it	eq
 800ed84:	694b      	ldreq	r3, [r1, #20]
 800ed86:	1bf6      	subs	r6, r6, r7
 800ed88:	600f      	str	r7, [r1, #0]
 800ed8a:	608b      	str	r3, [r1, #8]
 800ed8c:	2e00      	cmp	r6, #0
 800ed8e:	dd9f      	ble.n	800ecd0 <__sflush_r+0x18>
 800ed90:	4633      	mov	r3, r6
 800ed92:	463a      	mov	r2, r7
 800ed94:	4628      	mov	r0, r5
 800ed96:	6a21      	ldr	r1, [r4, #32]
 800ed98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ed9c:	47e0      	blx	ip
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	dc06      	bgt.n	800edb0 <__sflush_r+0xf8>
 800eda2:	89a3      	ldrh	r3, [r4, #12]
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edac:	81a3      	strh	r3, [r4, #12]
 800edae:	e790      	b.n	800ecd2 <__sflush_r+0x1a>
 800edb0:	4407      	add	r7, r0
 800edb2:	1a36      	subs	r6, r6, r0
 800edb4:	e7ea      	b.n	800ed8c <__sflush_r+0xd4>
 800edb6:	bf00      	nop
 800edb8:	20400001 	.word	0x20400001

0800edbc <_fflush_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	690b      	ldr	r3, [r1, #16]
 800edc0:	4605      	mov	r5, r0
 800edc2:	460c      	mov	r4, r1
 800edc4:	b913      	cbnz	r3, 800edcc <_fflush_r+0x10>
 800edc6:	2500      	movs	r5, #0
 800edc8:	4628      	mov	r0, r5
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	b118      	cbz	r0, 800edd6 <_fflush_r+0x1a>
 800edce:	6983      	ldr	r3, [r0, #24]
 800edd0:	b90b      	cbnz	r3, 800edd6 <_fflush_r+0x1a>
 800edd2:	f000 f887 	bl	800eee4 <__sinit>
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <_fflush_r+0x6c>)
 800edd8:	429c      	cmp	r4, r3
 800edda:	d11b      	bne.n	800ee14 <_fflush_r+0x58>
 800eddc:	686c      	ldr	r4, [r5, #4]
 800edde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0ef      	beq.n	800edc6 <_fflush_r+0xa>
 800ede6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ede8:	07d0      	lsls	r0, r2, #31
 800edea:	d404      	bmi.n	800edf6 <_fflush_r+0x3a>
 800edec:	0599      	lsls	r1, r3, #22
 800edee:	d402      	bmi.n	800edf6 <_fflush_r+0x3a>
 800edf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edf2:	f000 f915 	bl	800f020 <__retarget_lock_acquire_recursive>
 800edf6:	4628      	mov	r0, r5
 800edf8:	4621      	mov	r1, r4
 800edfa:	f7ff ff5d 	bl	800ecb8 <__sflush_r>
 800edfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee00:	4605      	mov	r5, r0
 800ee02:	07da      	lsls	r2, r3, #31
 800ee04:	d4e0      	bmi.n	800edc8 <_fflush_r+0xc>
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	059b      	lsls	r3, r3, #22
 800ee0a:	d4dd      	bmi.n	800edc8 <_fflush_r+0xc>
 800ee0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee0e:	f000 f908 	bl	800f022 <__retarget_lock_release_recursive>
 800ee12:	e7d9      	b.n	800edc8 <_fflush_r+0xc>
 800ee14:	4b05      	ldr	r3, [pc, #20]	; (800ee2c <_fflush_r+0x70>)
 800ee16:	429c      	cmp	r4, r3
 800ee18:	d101      	bne.n	800ee1e <_fflush_r+0x62>
 800ee1a:	68ac      	ldr	r4, [r5, #8]
 800ee1c:	e7df      	b.n	800edde <_fflush_r+0x22>
 800ee1e:	4b04      	ldr	r3, [pc, #16]	; (800ee30 <_fflush_r+0x74>)
 800ee20:	429c      	cmp	r4, r3
 800ee22:	bf08      	it	eq
 800ee24:	68ec      	ldreq	r4, [r5, #12]
 800ee26:	e7da      	b.n	800edde <_fflush_r+0x22>
 800ee28:	0800f78c 	.word	0x0800f78c
 800ee2c:	0800f7ac 	.word	0x0800f7ac
 800ee30:	0800f76c 	.word	0x0800f76c

0800ee34 <std>:
 800ee34:	2300      	movs	r3, #0
 800ee36:	b510      	push	{r4, lr}
 800ee38:	4604      	mov	r4, r0
 800ee3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ee3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee42:	6083      	str	r3, [r0, #8]
 800ee44:	8181      	strh	r1, [r0, #12]
 800ee46:	6643      	str	r3, [r0, #100]	; 0x64
 800ee48:	81c2      	strh	r2, [r0, #14]
 800ee4a:	6183      	str	r3, [r0, #24]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	2208      	movs	r2, #8
 800ee50:	305c      	adds	r0, #92	; 0x5c
 800ee52:	f7ff fa39 	bl	800e2c8 <memset>
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <std+0x38>)
 800ee58:	6224      	str	r4, [r4, #32]
 800ee5a:	6263      	str	r3, [r4, #36]	; 0x24
 800ee5c:	4b04      	ldr	r3, [pc, #16]	; (800ee70 <std+0x3c>)
 800ee5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <std+0x40>)
 800ee62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <std+0x44>)
 800ee66:	6323      	str	r3, [r4, #48]	; 0x30
 800ee68:	bd10      	pop	{r4, pc}
 800ee6a:	bf00      	nop
 800ee6c:	0800f149 	.word	0x0800f149
 800ee70:	0800f16b 	.word	0x0800f16b
 800ee74:	0800f1a3 	.word	0x0800f1a3
 800ee78:	0800f1c7 	.word	0x0800f1c7

0800ee7c <_cleanup_r>:
 800ee7c:	4901      	ldr	r1, [pc, #4]	; (800ee84 <_cleanup_r+0x8>)
 800ee7e:	f000 b8af 	b.w	800efe0 <_fwalk_reent>
 800ee82:	bf00      	nop
 800ee84:	0800edbd 	.word	0x0800edbd

0800ee88 <__sfmoreglue>:
 800ee88:	2268      	movs	r2, #104	; 0x68
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	1e4d      	subs	r5, r1, #1
 800ee8e:	4355      	muls	r5, r2
 800ee90:	460e      	mov	r6, r1
 800ee92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee96:	f7ff fa87 	bl	800e3a8 <_malloc_r>
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	b140      	cbz	r0, 800eeb0 <__sfmoreglue+0x28>
 800ee9e:	2100      	movs	r1, #0
 800eea0:	e9c0 1600 	strd	r1, r6, [r0]
 800eea4:	300c      	adds	r0, #12
 800eea6:	60a0      	str	r0, [r4, #8]
 800eea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eeac:	f7ff fa0c 	bl	800e2c8 <memset>
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	bd70      	pop	{r4, r5, r6, pc}

0800eeb4 <__sfp_lock_acquire>:
 800eeb4:	4801      	ldr	r0, [pc, #4]	; (800eebc <__sfp_lock_acquire+0x8>)
 800eeb6:	f000 b8b3 	b.w	800f020 <__retarget_lock_acquire_recursive>
 800eeba:	bf00      	nop
 800eebc:	20001541 	.word	0x20001541

0800eec0 <__sfp_lock_release>:
 800eec0:	4801      	ldr	r0, [pc, #4]	; (800eec8 <__sfp_lock_release+0x8>)
 800eec2:	f000 b8ae 	b.w	800f022 <__retarget_lock_release_recursive>
 800eec6:	bf00      	nop
 800eec8:	20001541 	.word	0x20001541

0800eecc <__sinit_lock_acquire>:
 800eecc:	4801      	ldr	r0, [pc, #4]	; (800eed4 <__sinit_lock_acquire+0x8>)
 800eece:	f000 b8a7 	b.w	800f020 <__retarget_lock_acquire_recursive>
 800eed2:	bf00      	nop
 800eed4:	20001542 	.word	0x20001542

0800eed8 <__sinit_lock_release>:
 800eed8:	4801      	ldr	r0, [pc, #4]	; (800eee0 <__sinit_lock_release+0x8>)
 800eeda:	f000 b8a2 	b.w	800f022 <__retarget_lock_release_recursive>
 800eede:	bf00      	nop
 800eee0:	20001542 	.word	0x20001542

0800eee4 <__sinit>:
 800eee4:	b510      	push	{r4, lr}
 800eee6:	4604      	mov	r4, r0
 800eee8:	f7ff fff0 	bl	800eecc <__sinit_lock_acquire>
 800eeec:	69a3      	ldr	r3, [r4, #24]
 800eeee:	b11b      	cbz	r3, 800eef8 <__sinit+0x14>
 800eef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eef4:	f7ff bff0 	b.w	800eed8 <__sinit_lock_release>
 800eef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eefc:	6523      	str	r3, [r4, #80]	; 0x50
 800eefe:	4b13      	ldr	r3, [pc, #76]	; (800ef4c <__sinit+0x68>)
 800ef00:	4a13      	ldr	r2, [pc, #76]	; (800ef50 <__sinit+0x6c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef06:	42a3      	cmp	r3, r4
 800ef08:	bf08      	it	eq
 800ef0a:	2301      	moveq	r3, #1
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	bf08      	it	eq
 800ef10:	61a3      	streq	r3, [r4, #24]
 800ef12:	f000 f81f 	bl	800ef54 <__sfp>
 800ef16:	6060      	str	r0, [r4, #4]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 f81b 	bl	800ef54 <__sfp>
 800ef1e:	60a0      	str	r0, [r4, #8]
 800ef20:	4620      	mov	r0, r4
 800ef22:	f000 f817 	bl	800ef54 <__sfp>
 800ef26:	2200      	movs	r2, #0
 800ef28:	2104      	movs	r1, #4
 800ef2a:	60e0      	str	r0, [r4, #12]
 800ef2c:	6860      	ldr	r0, [r4, #4]
 800ef2e:	f7ff ff81 	bl	800ee34 <std>
 800ef32:	2201      	movs	r2, #1
 800ef34:	2109      	movs	r1, #9
 800ef36:	68a0      	ldr	r0, [r4, #8]
 800ef38:	f7ff ff7c 	bl	800ee34 <std>
 800ef3c:	2202      	movs	r2, #2
 800ef3e:	2112      	movs	r1, #18
 800ef40:	68e0      	ldr	r0, [r4, #12]
 800ef42:	f7ff ff77 	bl	800ee34 <std>
 800ef46:	2301      	movs	r3, #1
 800ef48:	61a3      	str	r3, [r4, #24]
 800ef4a:	e7d1      	b.n	800eef0 <__sinit+0xc>
 800ef4c:	0800f734 	.word	0x0800f734
 800ef50:	0800ee7d 	.word	0x0800ee7d

0800ef54 <__sfp>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	4607      	mov	r7, r0
 800ef58:	f7ff ffac 	bl	800eeb4 <__sfp_lock_acquire>
 800ef5c:	4b1e      	ldr	r3, [pc, #120]	; (800efd8 <__sfp+0x84>)
 800ef5e:	681e      	ldr	r6, [r3, #0]
 800ef60:	69b3      	ldr	r3, [r6, #24]
 800ef62:	b913      	cbnz	r3, 800ef6a <__sfp+0x16>
 800ef64:	4630      	mov	r0, r6
 800ef66:	f7ff ffbd 	bl	800eee4 <__sinit>
 800ef6a:	3648      	adds	r6, #72	; 0x48
 800ef6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef70:	3b01      	subs	r3, #1
 800ef72:	d503      	bpl.n	800ef7c <__sfp+0x28>
 800ef74:	6833      	ldr	r3, [r6, #0]
 800ef76:	b30b      	cbz	r3, 800efbc <__sfp+0x68>
 800ef78:	6836      	ldr	r6, [r6, #0]
 800ef7a:	e7f7      	b.n	800ef6c <__sfp+0x18>
 800ef7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef80:	b9d5      	cbnz	r5, 800efb8 <__sfp+0x64>
 800ef82:	4b16      	ldr	r3, [pc, #88]	; (800efdc <__sfp+0x88>)
 800ef84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef88:	60e3      	str	r3, [r4, #12]
 800ef8a:	6665      	str	r5, [r4, #100]	; 0x64
 800ef8c:	f000 f847 	bl	800f01e <__retarget_lock_init_recursive>
 800ef90:	f7ff ff96 	bl	800eec0 <__sfp_lock_release>
 800ef94:	2208      	movs	r2, #8
 800ef96:	4629      	mov	r1, r5
 800ef98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800efa0:	6025      	str	r5, [r4, #0]
 800efa2:	61a5      	str	r5, [r4, #24]
 800efa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efa8:	f7ff f98e 	bl	800e2c8 <memset>
 800efac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efb4:	4620      	mov	r0, r4
 800efb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb8:	3468      	adds	r4, #104	; 0x68
 800efba:	e7d9      	b.n	800ef70 <__sfp+0x1c>
 800efbc:	2104      	movs	r1, #4
 800efbe:	4638      	mov	r0, r7
 800efc0:	f7ff ff62 	bl	800ee88 <__sfmoreglue>
 800efc4:	4604      	mov	r4, r0
 800efc6:	6030      	str	r0, [r6, #0]
 800efc8:	2800      	cmp	r0, #0
 800efca:	d1d5      	bne.n	800ef78 <__sfp+0x24>
 800efcc:	f7ff ff78 	bl	800eec0 <__sfp_lock_release>
 800efd0:	230c      	movs	r3, #12
 800efd2:	603b      	str	r3, [r7, #0]
 800efd4:	e7ee      	b.n	800efb4 <__sfp+0x60>
 800efd6:	bf00      	nop
 800efd8:	0800f734 	.word	0x0800f734
 800efdc:	ffff0001 	.word	0xffff0001

0800efe0 <_fwalk_reent>:
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	4606      	mov	r6, r0
 800efe6:	4688      	mov	r8, r1
 800efe8:	2700      	movs	r7, #0
 800efea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eff2:	f1b9 0901 	subs.w	r9, r9, #1
 800eff6:	d505      	bpl.n	800f004 <_fwalk_reent+0x24>
 800eff8:	6824      	ldr	r4, [r4, #0]
 800effa:	2c00      	cmp	r4, #0
 800effc:	d1f7      	bne.n	800efee <_fwalk_reent+0xe>
 800effe:	4638      	mov	r0, r7
 800f000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f004:	89ab      	ldrh	r3, [r5, #12]
 800f006:	2b01      	cmp	r3, #1
 800f008:	d907      	bls.n	800f01a <_fwalk_reent+0x3a>
 800f00a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f00e:	3301      	adds	r3, #1
 800f010:	d003      	beq.n	800f01a <_fwalk_reent+0x3a>
 800f012:	4629      	mov	r1, r5
 800f014:	4630      	mov	r0, r6
 800f016:	47c0      	blx	r8
 800f018:	4307      	orrs	r7, r0
 800f01a:	3568      	adds	r5, #104	; 0x68
 800f01c:	e7e9      	b.n	800eff2 <_fwalk_reent+0x12>

0800f01e <__retarget_lock_init_recursive>:
 800f01e:	4770      	bx	lr

0800f020 <__retarget_lock_acquire_recursive>:
 800f020:	4770      	bx	lr

0800f022 <__retarget_lock_release_recursive>:
 800f022:	4770      	bx	lr

0800f024 <__swhatbuf_r>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	460e      	mov	r6, r1
 800f028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02c:	4614      	mov	r4, r2
 800f02e:	2900      	cmp	r1, #0
 800f030:	461d      	mov	r5, r3
 800f032:	b096      	sub	sp, #88	; 0x58
 800f034:	da08      	bge.n	800f048 <__swhatbuf_r+0x24>
 800f036:	2200      	movs	r2, #0
 800f038:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f03c:	602a      	str	r2, [r5, #0]
 800f03e:	061a      	lsls	r2, r3, #24
 800f040:	d410      	bmi.n	800f064 <__swhatbuf_r+0x40>
 800f042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f046:	e00e      	b.n	800f066 <__swhatbuf_r+0x42>
 800f048:	466a      	mov	r2, sp
 800f04a:	f000 f8d1 	bl	800f1f0 <_fstat_r>
 800f04e:	2800      	cmp	r0, #0
 800f050:	dbf1      	blt.n	800f036 <__swhatbuf_r+0x12>
 800f052:	9a01      	ldr	r2, [sp, #4]
 800f054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f05c:	425a      	negs	r2, r3
 800f05e:	415a      	adcs	r2, r3
 800f060:	602a      	str	r2, [r5, #0]
 800f062:	e7ee      	b.n	800f042 <__swhatbuf_r+0x1e>
 800f064:	2340      	movs	r3, #64	; 0x40
 800f066:	2000      	movs	r0, #0
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	b016      	add	sp, #88	; 0x58
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f070 <__smakebuf_r>:
 800f070:	898b      	ldrh	r3, [r1, #12]
 800f072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f074:	079d      	lsls	r5, r3, #30
 800f076:	4606      	mov	r6, r0
 800f078:	460c      	mov	r4, r1
 800f07a:	d507      	bpl.n	800f08c <__smakebuf_r+0x1c>
 800f07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	6123      	str	r3, [r4, #16]
 800f084:	2301      	movs	r3, #1
 800f086:	6163      	str	r3, [r4, #20]
 800f088:	b002      	add	sp, #8
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	466a      	mov	r2, sp
 800f08e:	ab01      	add	r3, sp, #4
 800f090:	f7ff ffc8 	bl	800f024 <__swhatbuf_r>
 800f094:	9900      	ldr	r1, [sp, #0]
 800f096:	4605      	mov	r5, r0
 800f098:	4630      	mov	r0, r6
 800f09a:	f7ff f985 	bl	800e3a8 <_malloc_r>
 800f09e:	b948      	cbnz	r0, 800f0b4 <__smakebuf_r+0x44>
 800f0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a4:	059a      	lsls	r2, r3, #22
 800f0a6:	d4ef      	bmi.n	800f088 <__smakebuf_r+0x18>
 800f0a8:	f023 0303 	bic.w	r3, r3, #3
 800f0ac:	f043 0302 	orr.w	r3, r3, #2
 800f0b0:	81a3      	strh	r3, [r4, #12]
 800f0b2:	e7e3      	b.n	800f07c <__smakebuf_r+0xc>
 800f0b4:	4b0d      	ldr	r3, [pc, #52]	; (800f0ec <__smakebuf_r+0x7c>)
 800f0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	6020      	str	r0, [r4, #0]
 800f0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c0:	81a3      	strh	r3, [r4, #12]
 800f0c2:	9b00      	ldr	r3, [sp, #0]
 800f0c4:	6120      	str	r0, [r4, #16]
 800f0c6:	6163      	str	r3, [r4, #20]
 800f0c8:	9b01      	ldr	r3, [sp, #4]
 800f0ca:	b15b      	cbz	r3, 800f0e4 <__smakebuf_r+0x74>
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d2:	f000 f89f 	bl	800f214 <_isatty_r>
 800f0d6:	b128      	cbz	r0, 800f0e4 <__smakebuf_r+0x74>
 800f0d8:	89a3      	ldrh	r3, [r4, #12]
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	f043 0301 	orr.w	r3, r3, #1
 800f0e2:	81a3      	strh	r3, [r4, #12]
 800f0e4:	89a0      	ldrh	r0, [r4, #12]
 800f0e6:	4305      	orrs	r5, r0
 800f0e8:	81a5      	strh	r5, [r4, #12]
 800f0ea:	e7cd      	b.n	800f088 <__smakebuf_r+0x18>
 800f0ec:	0800ee7d 	.word	0x0800ee7d

0800f0f0 <memchr>:
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	b510      	push	{r4, lr}
 800f0f4:	b2c9      	uxtb	r1, r1
 800f0f6:	4402      	add	r2, r0
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	d101      	bne.n	800f102 <memchr+0x12>
 800f0fe:	2000      	movs	r0, #0
 800f100:	e003      	b.n	800f10a <memchr+0x1a>
 800f102:	7804      	ldrb	r4, [r0, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	428c      	cmp	r4, r1
 800f108:	d1f6      	bne.n	800f0f8 <memchr+0x8>
 800f10a:	bd10      	pop	{r4, pc}

0800f10c <__malloc_lock>:
 800f10c:	4801      	ldr	r0, [pc, #4]	; (800f114 <__malloc_lock+0x8>)
 800f10e:	f7ff bf87 	b.w	800f020 <__retarget_lock_acquire_recursive>
 800f112:	bf00      	nop
 800f114:	20001540 	.word	0x20001540

0800f118 <__malloc_unlock>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__malloc_unlock+0x8>)
 800f11a:	f7ff bf82 	b.w	800f022 <__retarget_lock_release_recursive>
 800f11e:	bf00      	nop
 800f120:	20001540 	.word	0x20001540

0800f124 <_read_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4604      	mov	r4, r0
 800f128:	4608      	mov	r0, r1
 800f12a:	4611      	mov	r1, r2
 800f12c:	2200      	movs	r2, #0
 800f12e:	4d05      	ldr	r5, [pc, #20]	; (800f144 <_read_r+0x20>)
 800f130:	602a      	str	r2, [r5, #0]
 800f132:	461a      	mov	r2, r3
 800f134:	f7f5 f8cf 	bl	80042d6 <_read>
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	d102      	bne.n	800f142 <_read_r+0x1e>
 800f13c:	682b      	ldr	r3, [r5, #0]
 800f13e:	b103      	cbz	r3, 800f142 <_read_r+0x1e>
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	20001544 	.word	0x20001544

0800f148 <__sread>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	460c      	mov	r4, r1
 800f14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f150:	f7ff ffe8 	bl	800f124 <_read_r>
 800f154:	2800      	cmp	r0, #0
 800f156:	bfab      	itete	ge
 800f158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f15a:	89a3      	ldrhlt	r3, [r4, #12]
 800f15c:	181b      	addge	r3, r3, r0
 800f15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f162:	bfac      	ite	ge
 800f164:	6563      	strge	r3, [r4, #84]	; 0x54
 800f166:	81a3      	strhlt	r3, [r4, #12]
 800f168:	bd10      	pop	{r4, pc}

0800f16a <__swrite>:
 800f16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16e:	461f      	mov	r7, r3
 800f170:	898b      	ldrh	r3, [r1, #12]
 800f172:	4605      	mov	r5, r0
 800f174:	05db      	lsls	r3, r3, #23
 800f176:	460c      	mov	r4, r1
 800f178:	4616      	mov	r6, r2
 800f17a:	d505      	bpl.n	800f188 <__swrite+0x1e>
 800f17c:	2302      	movs	r3, #2
 800f17e:	2200      	movs	r2, #0
 800f180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f184:	f000 f856 	bl	800f234 <_lseek_r>
 800f188:	89a3      	ldrh	r3, [r4, #12]
 800f18a:	4632      	mov	r2, r6
 800f18c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f190:	81a3      	strh	r3, [r4, #12]
 800f192:	4628      	mov	r0, r5
 800f194:	463b      	mov	r3, r7
 800f196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f19e:	f7ff bd0b 	b.w	800ebb8 <_write_r>

0800f1a2 <__sseek>:
 800f1a2:	b510      	push	{r4, lr}
 800f1a4:	460c      	mov	r4, r1
 800f1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1aa:	f000 f843 	bl	800f234 <_lseek_r>
 800f1ae:	1c43      	adds	r3, r0, #1
 800f1b0:	89a3      	ldrh	r3, [r4, #12]
 800f1b2:	bf15      	itete	ne
 800f1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1be:	81a3      	strheq	r3, [r4, #12]
 800f1c0:	bf18      	it	ne
 800f1c2:	81a3      	strhne	r3, [r4, #12]
 800f1c4:	bd10      	pop	{r4, pc}

0800f1c6 <__sclose>:
 800f1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ca:	f000 b801 	b.w	800f1d0 <_close_r>
	...

0800f1d0 <_close_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	4d05      	ldr	r5, [pc, #20]	; (800f1ec <_close_r+0x1c>)
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4608      	mov	r0, r1
 800f1da:	602b      	str	r3, [r5, #0]
 800f1dc:	f7f5 f8b4 	bl	8004348 <_close>
 800f1e0:	1c43      	adds	r3, r0, #1
 800f1e2:	d102      	bne.n	800f1ea <_close_r+0x1a>
 800f1e4:	682b      	ldr	r3, [r5, #0]
 800f1e6:	b103      	cbz	r3, 800f1ea <_close_r+0x1a>
 800f1e8:	6023      	str	r3, [r4, #0]
 800f1ea:	bd38      	pop	{r3, r4, r5, pc}
 800f1ec:	20001544 	.word	0x20001544

0800f1f0 <_fstat_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4d06      	ldr	r5, [pc, #24]	; (800f210 <_fstat_r+0x20>)
 800f1f6:	4604      	mov	r4, r0
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	602b      	str	r3, [r5, #0]
 800f1fe:	f7f5 f8ae 	bl	800435e <_fstat>
 800f202:	1c43      	adds	r3, r0, #1
 800f204:	d102      	bne.n	800f20c <_fstat_r+0x1c>
 800f206:	682b      	ldr	r3, [r5, #0]
 800f208:	b103      	cbz	r3, 800f20c <_fstat_r+0x1c>
 800f20a:	6023      	str	r3, [r4, #0]
 800f20c:	bd38      	pop	{r3, r4, r5, pc}
 800f20e:	bf00      	nop
 800f210:	20001544 	.word	0x20001544

0800f214 <_isatty_r>:
 800f214:	b538      	push	{r3, r4, r5, lr}
 800f216:	2300      	movs	r3, #0
 800f218:	4d05      	ldr	r5, [pc, #20]	; (800f230 <_isatty_r+0x1c>)
 800f21a:	4604      	mov	r4, r0
 800f21c:	4608      	mov	r0, r1
 800f21e:	602b      	str	r3, [r5, #0]
 800f220:	f7f5 f8ac 	bl	800437c <_isatty>
 800f224:	1c43      	adds	r3, r0, #1
 800f226:	d102      	bne.n	800f22e <_isatty_r+0x1a>
 800f228:	682b      	ldr	r3, [r5, #0]
 800f22a:	b103      	cbz	r3, 800f22e <_isatty_r+0x1a>
 800f22c:	6023      	str	r3, [r4, #0]
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
 800f230:	20001544 	.word	0x20001544

0800f234 <_lseek_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4604      	mov	r4, r0
 800f238:	4608      	mov	r0, r1
 800f23a:	4611      	mov	r1, r2
 800f23c:	2200      	movs	r2, #0
 800f23e:	4d05      	ldr	r5, [pc, #20]	; (800f254 <_lseek_r+0x20>)
 800f240:	602a      	str	r2, [r5, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	f7f5 f8a4 	bl	8004390 <_lseek>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	d102      	bne.n	800f252 <_lseek_r+0x1e>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	b103      	cbz	r3, 800f252 <_lseek_r+0x1e>
 800f250:	6023      	str	r3, [r4, #0]
 800f252:	bd38      	pop	{r3, r4, r5, pc}
 800f254:	20001544 	.word	0x20001544

0800f258 <_init>:
 800f258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25a:	bf00      	nop
 800f25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25e:	bc08      	pop	{r3}
 800f260:	469e      	mov	lr, r3
 800f262:	4770      	bx	lr

0800f264 <_fini>:
 800f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f266:	bf00      	nop
 800f268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26a:	bc08      	pop	{r3}
 800f26c:	469e      	mov	lr, r3
 800f26e:	4770      	bx	lr
